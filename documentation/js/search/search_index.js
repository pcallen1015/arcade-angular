var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.2.0","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,0.245,1,0.935]],["body/components/AppComponent.html",[0,0.481,1,1.729,2,0.54,3,0.464,4,1.89,5,1.89,6,1.89,7,0.392,8,3.193,9,0.998,10,5.441,11,4.802,12,1.524,13,2.057,14,2.436,15,1.695,16,4.802,17,1.695,18,4.802,19,0.62,20,0.041,21,0.54,22,0.464,23,0.081,24,1.112,25,2.334,26,2.334,27,2.334,28,2.644,29,1.89,30,1.233,31,1.89,32,1.236,33,1.373,34,1.89,35,1.236,36,0.666,37,1.89,38,1.236,39,0.998,40,0.894,41,0.998,42,1.89,43,0.894,44,0.871,45,0.766,46,0.871,47,1.89,48,1.236,49,1.89,50,0.033,51,0.033]],["title/modules/AppModule.html",[52,0.676,53,1.809]],["body/modules/AppModule.html",[1,1.894,2,0.532,3,0.457,7,0.387,19,0.917,20,0.042,21,0.532,22,0.568,23,0.08,24,1.096,33,1.353,50,0.032,51,0.032,52,1.094,53,3.604,54,1.671,55,2.516,56,2.819,57,2.074,58,3.147,59,3.147,60,3.147,61,3.147,62,3.089,63,2.592,64,1.353,65,1.863,66,3.834,67,4.76,68,3.147,69,2.695,70,2.592,71,3.147,72,2.516,73,2.357,74,3.834,75,3.834,76,2.087,77,3.147,78,3.834,79,3.834,80,3.834,81,3.834]],["title/components/BrowseGamesComponent.html",[0,0.245,32,0.935]],["body/components/BrowseGamesComponent.html",[0,0.473,1,0.922,2,0.402,3,0.346,4,1.409,5,1.409,6,1.409,7,0.292,9,0.744,12,1.136,13,1.933,14,2.218,15,1.4,17,1.4,19,0.632,20,0.042,21,0.402,22,0.346,23,0.06,24,0.829,25,1.927,26,1.927,27,1.927,28,2.362,29,1.409,30,1.161,31,1.409,32,1.545,33,1.899,34,1.409,35,0.922,36,0.831,37,1.409,38,0.922,39,0.744,40,0.666,41,0.744,42,1.409,43,0.666,44,0.719,45,0.632,46,0.719,47,1.409,48,0.922,49,1.409,50,0.027,51,0.027,82,4.314,83,3.695,84,2.38,85,3.966,86,3.368,87,3.966,88,3.966,89,3.256,90,1.261,91,1.97,92,3.966,93,3.966,94,0.593,95,1.4,96,2.29,97,3.99,98,1.4,99,4.861,100,1.39,101,2.118,102,1.023,103,2.038,104,1.277,105,1.456,106,3.966,107,1.545,108,1.263,109,1.018,110,1.263,111,2.899,112,3.966,113,1.39,114,1.715,115,2.899,116,2.038,117,1.783,118,2.899,119,1.136,120,2.038,121,1.136,122,3.256,123,1.023,124,1.136,125,2.899,126,2.899,127,3.966,128,3.256,129,3.966,130,3.256]],["title/modules/CoreModule.html",[52,0.676,131,2.068]],["body/modules/CoreModule.html",[2,0.621,3,0.534,7,0.451,19,0.882,20,0.041,21,0.621,22,0.534,23,0.093,50,0.036,51,0.036,52,1.028,55,2.174,70,2.845,131,3.672,132,4.474,133,3.212,134,2.436]],["title/classes/Game.html",[23,0.061,36,0.408]],["body/classes/Game.html",[2,0.439,3,0.377,7,0.319,9,0.811,12,1.648,19,0.803,20,0.042,21,0.439,22,0.502,23,0.098,30,1.434,36,0.834,39,1.079,40,0.966,41,1.079,44,0.762,45,0.67,46,0.762,50,0.029,51,0.029,76,1.721,86,1.943,90,1.004,94,0.647,95,1.484,100,1.617,104,0.726,105,1.44,107,1.004,109,1.079,113,1.351,123,1.777,124,1.239,135,1.943,136,3.451,137,3.976,138,2.217,139,3.16,140,3.451,141,3.16,142,2.289,143,3.451,144,2.222,145,3.451,146,2.594,147,2.594,148,3.451,149,2.594,150,2.594,151,2.594,152,2.594,153,2.594,154,3.451,155,2.222,156,3.451,157,2.594,158,2.594,159,2.594,160,3.878,161,1.667,162,2.548,163,2.594,164,2.594,165,1.667,166,2.594,167,0.811,168,2.594,169,2.594,170,3.451,171,2.594]],["title/classes/GameComponent.html",[23,0.061,172,1.43]],["body/classes/GameComponent.html",[0,0.361,2,0.601,3,0.517,7,0.437,9,1.112,20,0.04,22,0.517,23,0.107,36,0.757,50,0.035,51,0.035,94,0.886,98,1.809,100,1.561,105,1.238,113,1.238,114,1.809,167,1.316,172,2.49,173,3.602,174,3.554,175,4.33,176,4.33,177,2.211,178,4.33,179,3.602,180,5.124]],["title/components/GameViewComponent.html",[0,0.245,35,0.935]],["body/components/GameViewComponent.html",[0,0.463,1,0.869,2,0.379,3,0.326,4,1.328,5,1.328,6,1.328,7,0.276,9,0.702,12,1.071,13,1.906,14,2.172,15,1.344,17,1.344,19,0.756,20,0.042,21,0.379,22,0.326,23,0.057,24,0.781,25,1.85,26,1.85,27,1.85,28,2.303,29,1.328,30,1.125,31,1.328,32,0.869,33,0.964,34,1.328,35,1.506,36,0.836,37,1.328,38,0.869,39,0.702,40,0.628,41,0.702,42,1.328,43,0.628,44,0.69,45,0.607,46,0.69,47,1.328,48,0.869,49,1.328,50,0.026,51,0.026,72,2.129,73,1.68,90,1.21,91,1.91,94,0.559,95,1.344,96,2.172,97,3.891,98,1.344,100,1.514,101,2.065,102,1.344,104,1.241,105,1.476,107,1.506,108,1.191,109,1.125,110,1.191,113,1.355,114,1.673,119,1.071,120,1.921,121,1.071,122,3.126,123,1.344,130,3.126,155,2.677,167,1.217,172,2.303,173,3.722,177,1.858,181,3.722,182,2.243,183,2.073,184,5.4,185,3.807,186,3.807,187,4.739,188,2.733,189,4.739,190,3.807,191,2.733,192,2.341,193,2.733,194,2.733,195,5.161,196,2.243,197,3.126,198,2.733,199,3.126,200,3.807,201,2.733,202,2.733,203,2.733,204,2.733,205,2.733,206,3.807]],["title/modules/GamesModule.html",[52,0.676,62,1.602]],["body/modules/GamesModule.html",[0,0.363,2,0.462,3,0.398,7,0.336,19,0.926,20,0.042,21,0.462,22,0.613,23,0.069,24,0.953,32,1.771,33,1.536,35,1.868,36,0.604,39,0.856,40,1,44,0.604,45,0.694,50,0.03,51,0.03,52,1,54,1.452,55,2.356,56,1.815,57,2.113,62,3.249,63,2.37,64,1.176,65,1.619,70,2.37,71,2.736,72,2.356,73,2.049,76,1.815,77,3.574,83,2.343,104,1.257,121,1.306,133,2.677,134,1.815,144,2.343,181,2.343,207,2.736,208,2.736,209,2.736,210,2.736,211,2.736,212,3.183,213,3.183,214,3.332,215,4.353,216,3.332,217,3.332,218,1.815,219,1.176,220,3.332,221,1.619,222,3.332,223,3.332,224,3.332]],["title/injectables/GamesService.html",[104,0.676,142,1.602]],["body/injectables/GamesService.html",[2,0.412,3,0.354,7,0.299,9,0.762,12,1.163,19,0.782,20,0.042,21,0.412,22,0.481,23,0.084,30,1.39,36,0.832,39,1.035,40,0.926,41,1.035,44,0.731,45,0.642,46,0.731,50,0.027,51,0.027,76,1.616,86,2.478,90,0.943,94,0.607,98,1.422,100,1.597,102,1.047,104,0.926,105,1.467,107,1.281,108,1.994,109,1.175,110,1.994,113,1.513,119,1.163,120,3.216,123,1.732,124,1.163,135,1.825,136,2.436,137,3.72,138,2.233,140,2.436,142,2.491,143,4.029,144,2.086,145,3.756,146,2.436,147,2.436,148,4.029,149,3.308,150,3.308,151,3.308,152,3.308,153,3.308,154,3.756,155,2.833,156,3.756,157,3.308,158,2.436,159,2.436,160,4.029,161,1.732,162,2.631,163,3.308,164,2.436,165,1.615,166,2.436,167,0.762,168,2.436,169,2.436,170,3.308,171,2.436,225,4.03,226,2.967,227,2.967,228,2.967,229,2.967,230,2.967]],["title/components/RockPaperScissorsGameComponent.html",[0,0.245,38,0.935]],["body/components/RockPaperScissorsGameComponent.html",[0,0.394,1,0.466,2,0.204,3,0.175,4,0.713,5,0.713,6,0.713,7,0.148,9,0.377,12,0.575,13,1.571,14,1.307,15,0.839,17,0.839,19,0.478,20,0.042,21,0.204,22,0.175,23,0.031,24,0.419,25,1.156,26,1.156,27,1.156,28,1.676,29,0.713,30,0.886,31,0.713,32,0.466,33,0.518,34,0.713,35,0.466,36,0.766,37,0.713,38,1.205,39,1.287,40,1.38,41,1.517,42,0.713,43,0.337,44,0.431,45,0.379,46,0.431,47,0.713,48,0.466,49,0.713,50,0.028,51,0.016,57,1.307,76,1.633,90,0.756,91,1.307,94,0.3,95,0.839,96,2.366,98,0.839,100,1.531,101,1.503,102,0.518,103,1.031,104,0.982,105,1.542,107,1.096,108,1.036,109,1.143,110,1.036,113,1.571,114,1.509,116,2.108,117,1.844,119,0.575,121,0.575,123,0.518,124,0.575,138,2.081,161,1.338,165,1.706,167,0.886,172,1.842,177,1.591,179,1.031,192,2.829,221,2.62,231,2.936,232,2.936,233,0.799,234,1.952,235,1.952,236,1.952,237,3.449,238,3.449,239,3.449,240,3.449,241,3.449,242,3.449,243,3.449,244,2.378,245,2.378,246,1.467,247,1.972,248,3.654,249,1.467,250,1.467,251,1.467,252,2.999,253,2.495,254,3.449,255,1.467,256,1.467,257,1.467,258,2.297,259,1.204,260,1.204,261,2.574,262,1.676,263,1.467,264,1.878,265,1.878,266,4.058,267,1.467,268,4.058,269,2.378,270,1.467,271,3.776,272,1.467,273,2.378,274,1.467,275,1.878,276,1.972,277,2.108,278,1.467,279,3.112,280,3.449,281,3.449,282,1.467,283,1.467,284,2.378,285,1.467,286,1.467,287,3.449,288,1.467,289,1.467,290,2.462,291,2.378,292,1.467,293,1.467,294,1.467,295,1.467,296,3.449,297,1.467,298,1.467,299,3.449,300,1.467,301,1.952,302,1.204,303,0.799,304,1.952,305,1.156,306,1.204,307,0.713,308,1.156,309,1.204,310,1.204,311,1.952,312,1.204,313,1.031,314,1.204,315,1.204,316,1.204,317,1.204,318,1.204,319,0.713,320,1.204,321,2.378,322,2.378,323,2.378,324,1.467,325,3.449,326,3.791,327,1.204,328,1.467,329,1.467,330,2.462,331,1.467,332,1.467,333,1.467,334,1.467,335,1.156,336,1.467,337,1.467,338,1.467,339,1.467,340,1.467,341,2.378,342,4.452,343,1.878,344,2.378,345,1.467]],["title/modules/RockPaperScissorsModule.html",[52,0.676,212,1.602]],["body/modules/RockPaperScissorsModule.html",[2,0.559,3,0.481,7,0.406,19,0.878,20,0.042,21,0.559,22,0.657,23,0.084,24,1.152,38,1.906,39,1.034,40,1.265,41,1.26,50,0.033,51,0.033,52,1.127,54,1.756,55,2.572,56,2.194,57,1.756,63,2.672,64,1.422,65,1.958,70,2.672,133,3.017,134,2.194,212,3.165,221,1.958,231,2.194,232,2.194,346,3.307,347,3.307,348,3.307,349,4.028,350,3.307]],["title/components/TicTacToeBoardComponent.html",[0,0.245,43,0.676]],["body/components/TicTacToeBoardComponent.html",[0,0.394,1,0.434,2,0.19,3,0.163,4,0.664,5,0.664,6,0.664,7,0.138,9,0.351,12,0.536,13,1.529,14,1.245,15,0.792,17,0.792,19,0.358,20,0.042,21,0.19,22,0.163,23,0.076,24,0.391,25,1.091,26,1.091,27,1.091,28,1.607,29,0.664,30,0.938,31,0.664,32,0.434,33,0.482,34,0.664,35,0.434,36,0.772,37,0.664,38,0.434,39,0.351,40,0.314,41,0.351,42,0.664,43,0.76,44,0.918,45,0.942,46,1.052,47,0.664,48,0.434,49,0.664,50,0.029,51,0.015,64,1.386,90,0.713,91,1.245,94,0.28,95,0.792,96,2.177,98,0.792,100,1.569,101,1.441,102,1.167,103,0.961,104,0.953,105,1.428,107,1.318,108,1.245,109,1.008,110,1.245,113,1.577,114,1.63,119,0.536,121,0.536,123,1.167,124,0.536,138,1.119,161,0.482,162,2.18,165,1.904,167,1.282,177,0.536,183,0.744,218,0.744,219,1.763,247,1.908,253,0.978,258,1.775,261,1.222,262,0.664,264,0.744,265,2.138,275,0.744,276,1.091,303,1.222,305,1.908,307,0.664,308,2.543,319,1.091,335,0.664,343,1.222,351,1.957,352,1.957,353,0.664,354,2.63,355,1.38,356,1.38,357,2.033,358,2.033,359,2.245,360,2.414,361,2.033,362,1.756,363,2.245,364,2.245,365,1.38,366,2.414,367,1.38,368,2.033,369,1.367,370,1.367,371,2.461,372,1.367,373,1.367,374,3.295,375,1.367,376,2.414,377,1.367,378,2.576,379,1.38,380,1.367,381,1.756,382,1.367,383,1.367,384,1.367,385,2.033,386,2.246,387,1.38,388,2.18,389,1.367,390,2.97,391,2.016,392,1.367,393,1.367,394,1.367,395,1.367,396,2.246,397,1.367,398,1.367,399,1.38,400,2.245,401,1.367,402,1.367,403,0.84,404,1.756,405,0.84,406,2.246,407,2.033,408,1.756,409,0.84,410,0.84,411,0.84,412,0.84,413,0.84,414,0.84,415,0.84,416,1.38,417,1.222,418,1.555,419,1.222,420,1.555,421,2.138,422,0.84,423,0.84,424,0.84,425,0.84,426,2.663,427,0.84,428,2.246,429,2.033,430,2.033,431,1.38,432,0.84,433,1.38,434,0.84,435,1.38,436,0.84,437,2.033,438,0.84,439,2.033,440,0.84,441,0.84,442,0.84,443,0.84,444,0.84,445,1.38,446,1.38,447,1.38,448,1.756,449,2.246,450,0.84,451,0.84,452,0.84,453,0.84,454,0.84,455,1.38,456,0.84,457,0.84,458,0.84,459,0.84,460,0.84,461,0.84,462,0.84,463,1.38,464,0.84,465,0.84,466,0.84,467,0.84,468,0.84,469,2.245,470,2.245]],["title/classes/TicTacToeCell.html",[23,0.061,371,1.43]],["body/classes/TicTacToeCell.html",[0,0.339,2,0.235,3,0.202,7,0.17,9,0.434,13,0.597,15,0.597,17,0.597,19,0.425,20,0.042,21,0.235,22,0.202,23,0.09,30,0.434,36,0.757,43,0.388,44,0.895,45,0.906,46,1.008,50,0.032,51,0.018,64,0.94,90,0.537,91,1.161,94,0.346,95,0.94,96,2.151,98,0.94,100,1.57,101,0.737,102,1.436,104,0.859,105,1.163,107,1.374,108,0.737,109,0.684,110,0.737,113,1.57,114,1.525,119,0.663,121,0.663,123,1.32,124,0.663,138,1.292,161,0.597,162,2.198,165,1.972,167,1.267,177,0.663,183,0.921,218,1.45,219,1.436,247,1.817,253,0.737,258,1.977,261,1.795,262,0.822,264,0.921,265,2.216,275,0.921,276,1.294,303,1.45,305,2.1,307,0.822,308,2.555,319,1.294,335,0.822,343,1.795,351,1.595,352,1.595,353,0.822,354,2.353,355,1.039,356,1.039,357,1.039,358,1.039,360,2.781,361,1.039,362,1.039,365,1.039,366,2.3,367,1.039,368,2.027,371,2.488,374,3.417,376,2.965,378,2.894,379,1.039,381,2.027,385,1.638,386,2.3,387,1.039,388,2.1,390,2.882,391,1.817,396,2.027,399,1.039,403,2.3,404,2.657,405,1.638,406,2.502,407,2.3,408,2.3,409,1.638,410,1.638,411,1.039,412,1.039,413,1.039,414,1.039,415,1.039,416,1.638,417,1.45,418,1.795,419,1.45,420,1.795,421,2.353,422,1.039,423,1.039,424,1.039,425,1.039,426,2.882,427,1.039,428,2.502,429,2.3,430,2.3,431,1.638,432,1.039,433,1.638,434,1.039,435,1.638,436,1.039,437,2.3,438,1.039,439,2.3,440,1.039,441,1.039,442,1.039,443,1.039,444,1.039,445,1.638,446,1.638,447,1.638,448,2.027,449,2.027,450,1.039,451,1.039,452,1.039,453,1.039,454,1.039,455,1.638,456,1.039,457,1.039,458,1.039,459,1.039,460,1.039,461,1.039,462,1.039,463,1.638,464,1.039,465,1.039,466,1.039,467,1.039,468,1.039,471,2.664,472,1.69,473,1.69,474,1.69]],["title/components/TicTacToeGameComponent.html",[0,0.245,48,0.935]],["body/components/TicTacToeGameComponent.html",[0,0.467,1,0.907,2,0.396,3,0.34,4,1.386,5,1.386,6,1.386,7,0.288,9,0.732,12,1.118,13,1.926,14,1.954,15,1.384,17,1.384,19,0.715,20,0.042,21,0.396,22,0.34,23,0.059,24,0.816,25,1.906,26,1.906,27,1.906,28,2.346,29,1.386,30,1.007,31,1.386,32,0.907,33,1.007,34,1.386,35,0.907,36,0.797,37,1.386,38,0.907,39,0.732,40,0.655,41,0.732,42,1.386,43,1.163,44,1.059,45,0.961,46,1.086,47,1.386,48,1.609,49,1.386,50,0.027,51,0.027,57,1.954,94,0.584,95,1.384,98,1.384,100,1.447,102,1.582,105,1.381,107,1.247,109,0.732,113,1.122,114,1.582,167,1.343,172,2.46,177,2.1,179,2.005,192,2.412,196,2.342,197,3.22,199,3.22,219,1.704,233,1.553,234,3.22,235,3.22,236,3.22,259,2.342,260,2.342,301,3.22,320,2.342,327,2.342,351,1.892,352,1.118,354,2.848,475,3.394,476,3.923,477,2.853,478,2.342,479,2.853,480,2.853,481,2.853]],["title/classes/TicTacToeGameState.html",[23,0.061,391,1.43]],["body/classes/TicTacToeGameState.html",[0,0.319,2,0.207,3,0.178,7,0.151,9,0.383,13,0.527,15,0.527,17,0.527,19,0.385,20,0.042,21,0.207,22,0.178,23,0.09,30,0.383,36,0.76,43,0.343,44,0.862,45,0.94,46,1.047,50,0.034,51,0.016,64,0.852,90,0.475,91,1.052,94,0.306,95,0.852,96,2.226,98,0.852,100,1.591,101,0.651,102,1.35,104,0.801,105,1.461,107,1.301,108,0.651,109,0.895,110,0.651,113,1.591,114,1.634,119,0.585,121,0.585,123,1.23,124,0.585,138,1.499,161,1.071,162,2.407,165,1.944,167,1.22,177,0.585,183,0.813,218,0.813,219,1.777,247,1.859,253,0.651,258,1.989,261,1.653,262,0.726,264,1.314,265,2.521,275,0.813,276,1.173,303,1.314,305,2.362,307,1.173,308,2.691,319,1.173,335,0.726,343,1.653,351,1.974,352,1.974,353,0.726,354,2.228,355,0.918,356,0.918,357,0.918,358,0.918,360,1.867,361,0.918,362,0.918,365,0.918,366,1.867,367,0.918,368,1.867,371,2.362,374,3.215,376,2.352,378,2.901,379,0.918,381,1.484,385,1.484,386,2.516,387,0.918,388,1.989,390,2.756,391,1.859,396,1.867,399,0.918,403,0.918,404,1.867,405,0.918,406,2.352,407,2.143,408,2.352,409,0.918,410,0.918,411,0.918,412,0.918,413,0.918,414,0.918,415,0.918,416,1.484,417,1.314,418,1.898,419,1.314,420,2.228,421,2.589,422,2.143,423,1.484,424,2.143,425,2.143,426,2.756,427,0.918,428,2.352,429,2.143,430,2.143,431,1.484,432,1.484,433,1.867,434,2.143,435,1.484,436,1.484,437,2.143,438,1.484,439,2.143,440,1.484,441,1.484,442,2.143,443,0.918,444,0.918,445,1.484,446,1.484,447,1.484,448,1.867,449,1.867,450,0.918,451,0.918,452,0.918,453,0.918,454,0.918,455,1.484,456,0.918,457,0.918,458,0.918,459,0.918,460,0.918,461,0.918,462,0.918,463,1.484,464,0.918,465,0.918,466,0.918,467,0.918,468,0.918,482,2.413,483,1.494,484,1.494,485,1.494,486,1.494,487,1.494,488,1.494,489,1.494,490,1.494,491,1.494,492,1.494,493,1.494,494,1.494,495,1.494,496,1.494]],["title/modules/TicTacToeModule.html",[52,0.676,213,1.602]],["body/modules/TicTacToeModule.html",[2,0.54,3,0.464,7,0.392,19,0.891,20,0.042,21,0.54,22,0.649,23,0.081,24,1.112,43,1.308,44,0.871,45,0.908,46,0.987,48,1.898,50,0.033,51,0.033,52,1.103,54,1.695,55,2.532,56,2.118,57,1.695,63,2.615,64,1.373,65,1.89,70,2.615,133,2.953,134,2.118,213,3.199,219,1.373,350,3.193,351,1.524,352,1.524,475,2.734,478,3.193,497,3.193,498,3.193,499,3.193,500,3.889]],["title/classes/TicTacToeRow.html",[23,0.061,388,1.43]],["body/classes/TicTacToeRow.html",[0,0.344,2,0.242,3,0.208,7,0.176,9,0.448,13,0.616,15,0.616,17,0.616,19,0.435,20,0.042,21,0.242,22,0.208,23,0.091,36,0.756,43,0.401,44,0.903,45,0.899,46,1.001,50,0.032,51,0.019,64,0.964,90,0.555,91,1.19,94,0.357,95,0.964,96,2.171,100,1.557,101,0.761,102,1.458,104,0.875,105,1.088,107,1.392,109,0.448,113,1.569,114,1.546,119,0.684,121,0.684,123,1.343,124,0.684,138,1.319,161,0.616,162,2.225,165,1.922,167,1.279,177,0.684,183,1.487,218,0.951,219,1.343,247,1.85,253,0.761,258,2.008,261,1.487,262,0.848,264,0.951,265,2.25,275,0.951,276,1.327,303,1.487,305,2.129,307,0.848,308,2.573,319,1.327,335,0.848,343,1.487,351,1.492,352,1.492,353,0.848,354,2.493,355,1.073,356,1.073,357,1.073,358,1.073,360,2.069,361,1.073,362,1.073,365,1.073,366,2.069,367,1.073,368,2.069,371,2.573,374,3.482,376,2.54,378,2.713,379,1.073,381,1.68,385,1.68,386,2.34,387,1.073,388,2.225,390,3.173,391,1.85,396,2.069,399,1.073,403,1.073,404,2.069,405,1.073,406,2.54,407,2.34,408,2.069,409,1.073,410,1.073,411,1.073,412,1.073,413,1.073,414,1.073,415,2.34,416,1.68,417,1.487,418,1.832,419,1.487,420,1.832,421,2.386,422,1.073,423,1.073,424,1.073,425,1.073,426,2.914,427,1.073,428,2.54,429,2.34,430,2.34,431,1.68,432,1.073,433,1.68,434,1.073,435,1.68,436,1.073,437,2.34,438,1.073,439,2.34,440,1.073,441,1.073,442,1.073,443,1.073,444,1.073,445,1.68,446,1.68,447,1.68,448,2.069,449,2.069,450,1.073,451,1.073,452,1.073,453,1.073,454,1.073,455,1.68,456,1.073,457,1.073,458,1.073,459,1.073,460,1.073,461,1.073,462,1.073,463,1.68,464,1.073,465,1.073,466,1.073,467,1.073,468,1.073,501,2.731,502,1.746,503,1.746]],["title/coverage.html",[504,3.288]],["body/coverage.html",[0,0.456,1,1.058,7,0.336,8,2.731,20,0.041,23,0.111,32,1.058,35,1.058,36,0.604,38,1.058,40,1.343,41,1.451,43,0.764,45,0.945,46,1.045,48,1.058,50,0.03,51,0.03,82,2.731,83,2.339,84,2.731,104,0.764,109,0.854,135,2.979,142,1.812,167,0.854,172,1.617,173,3.057,174,2.731,181,2.339,182,2.731,219,1.881,221,2.497,231,2.798,232,2.798,233,2.903,253,1.45,277,2.339,313,2.339,351,2.089,352,2.014,353,2.497,371,1.617,388,1.617,391,1.617,475,2.339,504,2.731,505,3.327,506,3.327,507,3.327,508,5.981,509,5.571,510,4.349,511,3.327,512,3.327,513,4.349,514,4.349,515,3.844,516,3.327,517,3.327,518,3.327,519,2.731,520,3.57,521,2.731,522,3.327,523,3.327]],["title/dependencies.html",[54,1.541,524,2.461]],["body/dependencies.html",[20,0.041,21,0.606,50,0.035,51,0.035,54,1.902,68,4.227,69,3.619,73,2.684,134,2.377,525,4.365,526,5.985,527,4.365,528,4.365,529,4.365,530,4.365,531,4.365,532,4.365,533,4.365,534,4.365,535,4.365,536,4.365,537,4.365]],["title/miscellaneous/enumerations.html",[538,1.513,539,2.903]],["body/miscellaneous/enumerations.html",[20,0.033,36,0.735,39,1.036,40,1.298,41,1.415,44,0.891,45,0.927,46,1.042,50,0.036,51,0.033,94,0.826,117,3.608,161,1.734,165,1.424,219,1.424,221,1.961,231,2.198,232,2.198,233,2.675,248,4.033,258,2.387,271,3.313,302,3.313,304,4.033,305,2.678,351,1.582,352,1.582,353,2.574,378,2.675,417,2.675,418,2.675,419,2.675,420,2.675,421,2.675,538,2.482,539,3.313,540,3.313,541,4.913]],["title/index.html",[94,0.504,192,1.513,542,2.461]],["body/index.html",[0,0.437,3,0.472,7,0.399,14,1.723,20,0.033,30,1.015,50,0.033,51,0.033,65,1.921,89,3.246,128,4.309,167,1.015,247,1.921,543,3.954,544,4.851,545,5.472,546,5.248,547,3.954,548,3.954,549,3.954,550,4.851,551,5.79,552,5.79,553,3.954,554,3.954,555,3.954,556,3.954,557,3.954,558,3.954,559,3.954,560,3.954,561,5.248,562,3.954,563,5.616,564,3.954,565,3.954,566,3.954,567,3.954,568,3.954,569,3.954,570,3.246,571,4.851,572,5.616,573,4.851,574,4.851,575,3.954,576,5.472,577,3.954,578,3.954,579,3.954,580,5.248,581,3.954,582,3.954,583,3.954]],["title/modules.html",[52,0.92]],["body/modules.html",[20,0.036,33,2.054,50,0.036,51,0.036,52,1.037,53,2.774,62,2.457,69,4.019,86,2.774,131,3.172,212,2.457,213,2.457,584,5.717,585,5.717,586,4.512]],["title/overview.html",[587,3.288]],["body/overview.html",[0,0.305,1,1.81,20,0.041,22,0.437,23,0.076,24,1.047,32,1.612,35,1.81,38,1.81,43,1.165,48,1.81,50,0.031,51,0.031,52,1.063,53,3.502,54,1.596,55,1.78,56,1.995,57,1.596,58,3.007,59,3.007,60,3.007,61,3.007,62,3.272,63,2.519,64,1.293,65,1.78,72,1.78,104,1.165,142,1.995,207,3.007,208,3.007,209,3.007,210,3.007,211,3.007,212,3.19,213,3.226,330,3.007,346,3.007,347,3.007,348,3.007,497,3.007,498,3.007,499,3.007,587,3.007,588,4.626,589,3.663,590,3.663]],["title/routes.html",[72,1.947]],["body/routes.html",[20,0.037,50,0.037,51,0.037,72,2.31]],["title/miscellaneous/variables.html",[515,2.485,538,1.513]],["body/miscellaneous/variables.html",[20,0.041,30,1.147,36,0.791,39,1.387,40,1.343,41,1.49,44,0.81,45,0.712,46,0.81,50,0.03,51,0.03,90,1.102,94,0.71,109,1.42,116,3.954,117,3.4,135,2.132,137,3.14,138,2.117,161,1.744,165,1.744,221,1.685,231,1.888,232,1.888,233,2.842,253,2.451,262,1.685,276,2.171,277,3.474,279,2.846,290,2.846,306,2.846,307,1.685,308,1.685,309,2.846,310,2.846,311,3.667,312,2.846,313,3.474,314,2.846,315,2.846,316,2.846,317,2.846,318,2.846,319,1.685,335,1.685,515,2.437,519,2.846,520,4.678,521,2.846,538,2.132,540,4.057,570,4.057,591,3.467,592,3.467,593,3.467,594,5.219,595,4.467]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BrowseGamesComponent.html":{},"modules/CoreModule.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":448,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["0.8.19",{"_index":537,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":330,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"overview.html":{}}}],["1.7.4",{"_index":548,"title":{},"body":{"index.html":{}}}],["1/1",{"_index":509,"title":{},"body":{"coverage.html":{}}}],["10/10",{"_index":517,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":508,"title":{},"body":{"coverage.html":{}}}],["14/14",{"_index":516,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":590,"title":{},"body":{"overview.html":{}}}],["2.4.1",{"_index":533,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":511,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":319,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/variables.html":{}}}],["3/3",{"_index":513,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":514,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":588,"title":{},"body":{"overview.html":{}}}],["5.2.0",{"_index":526,"title":{},"body":{"dependencies.html":{}}}],["5.5.6",{"_index":535,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":510,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":589,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":512,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":518,"title":{},"body":{"coverage.html":{}}}],["_cell",{"_index":415,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["_choosingmov",{"_index":237,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["_currentplay",{"_index":424,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["_game",{"_index":97,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{}}}],["_opponentmov",{"_index":238,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["_outcom",{"_index":239,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["_play",{"_index":241,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["_playermov",{"_index":240,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["_result",{"_index":422,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["_row",{"_index":357,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["_state",{"_index":358,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["_statu",{"_index":403,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["_timeremain",{"_index":242,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["_winner",{"_index":425,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["abstract",{"_index":180,"title":{},"body":{"classes/GameComponent.html":{}}}],["accept",{"_index":284,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["accessor",{"_index":119,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["activ",{"_index":423,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["activatedrout",{"_index":189,"title":{},"body":{"components/GameViewComponent.html":{}}}],["actual_compon",{"_index":49,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["again",{"_index":344,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["alert(messag",{"_index":414,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["allcel",{"_index":453,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["allow",{"_index":87,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["alreadi",{"_index":412,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["amount",{"_index":290,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"miscellaneous/variables.html":{}}}],["angular",{"_index":128,"title":{},"body":{"components/BrowseGamesComponent.html":{},"index.html":{}}}],["angular/anim",{"_index":525,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":134,"title":{},"body":{"modules/CoreModule.html":{},"modules/GamesModule.html":{},"modules/RockPaperScissorsModule.html":{},"modules/TicTacToeModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":144,"title":{},"body":{"classes/Game.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{}}}],["angular/compil",{"_index":527,"title":{},"body":{"dependencies.html":{}}}],["angular/cor",{"_index":21,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BrowseGamesComponent.html":{},"modules/CoreModule.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"dependencies.html":{}}}],["angular/form",{"_index":528,"title":{},"body":{"dependencies.html":{}}}],["angular/http",{"_index":529,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/rout",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"dependencies.html":{}}}],["app",{"_index":14,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{},"index.html":{}}}],["app.compon",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.html",{"_index":18,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":16,"title":{},"body":{"components/AppComponent.html":{}}}],["appcompon",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{},"coverage.html":{},"overview.html":{}}}],["applic",{"_index":11,"title":{},"body":{"components/AppComponent.html":{}}}],["appmodul",{"_index":53,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arcad",{"_index":129,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["arcadeangular",{"_index":543,"title":{},"body":{"index.html":{}}}],["artifact",{"_index":564,"title":{},"body":{"index.html":{}}}],["automat",{"_index":556,"title":{},"body":{"index.html":{}}}],["avail",{"_index":86,"title":{},"body":{"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"injectables/GamesService.html":{},"modules.html":{}}}],["back",{"_index":206,"title":{},"body":{"components/GameViewComponent.html":{}}}],["base",{"_index":175,"title":{},"body":{"classes/GameComponent.html":{}}}],["basic",{"_index":136,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["be",{"_index":275,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["board",{"_index":354,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["board'},{'nam",{"_index":47,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["board.compon",{"_index":478,"title":{},"body":{"components/TicTacToeGameComponent.html":{},"modules/TicTacToeModule.html":{}}}],["board.component.html",{"_index":356,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["board.component.scss",{"_index":355,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["board.component.t",{"_index":353,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["board.component.ts:101",{"_index":482,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["board.component.ts:11",{"_index":471,"title":{},"body":{"classes/TicTacToeCell.html":{}}}],["board.component.ts:119",{"_index":490,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["board.component.ts:124",{"_index":492,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["board.component.ts:129",{"_index":494,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["board.component.ts:134",{"_index":486,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["board.component.ts:143",{"_index":488,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["board.component.ts:151",{"_index":485,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["board.component.ts:159",{"_index":496,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["board.component.ts:166",{"_index":487,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["board.component.ts:186",{"_index":369,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["board.component.ts:191",{"_index":389,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["board.component.ts:196",{"_index":364,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["board.component.ts:207",{"_index":382,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["board.component.ts:214",{"_index":393,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["board.component.ts:219",{"_index":395,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["board.component.ts:224",{"_index":398,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["board.component.ts:239",{"_index":402,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["board.component.ts:25",{"_index":474,"title":{},"body":{"classes/TicTacToeCell.html":{}}}],["board.component.ts:253",{"_index":372,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["board.component.ts:262",{"_index":384,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["board.component.ts:309",{"_index":380,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["board.component.ts:31",{"_index":472,"title":{},"body":{"classes/TicTacToeCell.html":{}}}],["board.component.ts:325",{"_index":383,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["board.component.ts:50",{"_index":501,"title":{},"body":{"classes/TicTacToeRow.html":{}}}],["board.component.ts:64",{"_index":503,"title":{},"body":{"classes/TicTacToeRow.html":{}}}],["board.component.ts:91",{"_index":484,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["board.component.ts:96",{"_index":483,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["board/tic",{"_index":352,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["boolean",{"_index":261,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["bootstrap",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/GamesModule.html":{},"modules/RockPaperScissorsModule.html":{},"modules/TicTacToeModule.html":{},"overview.html":{}}}],["broadcast",{"_index":365,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["brows",{"_index":33,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{},"modules.html":{}}}],["browsegamescompon",{"_index":32,"title":{"components/BrowseGamesComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{},"coverage.html":{},"overview.html":{}}}],["browser",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"modules.html":{}}}],["browsermodul",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["build",{"_index":563,"title":{},"body":{"index.html":{}}}],["c",{"_index":447,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["cell",{"_index":374,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["cell'",{"_index":409,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["cell.click(this._state.currentplay",{"_index":461,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["cell.statu",{"_index":449,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["cells.filter((cel",{"_index":451,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["chang",{"_index":558,"title":{},"body":{"index.html":{}}}],["check",{"_index":247,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"index.html":{}}}],["checkforwinn",{"_index":359,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["checkforwinner(cel",{"_index":370,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["checkresult",{"_index":243,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["choic",{"_index":254,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["choos",{"_index":266,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["choosemov",{"_index":244,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["choosemove(choic",{"_index":249,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["choosingmov",{"_index":291,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["claim",{"_index":376,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["class",{"_index":23,"title":{"classes/Game.html":{},"classes/GameComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BrowseGamesComponent.html":{},"modules/CoreModule.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{},"overview.html":{}}}],["clear",{"_index":438,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["cli",{"_index":546,"title":{},"body":{"index.html":{}}}],["click",{"_index":360,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["click(cel",{"_index":379,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["click(play",{"_index":410,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["cluster_appmodul",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declar",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_import",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_gamesmodul",{"_index":207,"title":{},"body":{"modules/GamesModule.html":{},"overview.html":{}}}],["cluster_gamesmodule_declar",{"_index":208,"title":{},"body":{"modules/GamesModule.html":{},"overview.html":{}}}],["cluster_gamesmodule_export",{"_index":210,"title":{},"body":{"modules/GamesModule.html":{},"overview.html":{}}}],["cluster_gamesmodule_import",{"_index":209,"title":{},"body":{"modules/GamesModule.html":{},"overview.html":{}}}],["cluster_gamesmodule_provid",{"_index":211,"title":{},"body":{"modules/GamesModule.html":{},"overview.html":{}}}],["cluster_rockpaperscissorsmodul",{"_index":346,"title":{},"body":{"modules/RockPaperScissorsModule.html":{},"overview.html":{}}}],["cluster_rockpaperscissorsmodule_declar",{"_index":347,"title":{},"body":{"modules/RockPaperScissorsModule.html":{},"overview.html":{}}}],["cluster_rockpaperscissorsmodule_export",{"_index":348,"title":{},"body":{"modules/RockPaperScissorsModule.html":{},"overview.html":{}}}],["cluster_tictactoemodul",{"_index":497,"title":{},"body":{"modules/TicTacToeModule.html":{},"overview.html":{}}}],["cluster_tictactoemodule_declar",{"_index":498,"title":{},"body":{"modules/TicTacToeModule.html":{},"overview.html":{}}}],["cluster_tictactoemodule_export",{"_index":499,"title":{},"body":{"modules/TicTacToeModule.html":{},"overview.html":{}}}],["code",{"_index":559,"title":{},"body":{"index.html":{}}}],["collect",{"_index":373,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["column",{"_index":396,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["commonmodul",{"_index":133,"title":{},"body":{"modules/CoreModule.html":{},"modules/GamesModule.html":{},"modules/RockPaperScissorsModule.html":{},"modules/TicTacToeModule.html":{}}}],["compon",{"_index":0,"title":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["component.t",{"_index":174,"title":{},"body":{"classes/GameComponent.html":{},"coverage.html":{}}}],["component.ts:9",{"_index":178,"title":{},"body":{"classes/GameComponent.html":{}}}],["component_templ",{"_index":29,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["comput",{"_index":311,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"miscellaneous/variables.html":{}}}],["computer'",{"_index":269,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["condit",{"_index":387,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["configur",{"_index":595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.error(`fail",{"_index":171,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["console.info('start",{"_index":480,"title":{},"body":{"components/TicTacToeGameComponent.html":{}}}],["console.info(`${gam",{"_index":169,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["console.log('draw",{"_index":468,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["console.log(`winn",{"_index":464,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["console.warn(messag",{"_index":413,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["consolid",{"_index":149,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["const",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"classes/Game.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{}}}],["constructor",{"_index":102,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["constructor(gamesservic",{"_index":103,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{}}}],["constructor(http",{"_index":226,"title":{},"body":{"injectables/GamesService.html":{}}}],["constructor(priv",{"_index":124,"title":{},"body":{"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["constructor(rout",{"_index":188,"title":{},"body":{"components/GameViewComponent.html":{}}}],["contain",{"_index":183,"title":{},"body":{"components/GameViewComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["core",{"_index":531,"title":{},"body":{"dependencies.html":{}}}],["coremodul",{"_index":131,"title":{"modules/CoreModule.html":{}},"body":{"modules/CoreModule.html":{},"modules.html":{}}}],["coverag",{"_index":504,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["current",{"_index":265,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["currentplay",{"_index":432,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["date()}).map((data",{"_index":168,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["declar",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/GamesModule.html":{},"modules/RockPaperScissorsModule.html":{},"modules/TicTacToeModule.html":{},"overview.html":{}}}],["decor",{"_index":196,"title":{},"body":{"components/GameViewComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["default",{"_index":116,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"miscellaneous/variables.html":{}}}],["defin",{"_index":105,"title":{},"body":{"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["definit",{"_index":176,"title":{},"body":{"classes/GameComponent.html":{}}}],["depend",{"_index":54,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/GamesModule.html":{},"modules/RockPaperScissorsModule.html":{},"modules/TicTacToeModule.html":{},"dependencies.html":{},"overview.html":{}}}],["descript",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["determin",{"_index":336,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["dev",{"_index":554,"title":{},"body":{"index.html":{}}}],["develop",{"_index":549,"title":{},"body":{"index.html":{}}}],["diagon",{"_index":400,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["differ",{"_index":417,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/enumerations.html":{}}}],["direct",{"_index":27,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|modul",{"_index":562,"title":{},"body":{"index.html":{}}}],["directori",{"_index":567,"title":{},"body":{"index.html":{}}}],["display",{"_index":85,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["dist",{"_index":566,"title":{},"body":{"index.html":{}}}],["document",{"_index":505,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":5,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["draw",{"_index":305,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/enumerations.html":{}}}],["dynam",{"_index":530,"title":{},"body":{"dependencies.html":{}}}],["e.g",{"_index":309,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"miscellaneous/variables.html":{}}}],["e2",{"_index":577,"title":{},"body":{"index.html":{}}}],["element",{"_index":26,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["end",{"_index":576,"title":{},"body":{"index.html":{}}}],["enum",{"_index":303,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["enumer",{"_index":539,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environ",{"_index":520,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":170,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["event",{"_index":366,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["eventemitt",{"_index":368,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["execut",{"_index":573,"title":{},"body":{"index.html":{}}}],["export",{"_index":22,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BrowseGamesComponent.html":{},"modules/CoreModule.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"overview.html":{}}}],["extend",{"_index":234,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["fals",{"_index":262,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":7,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BrowseGamesComponent.html":{},"modules/CoreModule.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{},"index.html":{}}}],["flag",{"_index":569,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":301,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["full",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["function",{"_index":152,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["further",{"_index":579,"title":{},"body":{"index.html":{}}}],["game",{"_index":36,"title":{"classes/Game.html":{}},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["game'},{'nam",{"_index":42,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["game.compon",{"_index":350,"title":{},"body":{"modules/RockPaperScissorsModule.html":{},"modules/TicTacToeModule.html":{}}}],["game.component.html",{"_index":236,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["game.component.scss",{"_index":235,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["game.component.t",{"_index":233,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeGameComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["game.component.ts:102",{"_index":267,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:107",{"_index":245,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:118",{"_index":256,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:125",{"_index":246,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:136",{"_index":257,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:162",{"_index":250,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:170",{"_index":255,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:18",{"_index":476,"title":{},"body":{"components/TicTacToeGameComponent.html":{}}}],["game.component.ts:28",{"_index":477,"title":{},"body":{"components/TicTacToeGameComponent.html":{}}}],["game.component.ts:47",{"_index":283,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:52",{"_index":274,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:57",{"_index":286,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:62",{"_index":278,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:67",{"_index":289,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:72",{"_index":263,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:77",{"_index":293,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:82",{"_index":270,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:87",{"_index":295,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:92",{"_index":272,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:97",{"_index":298,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.id",{"_index":159,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["game.nam",{"_index":130,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{}}}],["game/:gameid",{"_index":223,"title":{},"body":{"modules/GamesModule.html":{}}}],["game/rock",{"_index":232,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["game/t",{"_index":475,"title":{},"body":{"components/TicTacToeGameComponent.html":{},"modules/TicTacToeModule.html":{},"coverage.html":{}}}],["gamecompon",{"_index":172,"title":{"classes/GameComponent.html":{}},"body":{"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeGameComponent.html":{},"coverage.html":{}}}],["gamecomponent:9",{"_index":260,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["gameid",{"_index":156,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["gameov",{"_index":441,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["gameref",{"_index":187,"title":{},"body":{"components/GameViewComponent.html":{}}}],["games'},{'nam",{"_index":34,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["games.compon",{"_index":216,"title":{},"body":{"modules/GamesModule.html":{}}}],["games.component.html",{"_index":93,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["games.component.scss",{"_index":92,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["games.component.t",{"_index":84,"title":{},"body":{"components/BrowseGamesComponent.html":{},"coverage.html":{}}}],["games.component.ts:17",{"_index":118,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["games.component.ts:22",{"_index":106,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["games.component.ts:33",{"_index":111,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["games.component.ts:40",{"_index":115,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["games.find((gam",{"_index":158,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["games.servic",{"_index":121,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["games/brows",{"_index":83,"title":{},"body":{"components/BrowseGamesComponent.html":{},"modules/GamesModule.html":{},"coverage.html":{}}}],["games/games.modul",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["gamesmodul",{"_index":62,"title":{"modules/GamesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GamesModule.html":{},"modules.html":{},"overview.html":{}}}],["gamesservic",{"_index":104,"title":{"injectables/GamesService.html":{}},"body":{"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{},"overview.html":{}}}],["gameviewcompon",{"_index":35,"title":{"components/GameViewComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{},"coverage.html":{},"overview.html":{}}}],["gener",{"_index":545,"title":{},"body":{"index.html":{}}}],["get",{"_index":542,"title":{"index.html":{}},"body":{}}],["getcel",{"_index":502,"title":{},"body":{"classes/TicTacToeRow.html":{}}}],["getchoosingmov",{"_index":292,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["getcolumn",{"_index":397,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["getcurrentplay",{"_index":491,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["getdiagon",{"_index":401,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["getgam",{"_index":120,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{}}}],["getgame(gameid",{"_index":157,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["getgameov",{"_index":495,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["getmov",{"_index":282,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["getopponentmov",{"_index":300,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["getoutcom",{"_index":294,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["getplay",{"_index":285,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["getplayermov",{"_index":297,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["getresult",{"_index":489,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["getrow",{"_index":392,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["getstat",{"_index":394,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["getstatu",{"_index":473,"title":{},"body":{"classes/TicTacToeCell.html":{}}}],["gettimeremain",{"_index":288,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["getwinn",{"_index":493,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["given",{"_index":375,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["go",{"_index":582,"title":{},"body":{"index.html":{}}}],["graph",{"_index":586,"title":{},"body":{"modules.html":{}}}],["handl",{"_index":381,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["help",{"_index":580,"title":{},"body":{"index.html":{}}}],["horizont",{"_index":454,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["html",{"_index":25,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["http",{"_index":154,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["http://localhost:4200",{"_index":555,"title":{},"body":{"index.html":{}}}],["httpclient",{"_index":143,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["httpclientmodul",{"_index":215,"title":{},"body":{"modules/GamesModule.html":{}}}],["human",{"_index":273,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["id",{"_index":137,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{},"miscellaneous/variables.html":{}}}],["identifi",{"_index":506,"title":{},"body":{"coverage.html":{}}}],["implement",{"_index":90,"title":{},"body":{"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/variables.html":{}}}],["import",{"_index":19,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BrowseGamesComponent.html":{},"modules/CoreModule.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{}}}],["index",{"_index":94,"title":{"index.html":{}},"body":{"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["individu",{"_index":218,"title":{},"body":{"modules/GamesModule.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["info",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BrowseGamesComponent.html":{},"modules/CoreModule.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{}}}],["inherit",{"_index":259,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["initgam",{"_index":99,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["initi",{"_index":107,"title":{},"body":{"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["inject",{"_index":142,"title":{"injectables/GamesService.html":{}},"body":{"classes/Game.html":{},"injectables/GamesService.html":{},"coverage.html":{},"overview.html":{}}}],["js",{"_index":532,"title":{},"body":{"dependencies.html":{}}}],["karma",{"_index":575,"title":{},"body":{"index.html":{}}}],["legend",{"_index":24,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{},"modules/TicTacToeModule.html":{},"overview.html":{}}}],["list",{"_index":112,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["load",{"_index":195,"title":{},"body":{"components/GameViewComponent.html":{}}}],["lose",{"_index":304,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"miscellaneous/enumerations.html":{}}}],["make",{"_index":318,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"miscellaneous/variables.html":{}}}],["match",{"_index":51,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BrowseGamesComponent.html":{},"modules/CoreModule.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["messag",{"_index":411,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["metadata",{"_index":12,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["method",{"_index":98,"title":{},"body":{"components/BrowseGamesComponent.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{}}}],["miscellan",{"_index":538,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["modul",{"_index":52,"title":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/GamesModule.html":{},"modules/RockPaperScissorsModule.html":{},"modules/TicTacToeModule.html":{},"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/GamesModule.html":{},"modules/RockPaperScissorsModule.html":{},"modules/TicTacToeModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":581,"title":{},"body":{"index.html":{}}}],["move",{"_index":253,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["move]/[comput",{"_index":310,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"miscellaneous/variables.html":{}}}],["move]/[play",{"_index":312,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"miscellaneous/variables.html":{}}}],["move_time_limit",{"_index":277,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["moves.length",{"_index":338,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["moves[math.floor(math.random",{"_index":337,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["name",{"_index":30,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["navig",{"_index":89,"title":{},"body":{"components/BrowseGamesComponent.html":{},"index.html":{}}}],["new",{"_index":167,"title":{},"body":{"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{},"index.html":{}}}],["newgam",{"_index":177,"title":{},"body":{"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["ng",{"_index":552,"title":{},"body":{"index.html":{}}}],["ngmodul",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/GamesModule.html":{},"modules/RockPaperScissorsModule.html":{},"modules/TicTacToeModule.html":{}}}],["ngoninit",{"_index":101,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["nobodi",{"_index":405,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["none",{"_index":343,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["null",{"_index":407,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["null).length",{"_index":456,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["number",{"_index":276,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/variables.html":{}}}],["o",{"_index":419,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/enumerations.html":{}}}],["object",{"_index":594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observ",{"_index":145,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["oninit",{"_index":91,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["onnewgam",{"_index":363,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["opponent'",{"_index":268,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["opponent\\'",{"_index":345,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["opponentmov",{"_index":299,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["option",{"_index":110,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{}}}],["out",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/GamesModule.html":{},"modules/RockPaperScissorsModule.html":{},"modules/TicTacToeModule.html":{},"index.html":{},"overview.html":{}}}],["outcom",{"_index":271,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"miscellaneous/enumerations.html":{}}}],["output",{"_index":362,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["output('onnewgam",{"_index":443,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["over",{"_index":386,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["overview",{"_index":587,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":524,"title":{"dependencies.html":{}},"body":{}}],["paper",{"_index":40,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["paper/rock",{"_index":315,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"miscellaneous/variables.html":{}}}],["param",{"_index":123,"title":{},"body":{"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["paramet",{"_index":108,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{}}}],["parammap",{"_index":200,"title":{},"body":{"components/GameViewComponent.html":{}}}],["parent",{"_index":367,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["path",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/GamesModule.html":{}}}],["pathmatch",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["play",{"_index":258,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/enumerations.html":{}}}],["playedon",{"_index":166,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["player",{"_index":165,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["player'",{"_index":252,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["playermov",{"_index":296,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["possibl",{"_index":302,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"miscellaneous/enumerations.html":{}}}],["privat",{"_index":96,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["prod",{"_index":568,"title":{},"body":{"index.html":{}}}],["product",{"_index":570,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["project",{"_index":544,"title":{},"body":{"index.html":{}}}],["properti",{"_index":95,"title":{},"body":{"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["protractor",{"_index":578,"title":{},"body":{"index.html":{}}}],["provid",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/GamesModule.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeGameComponent.html":{},"modules/TicTacToeModule.html":{},"overview.html":{}}}],["public",{"_index":100,"title":{},"body":{"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["quick",{"_index":341,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["r",{"_index":455,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["readm",{"_index":583,"title":{},"body":{"index.html":{}}}],["redirectto",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["refer",{"_index":199,"title":{},"body":{"components/GameViewComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["relat",{"_index":151,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["reload",{"_index":557,"title":{},"body":{"index.html":{}}}],["remain",{"_index":280,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["report",{"_index":160,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["reportwin",{"_index":225,"title":{},"body":{"injectables/GamesService.html":{}}}],["reportwin(gam",{"_index":163,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["repres",{"_index":440,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["represent",{"_index":307,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/variables.html":{}}}],["reset",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/GamesModule.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"overview.html":{}}}],["result",{"_index":50,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BrowseGamesComponent.html":{},"modules/CoreModule.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":113,"title":{},"body":{"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["rock",{"_index":39,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["rock/scissor",{"_index":314,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"miscellaneous/variables.html":{}}}],["rockpaperscissorsgamecompon",{"_index":38,"title":{"components/RockPaperScissorsGameComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{},"coverage.html":{},"overview.html":{}}}],["rockpaperscissorsmodul",{"_index":212,"title":{"modules/RockPaperScissorsModule.html":{}},"body":{"modules/GamesModule.html":{},"modules/RockPaperScissorsModule.html":{},"modules.html":{},"overview.html":{}}}],["rockpaperscissorsresult",{"_index":248,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"miscellaneous/enumerations.html":{}}}],["rockpaperscissorsresult.draw",{"_index":334,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["rockpaperscissorsresult.los",{"_index":333,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["rockpaperscissorsresult.win",{"_index":331,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["root",{"_index":10,"title":{},"body":{"components/AppComponent.html":{}}}],["root'},{'nam",{"_index":31,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["rout",{"_index":72,"title":{"routes.html":{}},"body":{"modules/AppModule.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"overview.html":{},"routes.html":{}}}],["routermodul",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/GamesModule.html":{}}}],["routermodule.forchild(rout",{"_index":224,"title":{},"body":{"modules/GamesModule.html":{}}}],["routermodule.forroot(rout",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["row",{"_index":390,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["run",{"_index":551,"title":{},"body":{"index.html":{}}}],["rxj",{"_index":534,"title":{},"body":{"dependencies.html":{}}}],["rxjs/add/operator/map",{"_index":147,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["rxjs/observ",{"_index":146,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["same",{"_index":377,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["scaffold",{"_index":560,"title":{},"body":{"index.html":{}}}],["scissor",{"_index":41,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["scissors.modul",{"_index":222,"title":{},"body":{"modules/GamesModule.html":{}}}],["scissors.module.t",{"_index":349,"title":{},"body":{"modules/RockPaperScissorsModule.html":{}}}],["scissors/pap",{"_index":316,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"miscellaneous/variables.html":{}}}],["scissors/rock",{"_index":221,"title":{},"body":{"modules/GamesModule.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["second",{"_index":317,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"miscellaneous/variables.html":{}}}],["select",{"_index":281,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["selector",{"_index":13,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["serv",{"_index":553,"title":{},"body":{"index.html":{}}}],["server",{"_index":550,"title":{},"body":{"index.html":{}}}],["servic",{"_index":148,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["set",{"_index":408,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["setinterv",{"_index":340,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["share",{"_index":150,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["singl",{"_index":155,"title":{},"body":{"classes/Game.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BrowseGamesComponent.html":{},"modules/CoreModule.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"index.html":{}}}],["src/.../environment.prod.t",{"_index":591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.t",{"_index":592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../games.service.t",{"_index":593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../rock",{"_index":540,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../tic",{"_index":541,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app/app.component.t",{"_index":8,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.module.t",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/core/core.module.t",{"_index":132,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/app/games/brows",{"_index":82,"title":{},"body":{"components/BrowseGamesComponent.html":{},"coverage.html":{}}}],["src/app/games/gam",{"_index":173,"title":{},"body":{"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"coverage.html":{}}}],["src/app/games/games.module.t",{"_index":214,"title":{},"body":{"modules/GamesModule.html":{}}}],["src/app/games/games.service.t",{"_index":135,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/games/games.service.ts:13",{"_index":139,"title":{},"body":{"classes/Game.html":{}}}],["src/app/games/games.service.ts:18",{"_index":141,"title":{},"body":{"classes/Game.html":{}}}],["src/app/games/games.service.ts:38",{"_index":227,"title":{},"body":{"injectables/GamesService.html":{}}}],["src/app/games/games.service.ts:49",{"_index":230,"title":{},"body":{"injectables/GamesService.html":{}}}],["src/app/games/games.service.ts:55",{"_index":228,"title":{},"body":{"injectables/GamesService.html":{}}}],["src/app/games/games.service.ts:62",{"_index":229,"title":{},"body":{"injectables/GamesService.html":{}}}],["src/app/games/rock",{"_index":231,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/app/games/t",{"_index":351,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/environments/environment.prod.t",{"_index":519,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.t",{"_index":521,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":192,"title":{"index.html":{}},"body":{"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["state",{"_index":308,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/variables.html":{}}}],["state.tostr",{"_index":469,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["state.winn",{"_index":470,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["statement",{"_index":507,"title":{},"body":{"coverage.html":{}}}],["statu",{"_index":404,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["still",{"_index":458,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["store",{"_index":565,"title":{},"body":{"index.html":{}}}],["string",{"_index":138,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/variables.html":{}}}],["styleurl",{"_index":15,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["super",{"_index":327,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["support",{"_index":584,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":585,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":433,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["switchplay",{"_index":434,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["tabl",{"_index":523,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":522,"title":{},"body":{"coverage.html":{}}}],["tac",{"_index":45,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["take",{"_index":251,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["templat",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["templateurl",{"_index":17,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["test",{"_index":572,"title":{},"body":{"index.html":{}}}],["this._cel",{"_index":416,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this._choosingmov",{"_index":323,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["this._currentplay",{"_index":428,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this._gam",{"_index":122,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{}}}],["this._opponentmov",{"_index":326,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["this._outcom",{"_index":324,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["this._play",{"_index":321,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["this._playermov",{"_index":325,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["this._result",{"_index":426,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this._row",{"_index":445,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this._stat",{"_index":446,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this._state.draw",{"_index":457,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this._state.gameov",{"_index":460,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this._state.result",{"_index":463,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this._state.switchplay",{"_index":459,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this._state.winn",{"_index":465,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this._state.winner.tostring()).subscrib",{"_index":467,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this._statu",{"_index":406,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this._timeremain",{"_index":322,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["this._winn",{"_index":430,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this.board.reset",{"_index":481,"title":{},"body":{"components/TicTacToeGameComponent.html":{}}}],["this.gam",{"_index":204,"title":{},"body":{"components/GameViewComponent.html":{}}}],["this.gameref.newgam",{"_index":205,"title":{},"body":{"components/GameViewComponent.html":{}}}],["this.gamesservice.gam",{"_index":125,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["this.gamesservice.getgame(params.get('gameid",{"_index":203,"title":{},"body":{"components/GameViewComponent.html":{}}}],["this.gamesservice.reportwin('t",{"_index":466,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this.http.post('/local/win",{"_index":164,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["this.initgam",{"_index":126,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["this.newgam",{"_index":328,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["this.reset",{"_index":444,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this.route.parammap.subscribe((param",{"_index":202,"title":{},"body":{"components/GameViewComponent.html":{}}}],["this.updategamest",{"_index":462,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["tic",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["tictactoeboardcompon",{"_index":43,"title":{"components/TicTacToeBoardComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{},"overview.html":{}}}],["tictactoecel",{"_index":371,"title":{"classes/TicTacToeCell.html":{}},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{}}}],["tictactoegamecompon",{"_index":48,"title":{"components/TicTacToeGameComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{},"modules/TicTacToeModule.html":{},"coverage.html":{},"overview.html":{}}}],["tictactoegameresult",{"_index":420,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/enumerations.html":{}}}],["tictactoegameresult.draw",{"_index":439,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["tictactoegameresult.play",{"_index":427,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["tictactoegameresult.won",{"_index":437,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["tictactoegamest",{"_index":391,"title":{"classes/TicTacToeGameState.html":{}},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{}}}],["tictactoemodul",{"_index":213,"title":{"modules/TicTacToeModule.html":{}},"body":{"modules/GamesModule.html":{},"modules/TicTacToeModule.html":{},"modules.html":{},"overview.html":{}}}],["tictactoeplay",{"_index":378,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/enumerations.html":{}}}],["tictactoeplayer.o",{"_index":435,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["tictactoeplayer.o).length",{"_index":452,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["tictactoeplayer.x",{"_index":429,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["tictactoeplayer.x).length",{"_index":450,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["tictactoerow",{"_index":388,"title":{"classes/TicTacToeRow.html":{}},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{}}}],["time",{"_index":279,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"miscellaneous/variables.html":{}}}],["timer",{"_index":339,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["timeremain",{"_index":287,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["toe",{"_index":46,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["toe.modul",{"_index":220,"title":{},"body":{"modules/GamesModule.html":{}}}],["toe.module.t",{"_index":500,"title":{},"body":{"modules/TicTacToeModule.html":{}}}],["toe/tic",{"_index":219,"title":{},"body":{"modules/GamesModule.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["tostr",{"_index":442,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["track",{"_index":264,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["transpos",{"_index":399,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["tree",{"_index":6,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["trigger",{"_index":179,"title":{},"body":{"classes/GameComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["true",{"_index":335,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":109,"title":{},"body":{"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["undefin",{"_index":431,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["uniqu",{"_index":140,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["unit",{"_index":571,"title":{},"body":{"index.html":{}}}],["updat",{"_index":385,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["updategamest",{"_index":361,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["uppercas",{"_index":342,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["us",{"_index":561,"title":{},"body":{"index.html":{}}}],["useexist",{"_index":320,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["user",{"_index":88,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["util",{"_index":153,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["valid",{"_index":306,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"miscellaneous/variables.html":{}}}],["valu",{"_index":117,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["variabl",{"_index":515,"title":{"miscellaneous/variables.html":{}},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":547,"title":{},"body":{"index.html":{}}}],["via",{"_index":574,"title":{},"body":{"index.html":{}}}],["view",{"_index":184,"title":{},"body":{"components/GameViewComponent.html":{}}}],["view'},{'nam",{"_index":37,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["view.compon",{"_index":217,"title":{},"body":{"modules/GamesModule.html":{}}}],["view.component.html",{"_index":186,"title":{},"body":{"components/GameViewComponent.html":{}}}],["view.component.scss",{"_index":185,"title":{},"body":{"components/GameViewComponent.html":{}}}],["view.component.t",{"_index":182,"title":{},"body":{"components/GameViewComponent.html":{},"coverage.html":{}}}],["view.component.ts:19",{"_index":198,"title":{},"body":{"components/GameViewComponent.html":{}}}],["view.component.ts:24",{"_index":194,"title":{},"body":{"components/GameViewComponent.html":{}}}],["view.component.ts:29",{"_index":190,"title":{},"body":{"components/GameViewComponent.html":{}}}],["view.component.ts:44",{"_index":193,"title":{},"body":{"components/GameViewComponent.html":{}}}],["view.component.ts:53",{"_index":191,"title":{},"body":{"components/GameViewComponent.html":{}}}],["view/gam",{"_index":181,"title":{},"body":{"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"coverage.html":{}}}],["viewchild",{"_index":197,"title":{},"body":{"components/GameViewComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["viewchild(gamecompon",{"_index":201,"title":{},"body":{"components/GameViewComponent.html":{}}}],["viewchild(tictactoeboardcompon",{"_index":479,"title":{},"body":{"components/TicTacToeGameComponent.html":{}}}],["void",{"_index":114,"title":{},"body":{"components/BrowseGamesComponent.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["welcom",{"_index":127,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["win",{"_index":161,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["win(play",{"_index":436,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["win_stat",{"_index":313,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["win_states.indexof(state.join",{"_index":329,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["win_states.indexof(state.reverse().join",{"_index":332,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["winner",{"_index":162,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["won",{"_index":421,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/enumerations.html":{}}}],["x",{"_index":418,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/enumerations.html":{}}}],["zone.j",{"_index":536,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/GamesModule.html":{},"modules/RockPaperScissorsModule.html":{},"modules/TicTacToeModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n    \n        Description\n    \n    \n        The root component of the application\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                app.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n/**\n * The root component of the application\n */\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {}\n\n    \n\n    \n        \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BrowseGamesComponent', 'selector': 'app-browse-games'},{'name': 'GameViewComponent', 'selector': 'app-game-view'},{'name': 'RockPaperScissorsGameComponent', 'selector': 'rock-paper-scissors-game'},{'name': 'TicTacToeBoardComponent', 'selector': 'tic-tac-toe-board'},{'name': 'TicTacToeGameComponent', 'selector': 'tic-tac-toe-game'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n  Modules\n  AppModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nGamesModule\n\nGamesModule\n\nAppModule -->\n\nGamesModule->AppModule\n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                AppComponent\n                            \n                    \n                \n                \n                    Imports\n                    \n                            \n                                    GamesModule\n                            \n                    \n                \n                \n                    Bootstrap\n                    \n                            \n                                AppComponent\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { AppComponent } from './app.component';\n\nimport { GamesModule } from './games/games.module';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'browse', pathMatch: 'full' }\n];\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    RouterModule.forRoot(routes),\n\n    GamesModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BrowseGamesComponent.html":{"url":"components/BrowseGamesComponent.html","title":"component - BrowseGamesComponent","body":"\n                   \n\n\n\n\n\n  Components\n  BrowseGamesComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/games/browse-games/browse-games.component.ts\n\n\n    \n        Description\n    \n    \n        Component that displays the available games and allows users to navigate to a game\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-browse-games\n            \n\n            \n                styleUrls\n                browse-games.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./browse-games.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _games\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                initGames\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(gamesService: GamesService)\n                    \n                \n                        \n                            \n                                Defined in src/app/games/browse-games/browse-games.component.ts:22\n                            \n                        \n\n                \n                    \n                            Initialize the component\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gamesService\n                                                  \n                                                        \n                                                                    GamesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            initGames\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initGames()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/browse-games/browse-games.component.ts:33\n                            \n                        \n\n\n                \n                    \n                            Get the list of available games from GamesService\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        ngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/browse-games/browse-games.component.ts:40\n                            \n                        \n\n\n                \n                    \n                            Initialize the component\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _games\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _games:     Game[]\n\n                    \n                \n                    \n                        \n                            Type :     Game[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/browse-games/browse-games.component.ts:17\n                            \n                        \n\n                \n                    \n                        The available games\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        games\n                    \n                \n\n                \n                    \n                        getgames()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/browse-games/browse-games.component.ts:22\n                                \n                            \n                    \n                        \n                                Get the available games\n\n\n                                \n                                    Returns :     Game[]\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Game, GamesService } from '../games.service';\n\n/**\n * Component that displays the available games and allows users to navigate to a game\n */\n@Component({\n  selector: 'app-browse-games',\n  templateUrl: './browse-games.component.html',\n  styleUrls: ['./browse-games.component.scss']\n})\nexport class BrowseGamesComponent implements OnInit {\n\n  /**\n   * The available games\n   */\n  private _games: Game[] = [];\n\n  /**\n   * Get the available games\n   */\n  public get games(): Game[] { return this._games; }\n\n  /**\n   * Initialize the component\n   * @param gamesService \n   */\n  constructor(private gamesService: GamesService) { }\n\n  /**\n   * Get the list of available games from GamesService\n   */\n  private initGames(): void {\n    this._games = this.gamesService.games;\n  }\n\n  /**\n   * Initialize the component\n   */\n  public ngOnInit(): void {\n    this.initGames();\n  }\n\n}\n\n    \n\n    \n        \n  \n    Welcome to the Angular Arcade!\n  \n\n  \n    -- GAMES --\n    \n      \n        {{ game.name }}\n      \n    \n  \n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Welcome to the Angular Arcade!        -- GAMES --                  {{ game.name }}            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BrowseGamesComponent', 'selector': 'app-browse-games'},{'name': 'GameViewComponent', 'selector': 'app-game-view'},{'name': 'RockPaperScissorsGameComponent', 'selector': 'rock-paper-scissors-game'},{'name': 'TicTacToeBoardComponent', 'selector': 'tic-tac-toe-board'},{'name': 'TicTacToeGameComponent', 'selector': 'tic-tac-toe-game'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BrowseGamesComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n  Modules\n  CoreModule\n\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/core/core.module.ts\n        \n\n\n        \n\n        \n            \n            \n        \n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: []\n})\nexport class CoreModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Game.html":{"url":"classes/Game.html","title":"class - Game","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Game\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/games/games.service.ts\n        \n\n            \n                Description\n            \n            \n                Basic metadata defining a Game\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/games.service.ts:13\n                            \n                        \n\n                \n                    \n                        Unique ID for the game\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/games.service.ts:18\n                            \n                        \n\n                \n                    \n                        Name of the game\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\n\n/**\n * Basic metadata defining a Game\n */\nexport class Game {\n  /**\n   * Unique ID for the game\n   */\n  public id: string;\n\n  /**\n   * Name of the game\n   */\n  public name: string;\n}\n\n/**\n * The implemented games\n */\nconst GAMES: Game[] = [\n  {\n    id: 'tic-tac-toe',\n    name: 'Tic-Tac-Toe',\n  }, {\n    id: 'rock-paper-scissors',\n    name: 'Rock-Paper-Scissors'\n  }\n]\n\n/**\n * Service for consolidating shared game-related functionality and utilities\n */\n@Injectable()\nexport class GamesService {\n\n  /**\n   * Initialize the service\n   * @param http \n   */\n  constructor(private http: HttpClient) { }\n\n  /**\n   * Get the available games\n   */\n  public get games(): Game[] { return GAMES; }\n\n  /**\n   * Get a single game by its ID\n   * @param gameId \n   */\n  public getGame(gameId: string) { return GAMES.find((game: Game) => game.id === gameId); }\n\n  /**\n   * Report a win\n   * @param game \n   * @param winner \n   */\n  public reportWin(game: string, winner: string): Observable {\n    return this.http.post('/local/wins', { player: winner, game: game, playedOn: new Date()}).map((data: any) => {\n      console.info(`${game} win reported for player ${winner}`);\n    }, (error: Error) => {\n      console.error(`Failed to report ${game} win for player ${winner}`);\n    });\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GameComponent.html":{"url":"classes/GameComponent.html","title":"class - GameComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  GameComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/games/game-component.ts\n        \n\n            \n                Description\n            \n            \n                Base definition of a Game component\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                newGame\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                \n                            newGame\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        newGame()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/game-component.ts:9\n                            \n                        \n\n\n                \n                    \n                            Trigger a new game\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class GameComponent {\n\n    /**\n     * Trigger a new game\n     */\n    public abstract newGame(): void;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GameViewComponent.html":{"url":"components/GameViewComponent.html","title":"component - GameViewComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GameViewComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/games/game-view/game-view.component.ts\n\n\n    \n        Description\n    \n    \n        Container for a single game\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-game-view\n            \n\n            \n                styleUrls\n                game-view.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./game-view.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _game\n                            \n                            \n                                gameRef\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                newGame\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(route: ActivatedRoute, gamesService: GamesService)\n                    \n                \n                        \n                            \n                                Defined in src/app/games/game-view/game-view.component.ts:29\n                            \n                        \n\n                \n                    \n                            Initialize the component\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        gamesService\n                                                  \n                                                        \n                                                                    GamesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            newGame\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        newGame()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/game-view/game-view.component.ts:53\n                            \n                        \n\n\n                \n                    \n                            Start a new game\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        ngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/game-view/game-view.component.ts:44\n                            \n                        \n\n\n                \n                    \n                            Initialize the component\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _game\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _game:     Game\n\n                    \n                \n                    \n                        \n                            Type :     Game\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/game-view/game-view.component.ts:24\n                            \n                        \n\n                \n                    \n                        The game loaded into the view\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gameRef\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        gameRef:     GameComponent\n\n                    \n                \n                    \n                        \n                            Type :     GameComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : ViewChild\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/game-view/game-view.component.ts:19\n                            \n                        \n\n                \n                    \n                        Reference to the game loaded into the view\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        game\n                    \n                \n\n                \n                    \n                        getgame()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/game-view/game-view.component.ts:29\n                                \n                            \n                    \n                        \n                                Get the game loaded into the view\n\n\n                                \n                                    Returns :     Game\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, ParamMap } from '@angular/router';\nimport { GameComponent } from '../game-component';\nimport { Game, GamesService } from '../games.service';\n\n/**\n * Container for a single game\n */\n@Component({\n  selector: 'app-game-view',\n  templateUrl: './game-view.component.html',\n  styleUrls: ['./game-view.component.scss']\n})\nexport class GameViewComponent implements OnInit {\n\n  /**\n   * Reference to the game loaded into the view\n   */\n  @ViewChild(GameComponent) gameRef: GameComponent;\n\n  /**\n   * The game loaded into the view\n   */\n  private _game: Game;\n\n  /**\n   * Get the game loaded into the view\n   */\n  public get game(): Game { return this._game; }\n\n  /**\n   * Initialize the component\n   * @param route \n   * @param gamesService \n   */\n  constructor(\n    private route: ActivatedRoute,\n    private gamesService: GamesService\n  ) { }\n\n  /**\n   * Initialize the component\n   */\n  public ngOnInit(): void {\n    this.route.paramMap.subscribe((params: ParamMap) => {\n      this._game = this.gamesService.getGame(params.get('gameId'));\n    });\n  }\n\n  /**\n   * Start a new game\n   */\n  public newGame(): void {\n    if (this.game) this.gameRef.newGame();\n  }\n\n}\n\n    \n\n    \n        \n  \n    {{ game.name }}\n  \n\n  \n    \n    \n  \n\n  \n    Back to Games\n    New Game\n  \n\n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      {{ game.name }}                    Back to Games    New Game    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BrowseGamesComponent', 'selector': 'app-browse-games'},{'name': 'GameViewComponent', 'selector': 'app-game-view'},{'name': 'RockPaperScissorsGameComponent', 'selector': 'rock-paper-scissors-game'},{'name': 'TicTacToeBoardComponent', 'selector': 'tic-tac-toe-board'},{'name': 'TicTacToeGameComponent', 'selector': 'tic-tac-toe-game'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GameViewComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GamesModule.html":{"url":"modules/GamesModule.html","title":"module - GamesModule","body":"\n                   \n\n\n\n\n  Modules\n  GamesModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GamesModule\n\n\n\ncluster_GamesModule_declarations\n\n\n\ncluster_GamesModule_imports\n\n\n\ncluster_GamesModule_exports\n\n\n\ncluster_GamesModule_providers\n\n\n\n\nBrowseGamesComponent\n\nBrowseGamesComponent\n\n\n\nGamesModule\n\nGamesModule\n\nGamesModule -->\n\nBrowseGamesComponent->GamesModule\n\n\n\n\n\nGameViewComponent\n\nGameViewComponent\n\nGamesModule -->\n\nGameViewComponent->GamesModule\n\n\n\n\n\nGameViewComponent \n\nGameViewComponent \n\nGameViewComponent  -->\n\nGamesModule->GameViewComponent \n\n\n\n\n\nRockPaperScissorsModule \n\nRockPaperScissorsModule \n\nRockPaperScissorsModule  -->\n\nGamesModule->RockPaperScissorsModule \n\n\n\n\n\nTicTacToeModule \n\nTicTacToeModule \n\nTicTacToeModule  -->\n\nGamesModule->TicTacToeModule \n\n\n\n\n\nRockPaperScissorsModule\n\nRockPaperScissorsModule\n\nGamesModule -->\n\nRockPaperScissorsModule->GamesModule\n\n\n\n\n\nTicTacToeModule\n\nTicTacToeModule\n\nGamesModule -->\n\nTicTacToeModule->GamesModule\n\n\n\n\n\nGamesService\n\nGamesService\n\nGamesModule -->\n\nGamesService->GamesModule\n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/games/games.module.ts\n        \n\n\n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                BrowseGamesComponent\n                            \n                            \n                                GameViewComponent\n                            \n                    \n                \n                \n                    Providers\n                    \n                            \n                                     GamesService\n                            \n                    \n                \n                \n                    Imports\n                    \n                            \n                                    RockPaperScissorsModule\n                            \n                            \n                                    TicTacToeModule\n                            \n                    \n                \n                \n                    Exports\n                    \n                            \n                                    GameViewComponent\n                            \n                            \n                                    RockPaperScissorsModule\n                            \n                            \n                                    TicTacToeModule\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { GamesService } from './games.service';\nimport { BrowseGamesComponent } from './browse-games/browse-games.component';\nimport { GameViewComponent } from './game-view/game-view.component';\n\n// Individual Games\nimport { TicTacToeModule } from './tic-tac-toe/tic-tac-toe.module';\nimport { RockPaperScissorsModule } from './rock-paper-scissors/rock-paper-scissors.module';\n\nconst routes: Routes = [\n  { path: 'browse', component: BrowseGamesComponent },\n  { path: 'game/:gameId', component: GameViewComponent }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    RouterModule.forChild(routes),\n\n    TicTacToeModule,\n    RockPaperScissorsModule,\n  ],\n  declarations: [\n    GameViewComponent,\n    BrowseGamesComponent\n  ],\n  exports: [\n    GameViewComponent,\n\n    TicTacToeModule,\n    RockPaperScissorsModule,\n  ],\n  providers: [\n    GamesService,\n  ]\n})\nexport class GamesModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GamesService.html":{"url":"injectables/GamesService.html","title":"injectable - GamesService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  GamesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/games/games.service.ts\n        \n\n            \n                Description\n            \n            \n                Service for consolidating shared game-related functionality and utilities\n\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getGame\n                            \n                            \n                                    Public\n                                reportWin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/games/games.service.ts:38\n                            \n                        \n\n                \n                    \n                            Initialize the service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getGame\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getGame(gameId: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/games.service.ts:55\n                            \n                        \n\n\n                \n                    \n                            Get a single game by its ID\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gameId\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            reportWin\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        reportWin(game: string, winner: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/games.service.ts:62\n                            \n                        \n\n\n                \n                    \n                            Report a win\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        game\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        winner\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        games\n                    \n                \n\n                \n                    \n                        getgames()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/games.service.ts:49\n                                \n                            \n                    \n                        \n                                Get the available games\n\n\n                                \n                                    Returns :     Game[]\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\n\n/**\n * Basic metadata defining a Game\n */\nexport class Game {\n  /**\n   * Unique ID for the game\n   */\n  public id: string;\n\n  /**\n   * Name of the game\n   */\n  public name: string;\n}\n\n/**\n * The implemented games\n */\nconst GAMES: Game[] = [\n  {\n    id: 'tic-tac-toe',\n    name: 'Tic-Tac-Toe',\n  }, {\n    id: 'rock-paper-scissors',\n    name: 'Rock-Paper-Scissors'\n  }\n]\n\n/**\n * Service for consolidating shared game-related functionality and utilities\n */\n@Injectable()\nexport class GamesService {\n\n  /**\n   * Initialize the service\n   * @param http \n   */\n  constructor(private http: HttpClient) { }\n\n  /**\n   * Get the available games\n   */\n  public get games(): Game[] { return GAMES; }\n\n  /**\n   * Get a single game by its ID\n   * @param gameId \n   */\n  public getGame(gameId: string) { return GAMES.find((game: Game) => game.id === gameId); }\n\n  /**\n   * Report a win\n   * @param game \n   * @param winner \n   */\n  public reportWin(game: string, winner: string): Observable {\n    return this.http.post('/local/wins', { player: winner, game: game, playedOn: new Date()}).map((data: any) => {\n      console.info(`${game} win reported for player ${winner}`);\n    }, (error: Error) => {\n      console.error(`Failed to report ${game} win for player ${winner}`);\n    });\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RockPaperScissorsGameComponent.html":{"url":"components/RockPaperScissorsGameComponent.html","title":"component - RockPaperScissorsGameComponent","body":"\n                   \n\n\n\n\n\n  Components\n  RockPaperScissorsGameComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts\n\n\n    \n        Description\n    \n    \n        Rock-Paper-Scissors game\n\n    \n\n    \n        Extends\n    \n    \n            GameComponent\n    \n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                            { : , : (() => ) }\n                \n            \n\n\n            \n                selector\n                rock-paper-scissors-game\n            \n\n            \n                styleUrls\n                rock-paper-scissors-game.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./rock-paper-scissors-game.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _choosingMove\n                            \n                            \n                                    Private\n                                _opponentMove\n                            \n                            \n                                    Private\n                                _outcome\n                            \n                            \n                                    Private\n                                _playerMove\n                            \n                            \n                                    Private\n                                _playing\n                            \n                            \n                                    Private\n                                _timeRemaining\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkResult\n                            \n                            \n                                    Public\n                                chooseMove\n                            \n                            \n                                    Public\n                                newGame\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                    \n                                newGame\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(gamesService: GamesService)\n                    \n                \n                        \n                            \n                                Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:107\n                            \n                        \n\n                \n                    \n                            Initialize the component\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gamesService\n                                                  \n                                                        \n                                                                    GamesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            checkResult\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        checkResult()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:125\n                            \n                        \n\n\n                \n                    \n                            Check the result of the game\n\n\n                            \n                                Returns :     RockPaperScissorsResult\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chooseMove\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        chooseMove(choice: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:162\n                            \n                        \n\n\n                \n                    \n                            Take the player's move choice\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        choice\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            newGame\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        newGame()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:170\n                            \n                        \n\n\n                \n                    \n                            Start a new game\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        ngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:118\n                            \n                        \n\n\n                \n                    \n                            Initialize the component with a new game\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            start\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        start()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:136\n                            \n                        \n\n\n                \n                    \n                            Start playing\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                \n                            newGame\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        newGame()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     GameComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in GameComponent:9\n                            \n                        \n\n\n                \n                    \n                            Trigger a new game\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _choosingMove\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _choosingMove:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:72\n                            \n                        \n\n                \n                    \n                        Track if the player is currently choosing a move\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _opponentMove\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _opponentMove:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:102\n                            \n                        \n\n                \n                    \n                        The opponent's (computer's) move\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _outcome\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _outcome:     RockPaperScissorsResult\n\n                    \n                \n                    \n                        \n                            Type :     RockPaperScissorsResult\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:82\n                            \n                        \n\n                \n                    \n                        The outcome of the game\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _playerMove\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _playerMove:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:92\n                            \n                        \n\n                \n                    \n                        The player (human) move\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _playing\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _playing:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:52\n                            \n                        \n\n                \n                    \n                        Track if the game is being played\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _timeRemaining\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _timeRemaining:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : MOVE_TIME_LIMIT\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:62\n                            \n                        \n\n                \n                    \n                        The time remaining for the player to select a move\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        moves\n                    \n                \n\n                \n                    \n                        getmoves()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:47\n                                \n                            \n                    \n                        \n                                Get the acceptable moves\n\n\n                                \n                                    Returns :     string[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        playing\n                    \n                \n\n                \n                    \n                        getplaying()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:57\n                                \n                            \n                    \n                        \n                                Check if the game is currently being played\n\n\n                                \n                                    Returns :     boolean\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        timeRemaining\n                    \n                \n\n                \n                    \n                        gettimeRemaining()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:67\n                                \n                            \n                    \n                        \n                                Get the amount of time remaining for move selection\n\n\n                                \n                                    Returns :     number\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        choosingMove\n                    \n                \n\n                \n                    \n                        getchoosingMove()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:77\n                                \n                            \n                    \n                        \n                                Check if the player is choosing a move\n\n\n                                \n                                    Returns :     boolean\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        outcome\n                    \n                \n\n                \n                    \n                        getoutcome()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:87\n                                \n                            \n                    \n                        \n                                Get the outcome of the game\n\n\n                                \n                                    Returns :     RockPaperScissorsResult\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        playerMove\n                    \n                \n\n                \n                    \n                        getplayerMove()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:97\n                                \n                            \n                    \n                        \n                                Get the player's move\n\n\n                                \n                                    Returns :     string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        opponentMove\n                    \n                \n\n                \n                    \n                        getopponentMove()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:107\n                                \n                            \n                    \n                        \n                                Get the opponent's move\n\n\n                                \n                                    Returns :     string\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, OnInit, forwardRef } from '@angular/core';\nimport { GameComponent } from '../../game-component';\nimport { GamesService } from '../../games.service';\n\n/**\n * The possible outcomes of a Rock-Paper-Scissors game\n */\nenum RockPaperScissorsResult {\n  win = 'win',\n  lose = 'lose',\n  draw = 'draw'\n}\n\n/**\n * The valid moves in a Rock-Paper-Scissors game\n */\nconst MOVES: string[] = ['rock', 'paper', 'scissors'];\n\n/**\n * String representations of the win states of a Rock-Paper-Scissors game\n * \n * e.g.:\n * [player move]/[computer move] --> player wins\n * [computer move]/[player move] --> computer wins\n */\nconst WIN_STATES: string[] = ['rock/scissors', 'paper/rock', 'scissors/paper'];\n\n/**\n * The amount of time (seconds) for the player to make a move\n */\nconst MOVE_TIME_LIMIT: number = 3;\n\n/**\n * Rock-Paper-Scissors game\n */\n@Component({\n  selector: 'rock-paper-scissors-game',\n  templateUrl: './rock-paper-scissors-game.component.html',\n  styleUrls: ['./rock-paper-scissors-game.component.scss'],\n  providers: [{ provide: GameComponent, useExisting: forwardRef(() => RockPaperScissorsGameComponent)}]\n})\nexport class RockPaperScissorsGameComponent extends GameComponent implements OnInit {\n\n  /**\n   * Get the acceptable moves\n   */\n  public get moves(): string[] { return MOVES; }\n\n  /**\n   * Track if the game is being played\n   */\n  private _playing: boolean = false;\n\n  /**\n   * Check if the game is currently being played\n   */\n  public get playing(): boolean { return this._playing; }\n\n  /**\n   * The time remaining for the player to select a move\n   */\n  private _timeRemaining: number = MOVE_TIME_LIMIT;\n\n  /**\n   * Get the amount of time remaining for move selection\n   */\n  public get timeRemaining(): number { return this._timeRemaining; }\n\n  /**\n   * Track if the player is currently choosing a move\n   */\n  private _choosingMove: boolean = false;\n\n  /**\n   * Check if the player is choosing a move\n   */\n  public get choosingMove(): boolean { return this._choosingMove; }\n\n  /**\n   * The outcome of the game\n   */\n  private _outcome: RockPaperScissorsResult;\n\n  /**\n   * Get the outcome of the game\n   */\n  public get outcome(): RockPaperScissorsResult { return this._outcome; }\n\n  /**\n   * The player (human) move\n   */\n  private _playerMove: string;\n\n  /**\n   * Get the player's move\n   */\n  public get playerMove(): string { return this._playerMove; }\n\n  /**\n   * The opponent's (computer's) move\n   */\n  private _opponentMove: string;\n\n  /**\n   * Get the opponent's move\n   */\n  public get opponentMove(): string { return this._opponentMove; }\n\n  /**\n   * Initialize the component\n   * @param gamesService \n   */\n  constructor(private gamesService: GamesService) { super(); }\n\n  /**\n   * Initialize the component with a new game\n   */\n  public ngOnInit(): void {\n    this.newGame();\n  }\n\n  /**\n   * Check the result of the game\n   */\n  private checkResult(): RockPaperScissorsResult {\n    let state: string[] = [this._playerMove, this._opponentMove];\n\n    if ((this._playerMove && !this._opponentMove) || (WIN_STATES.indexOf(state.join('/')) > -1)) return RockPaperScissorsResult.win;\n    if ((this._opponentMove && !this._playerMove) || (WIN_STATES.indexOf(state.reverse().join('/')) > -1)) return RockPaperScissorsResult.lose;\n    return RockPaperScissorsResult.draw;\n  }\n\n  /**\n   * Start playing\n   */\n  public start(): void {\n    this._playing = true;\n    this._choosingMove = true;\n\n    // Determine opponent's move\n    this._opponentMove = MOVES[Math.floor(Math.random() * (MOVES.length - 1))];\n\n    let timer = setInterval(() => {\n      if (--this._timeRemaining \n    \n\n    \n        \n  \n    Start!\n\n    \n      QUICK!\n      Choose your move!\n      {{ timeRemaining }}\n      \n        {{ choice | uppercase }}\n      \n    \n\n    \n      Opponent's Move: {{ opponentMove || 'none' | uppercase }}\n      Your Move: {{ playerMove || 'none' | uppercase }}\n      Result: {{ outcome | uppercase }}!\n      Play Again\n    \n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Start!          QUICK!      Choose your move!      {{ timeRemaining }}              {{ choice | uppercase }}                    Opponent\\'s Move: {{ opponentMove || \\'none\\' | uppercase }}      Your Move: {{ playerMove || \\'none\\' | uppercase }}      Result: {{ outcome | uppercase }}!      Play Again      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BrowseGamesComponent', 'selector': 'app-browse-games'},{'name': 'GameViewComponent', 'selector': 'app-game-view'},{'name': 'RockPaperScissorsGameComponent', 'selector': 'rock-paper-scissors-game'},{'name': 'TicTacToeBoardComponent', 'selector': 'tic-tac-toe-board'},{'name': 'TicTacToeGameComponent', 'selector': 'tic-tac-toe-game'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'RockPaperScissorsGameComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RockPaperScissorsModule.html":{"url":"modules/RockPaperScissorsModule.html","title":"module - RockPaperScissorsModule","body":"\n                   \n\n\n\n\n  Modules\n  RockPaperScissorsModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RockPaperScissorsModule\n\n\n\ncluster_RockPaperScissorsModule_declarations\n\n\n\ncluster_RockPaperScissorsModule_exports\n\n\n\n\nRockPaperScissorsGameComponent\n\nRockPaperScissorsGameComponent\n\n\n\nRockPaperScissorsModule\n\nRockPaperScissorsModule\n\nRockPaperScissorsModule -->\n\nRockPaperScissorsGameComponent->RockPaperScissorsModule\n\n\n\n\n\nRockPaperScissorsGameComponent \n\nRockPaperScissorsGameComponent \n\nRockPaperScissorsGameComponent  -->\n\nRockPaperScissorsModule->RockPaperScissorsGameComponent \n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/games/rock-paper-scissors/rock-paper-scissors.module.ts\n        \n\n\n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                RockPaperScissorsGameComponent\n                            \n                    \n                \n                \n                    Exports\n                    \n                            \n                                    RockPaperScissorsGameComponent\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RockPaperScissorsGameComponent } from './rock-paper-scissors-game/rock-paper-scissors-game.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    RockPaperScissorsGameComponent\n  ],\n  exports: [\n    RockPaperScissorsGameComponent\n  ]\n})\nexport class RockPaperScissorsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TicTacToeBoardComponent.html":{"url":"components/TicTacToeBoardComponent.html","title":"component - TicTacToeBoardComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TicTacToeBoardComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts\n\n\n    \n        Description\n    \n    \n        A Tic-Tac-Toe board\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                tic-tac-toe-board\n            \n\n            \n                styleUrls\n                tic-tac-toe-board.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./tic-tac-toe-board.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _rows\n                            \n                            \n                                    Private\n                                _state\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkForWinner\n                            \n                            \n                                    Public\n                                click\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                            \n                                    Public\n                                reset\n                            \n                            \n                                    Public\n                                updateGameState\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                onNewGame\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(gamesService: GamesService)\n                    \n                \n                        \n                            \n                                Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:196\n                            \n                        \n\n                \n                    \n                            Initialize the component\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gamesService\n                                                  \n                                                        \n                                                                    GamesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        onNewGame\n                    \n                    \n                        Broadcast a \"new game\" event to parent component\n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:186\n                            \n                        \n            \n        \n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            checkForWinner\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        checkForWinner(cells: TicTacToeCell[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:253\n                            \n                        \n\n\n                \n                    \n                            Check for a winner in a collection of cells. If all the given cells are claimed by the same player, that player is the winner\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cells\n                                                        \n                                                                    TicTacToeCell[]\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TicTacToePlayer\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            click\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        click(cell: TicTacToeCell)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:309\n                            \n                        \n\n\n                \n                    \n                            Handle a cell click event (a \"move\")\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cell\n                                                        \n                                                                    TicTacToeCell\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        ngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:207\n                            \n                        \n\n\n                \n                    \n                            Initialize the component with a new game\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            reset\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        reset()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:325\n                            \n                        \n\n\n                \n                    \n                            Reset the game\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            updateGameState\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        updateGameState()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:262\n                            \n                        \n\n\n                \n                    \n                            Update the state of the game by checking for game over conditions or updating the current player\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _rows\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _rows:     TicTacToeRow[]\n\n                    \n                \n                    \n                        \n                            Type :     TicTacToeRow[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:191\n                            \n                        \n\n                \n                    \n                        The rows of the board\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _state\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _state:     TicTacToeGameState\n\n                    \n                \n                    \n                        \n                            Type :     TicTacToeGameState\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:196\n                            \n                        \n\n                \n                    \n                        The state of the game\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        rows\n                    \n                \n\n                \n                    \n                        getrows()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:214\n                                \n                            \n                    \n                        \n                                Get the rows of the board\n\n\n                                \n                                    Returns :     TicTacToeRow[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:219\n                                \n                            \n                    \n                        \n                                Get the state of the game\n\n\n                                \n                                    Returns :     TicTacToeGameState\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        columns\n                    \n                \n\n                \n                    \n                        getcolumns()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:224\n                                \n                            \n                    \n                        \n                                Get the columns of the board (transpose the rows)\n\n\n                                \n                                    Returns :     [][]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        diagonals\n                    \n                \n\n                \n                    \n                        getdiagonals()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:239\n                                \n                            \n                    \n                        \n                                Get the diagonals of the board\n\n\n                                \n                                    Returns :     [][]\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { GamesService } from '../../games.service';\n\n/**\n * An individual cell of a Tic-Tac-Toe game that players can claim\n */\nclass TicTacToeCell {\n  /**\n   * The player who has \"claimed\" the cell\n   */\n  private _status: TicTacToePlayer;\n\n  /**\n   * Initialize the cell:\n   * \n   * status: none (nobody has claimed it)\n   */\n  constructor() {\n    this._status = null;\n  }\n\n  /**\n   * Get the player who has claimed the cell\n   */\n  public get status(): TicTacToePlayer { return this._status; }\n\n  /**\n   * Handle a click event on the cell, set the cell's status to the player who clicked\n   * @param player \n   */\n  public click(player: TicTacToePlayer): boolean {\n    if (this._status !== null) {\n      let message: string = `This cell is already claimed by Player ${this._status}!`;\n      console.warn(message);\n      alert(message);\n      return false;\n    }\n    this._status = player;\n    return true;\n  }\n}\n\n/**\n * A row of a Tic-Tac-Toe board, containing cells\n */\nclass TicTacToeRow {\n  /**\n   * The cells in the row\n   */\n  private _cells: TicTacToeCell[];\n\n  /**\n   * Initialize the row:\n   * \n   * cells: [cell, cell, cell]\n   */\n  constructor() {\n    this._cells = [new TicTacToeCell(), new TicTacToeCell(), new TicTacToeCell()];\n  }\n\n  /**\n   * Get the cells in the row\n   */\n  public get cells(): TicTacToeCell[] { return this._cells; }\n}\n\n/**\n * The different players in a Tic-Tac-Toe game\n */\nenum TicTacToePlayer {\n  X = 'X',\n  O = 'O'\n}\n\n/**\n * The different results of a Tic-Tac-Toe game\n */\nenum TicTacToeGameResult {\n  playing = 'playing',\n  won = 'won',\n  draw = 'draw'\n}\n\n/**\n * Class for tracking the STATE of a Tic-Tac-Toe game\n */\nclass TicTacToeGameState {\n  /**\n   * The result of the game\n   */\n  private _result: TicTacToeGameResult;\n\n  /**\n   * The currently active player\n   */\n  private _currentPlayer: TicTacToePlayer;\n\n  /**\n   * The winner (if the game is over and the result is \"won\")\n   */\n  private _winner: TicTacToePlayer;\n\n  /**\n   * Initialize the state:\n   * \n   * result: playing\n   * current player: X\n   * winner: none\n   */\n  constructor() {\n    this._result = TicTacToeGameResult.playing;\n    this._currentPlayer = TicTacToePlayer.X;\n    this._winner = undefined;\n  }\n\n  /**\n   * Get the result from the state\n   */\n  public get result(): TicTacToeGameResult { return this._result; }\n\n  /**\n   * Get the current player from the state\n   */\n  public get currentPlayer(): TicTacToePlayer { return this._currentPlayer; }\n\n  /**\n   * Get the winner from the state\n   */\n  public get winner(): TicTacToePlayer { return this._winner; }\n\n  /**\n   * Switch the current player\n   */\n  public switchPlayer(): void {\n    if (this._currentPlayer === TicTacToePlayer.X) this._currentPlayer = TicTacToePlayer.O;\n    else this._currentPlayer = TicTacToePlayer.X;\n  }\n\n  /**\n   * Set the state to \"won\" and define the player who won the game\n   * @param player \n   */\n  public win(player: TicTacToePlayer) {\n    this._winner = player;\n    this._result = TicTacToeGameResult.won;\n  }\n\n  /**\n   * Set the state to \"draw\" (and clear the winner)\n   */\n  public draw(): void {\n    this._result = TicTacToeGameResult.draw;\n    this._winner = undefined;\n  }\n\n  /**\n   * Check if the state represents a \"game over\" state (won or draw)\n   */\n  public get gameOver(): boolean {\n    return this._result === TicTacToeGameResult.won || this._result === TicTacToeGameResult.draw;\n  }\n\n  /**\n   * Get a string representation of the state\n   */\n  public toString(): string {\n    if (this._result === TicTacToeGameResult.won) return 'Winner!';\n    if (this._result === TicTacToeGameResult.draw) return 'Draw!';\n    return 'Playing...';\n  }\n}\n\n/**\n * A Tic-Tac-Toe board\n */\n@Component({\n  selector: 'tic-tac-toe-board',\n  templateUrl: './tic-tac-toe-board.component.html',\n  styleUrls: ['./tic-tac-toe-board.component.scss']\n})\nexport class TicTacToeBoardComponent implements OnInit {\n\n  /**\n   * Broadcast a \"new game\" event to parent component\n   */\n  @Output('onNewGame') newGame: EventEmitter = new EventEmitter();\n\n  /**\n   * The rows of the board\n   */\n  private _rows: TicTacToeRow[];\n\n  /**\n   * The state of the game\n   */\n  private _state: TicTacToeGameState;\n\n  /**\n   * Initialize the component\n   * @param gamesService \n   */\n  constructor(private gamesService: GamesService) { }\n\n  /**\n   * Initialize the component with a new game\n   */\n  public ngOnInit(): void {\n    this.reset();\n  }\n\n  /**\n   * Get the rows of the board\n   */\n  public get rows(): TicTacToeRow[] { return this._rows; }\n\n  /**\n   * Get the state of the game\n   */\n  public get state(): TicTacToeGameState { return this._state; }\n\n  /**\n   * Get the columns of the board (transpose the rows)\n   */\n  private get columns(): TicTacToeCell[][] {\n    let columns: TicTacToeCell[][] = [];\n    for (let c: number = 0; c  cell.status === TicTacToePlayer.X).length === 3) return TicTacToePlayer.X;\n    if (cells.filter((cell: TicTacToeCell) => cell.status === TicTacToePlayer.O).length === 3) return TicTacToePlayer.O;\n    return null;\n  }\n\n  /**\n   * Update the state of the game by checking for game over conditions or updating the current player\n   */\n  public updateGameState(): void {\n\n    // Check for Game Over\n\n    // Check for WIN\n    let winner: TicTacToePlayer = null;\n    let allCells: TicTacToeCell[] = [];\n\n    // Horizontal\n    for (let r: number = 0; r  cell.status === null).length === 0) {\n      this._state.draw();\n      return;\n    }\n\n    // Game is still being played, switch players\n    this._state.switchPlayer();\n  }\n\n  /**\n   * Handle a cell click event (a \"move\")\n   * @param cell \n   */\n  public click(cell: TicTacToeCell): void {\n    if (!this._state.gameOver && cell.click(this._state.currentPlayer)) {\n      this.updateGameState();\n\n      if (this._state.result === TicTacToeGameResult.won) {\n        console.log(`WINNER: ${this._state.winner}`);\n        this.gamesService.reportWin('Tic-Tac-Toe', this._state.winner.toString()).subscribe()\n      } else if (this._state.result === TicTacToeGameResult.draw) {\n        console.log('DRAW!');\n      }\n    }\n  }\n\n  /**\n   * Reset the game\n   */\n  public reset(): void {\n    this._rows = [new TicTacToeRow(), new TicTacToeRow(), new TicTacToeRow()];\n    this._state = new TicTacToeGameState();\n  }\n\n}\n\n    \n\n    \n        \n  \n    \n      \n        {{ cell.status }}\n      \n    \n  \n\n  \n    \n      {{ state.toString() }}\n      Player: {{ state.winner }}\n      New Game\n    \n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    {{ cell.status }}                        {{ state.toString() }}      Player: {{ state.winner }}      New Game      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BrowseGamesComponent', 'selector': 'app-browse-games'},{'name': 'GameViewComponent', 'selector': 'app-game-view'},{'name': 'RockPaperScissorsGameComponent', 'selector': 'rock-paper-scissors-game'},{'name': 'TicTacToeBoardComponent', 'selector': 'tic-tac-toe-board'},{'name': 'TicTacToeGameComponent', 'selector': 'tic-tac-toe-game'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TicTacToeBoardComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TicTacToeCell.html":{"url":"classes/TicTacToeCell.html","title":"class - TicTacToeCell","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  TicTacToeCell\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts\n        \n\n            \n                Description\n            \n            \n                An individual cell of a Tic-Tac-Toe game that players can claim\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                click\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:11\n                            \n                        \n\n                \n                    \n                            Initialize the cell:\nstatus: none (nobody has claimed it)\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _status\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _status:     TicTacToePlayer\n\n                    \n                \n                    \n                        \n                            Type :     TicTacToePlayer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:11\n                            \n                        \n\n                \n                    \n                        The player who has \"claimed\" the cell\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            click\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        click(player: TicTacToePlayer)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:31\n                            \n                        \n\n\n                \n                    \n                            Handle a click event on the cell, set the cell's status to the player who clicked\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        player\n                                                        \n                                                                    TicTacToePlayer\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        status\n                    \n                \n\n                \n                    \n                        getstatus()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:25\n                                \n                            \n                    \n                        \n                                Get the player who has claimed the cell\n\n\n                                \n                                    Returns :     TicTacToePlayer\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { GamesService } from '../../games.service';\n\n/**\n * An individual cell of a Tic-Tac-Toe game that players can claim\n */\nclass TicTacToeCell {\n  /**\n   * The player who has \"claimed\" the cell\n   */\n  private _status: TicTacToePlayer;\n\n  /**\n   * Initialize the cell:\n   * \n   * status: none (nobody has claimed it)\n   */\n  constructor() {\n    this._status = null;\n  }\n\n  /**\n   * Get the player who has claimed the cell\n   */\n  public get status(): TicTacToePlayer { return this._status; }\n\n  /**\n   * Handle a click event on the cell, set the cell's status to the player who clicked\n   * @param player \n   */\n  public click(player: TicTacToePlayer): boolean {\n    if (this._status !== null) {\n      let message: string = `This cell is already claimed by Player ${this._status}!`;\n      console.warn(message);\n      alert(message);\n      return false;\n    }\n    this._status = player;\n    return true;\n  }\n}\n\n/**\n * A row of a Tic-Tac-Toe board, containing cells\n */\nclass TicTacToeRow {\n  /**\n   * The cells in the row\n   */\n  private _cells: TicTacToeCell[];\n\n  /**\n   * Initialize the row:\n   * \n   * cells: [cell, cell, cell]\n   */\n  constructor() {\n    this._cells = [new TicTacToeCell(), new TicTacToeCell(), new TicTacToeCell()];\n  }\n\n  /**\n   * Get the cells in the row\n   */\n  public get cells(): TicTacToeCell[] { return this._cells; }\n}\n\n/**\n * The different players in a Tic-Tac-Toe game\n */\nenum TicTacToePlayer {\n  X = 'X',\n  O = 'O'\n}\n\n/**\n * The different results of a Tic-Tac-Toe game\n */\nenum TicTacToeGameResult {\n  playing = 'playing',\n  won = 'won',\n  draw = 'draw'\n}\n\n/**\n * Class for tracking the STATE of a Tic-Tac-Toe game\n */\nclass TicTacToeGameState {\n  /**\n   * The result of the game\n   */\n  private _result: TicTacToeGameResult;\n\n  /**\n   * The currently active player\n   */\n  private _currentPlayer: TicTacToePlayer;\n\n  /**\n   * The winner (if the game is over and the result is \"won\")\n   */\n  private _winner: TicTacToePlayer;\n\n  /**\n   * Initialize the state:\n   * \n   * result: playing\n   * current player: X\n   * winner: none\n   */\n  constructor() {\n    this._result = TicTacToeGameResult.playing;\n    this._currentPlayer = TicTacToePlayer.X;\n    this._winner = undefined;\n  }\n\n  /**\n   * Get the result from the state\n   */\n  public get result(): TicTacToeGameResult { return this._result; }\n\n  /**\n   * Get the current player from the state\n   */\n  public get currentPlayer(): TicTacToePlayer { return this._currentPlayer; }\n\n  /**\n   * Get the winner from the state\n   */\n  public get winner(): TicTacToePlayer { return this._winner; }\n\n  /**\n   * Switch the current player\n   */\n  public switchPlayer(): void {\n    if (this._currentPlayer === TicTacToePlayer.X) this._currentPlayer = TicTacToePlayer.O;\n    else this._currentPlayer = TicTacToePlayer.X;\n  }\n\n  /**\n   * Set the state to \"won\" and define the player who won the game\n   * @param player \n   */\n  public win(player: TicTacToePlayer) {\n    this._winner = player;\n    this._result = TicTacToeGameResult.won;\n  }\n\n  /**\n   * Set the state to \"draw\" (and clear the winner)\n   */\n  public draw(): void {\n    this._result = TicTacToeGameResult.draw;\n    this._winner = undefined;\n  }\n\n  /**\n   * Check if the state represents a \"game over\" state (won or draw)\n   */\n  public get gameOver(): boolean {\n    return this._result === TicTacToeGameResult.won || this._result === TicTacToeGameResult.draw;\n  }\n\n  /**\n   * Get a string representation of the state\n   */\n  public toString(): string {\n    if (this._result === TicTacToeGameResult.won) return 'Winner!';\n    if (this._result === TicTacToeGameResult.draw) return 'Draw!';\n    return 'Playing...';\n  }\n}\n\n/**\n * A Tic-Tac-Toe board\n */\n@Component({\n  selector: 'tic-tac-toe-board',\n  templateUrl: './tic-tac-toe-board.component.html',\n  styleUrls: ['./tic-tac-toe-board.component.scss']\n})\nexport class TicTacToeBoardComponent implements OnInit {\n\n  /**\n   * Broadcast a \"new game\" event to parent component\n   */\n  @Output('onNewGame') newGame: EventEmitter = new EventEmitter();\n\n  /**\n   * The rows of the board\n   */\n  private _rows: TicTacToeRow[];\n\n  /**\n   * The state of the game\n   */\n  private _state: TicTacToeGameState;\n\n  /**\n   * Initialize the component\n   * @param gamesService \n   */\n  constructor(private gamesService: GamesService) { }\n\n  /**\n   * Initialize the component with a new game\n   */\n  public ngOnInit(): void {\n    this.reset();\n  }\n\n  /**\n   * Get the rows of the board\n   */\n  public get rows(): TicTacToeRow[] { return this._rows; }\n\n  /**\n   * Get the state of the game\n   */\n  public get state(): TicTacToeGameState { return this._state; }\n\n  /**\n   * Get the columns of the board (transpose the rows)\n   */\n  private get columns(): TicTacToeCell[][] {\n    let columns: TicTacToeCell[][] = [];\n    for (let c: number = 0; c  cell.status === TicTacToePlayer.X).length === 3) return TicTacToePlayer.X;\n    if (cells.filter((cell: TicTacToeCell) => cell.status === TicTacToePlayer.O).length === 3) return TicTacToePlayer.O;\n    return null;\n  }\n\n  /**\n   * Update the state of the game by checking for game over conditions or updating the current player\n   */\n  public updateGameState(): void {\n\n    // Check for Game Over\n\n    // Check for WIN\n    let winner: TicTacToePlayer = null;\n    let allCells: TicTacToeCell[] = [];\n\n    // Horizontal\n    for (let r: number = 0; r  cell.status === null).length === 0) {\n      this._state.draw();\n      return;\n    }\n\n    // Game is still being played, switch players\n    this._state.switchPlayer();\n  }\n\n  /**\n   * Handle a cell click event (a \"move\")\n   * @param cell \n   */\n  public click(cell: TicTacToeCell): void {\n    if (!this._state.gameOver && cell.click(this._state.currentPlayer)) {\n      this.updateGameState();\n\n      if (this._state.result === TicTacToeGameResult.won) {\n        console.log(`WINNER: ${this._state.winner}`);\n        this.gamesService.reportWin('Tic-Tac-Toe', this._state.winner.toString()).subscribe()\n      } else if (this._state.result === TicTacToeGameResult.draw) {\n        console.log('DRAW!');\n      }\n    }\n  }\n\n  /**\n   * Reset the game\n   */\n  public reset(): void {\n    this._rows = [new TicTacToeRow(), new TicTacToeRow(), new TicTacToeRow()];\n    this._state = new TicTacToeGameState();\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TicTacToeGameComponent.html":{"url":"components/TicTacToeGameComponent.html","title":"component - TicTacToeGameComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TicTacToeGameComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/games/tic-tac-toe/tic-tac-toe-game/tic-tac-toe-game.component.ts\n\n\n    \n        Description\n    \n    \n        A Tic-Tac-Toe game\n\n    \n\n    \n        Extends\n    \n    \n            GameComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                            { : , : (() => ) }\n                \n            \n\n\n            \n                selector\n                tic-tac-toe-game\n            \n\n            \n                styleUrls\n                tic-tac-toe-game.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./tic-tac-toe-game.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                board\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                newGame\n                            \n                            \n                                    Public\n                                    \n                                newGame\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/games/tic-tac-toe/tic-tac-toe-game/tic-tac-toe-game.component.ts:18\n                            \n                        \n\n                \n                    \n                            Initialize the component\n\n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            newGame\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        newGame()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-game/tic-tac-toe-game.component.ts:28\n                            \n                        \n\n\n                \n                    \n                            Start a new Tic-Tac-Toe game\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                \n                            newGame\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        newGame()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     GameComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in GameComponent:9\n                            \n                        \n\n\n                \n                    \n                            Trigger a new game\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            board\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        board:     TicTacToeBoardComponent\n\n                    \n                \n                    \n                        \n                            Type :     TicTacToeBoardComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : ViewChild\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-game/tic-tac-toe-game.component.ts:18\n                            \n                        \n\n                \n                    \n                        Reference to the Tic-Tac-Toe board component\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, ViewChild, forwardRef } from '@angular/core';\nimport { GameComponent } from '../../game-component';\nimport { TicTacToeBoardComponent } from '../tic-tac-toe-board/tic-tac-toe-board.component';\n\n/**\n * A Tic-Tac-Toe game\n */\n@Component({\n  selector: 'tic-tac-toe-game',\n  templateUrl: './tic-tac-toe-game.component.html',\n  styleUrls: ['./tic-tac-toe-game.component.scss'],\n  providers: [{ provide: GameComponent, useExisting: forwardRef(() => TicTacToeGameComponent) }]\n})\nexport class TicTacToeGameComponent extends GameComponent {\n  /**\n   * Reference to the Tic-Tac-Toe board component\n   */\n  @ViewChild(TicTacToeBoardComponent) board: TicTacToeBoardComponent;\n\n  /**\n   * Initialize the component\n   */\n  constructor() { super(); }\n\n  /**\n   * Start a new Tic-Tac-Toe game\n   */\n  public newGame(): void {\n    console.info('Starting a new Tic-Tac-Toe game');\n    this.board.reset();\n  }\n\n}\n\n    \n\n    \n        \n    \n\nNew Game -->\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    New Game -->'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BrowseGamesComponent', 'selector': 'app-browse-games'},{'name': 'GameViewComponent', 'selector': 'app-game-view'},{'name': 'RockPaperScissorsGameComponent', 'selector': 'rock-paper-scissors-game'},{'name': 'TicTacToeBoardComponent', 'selector': 'tic-tac-toe-board'},{'name': 'TicTacToeGameComponent', 'selector': 'tic-tac-toe-game'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TicTacToeGameComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TicTacToeGameState.html":{"url":"classes/TicTacToeGameState.html","title":"class - TicTacToeGameState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  TicTacToeGameState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts\n        \n\n            \n                Description\n            \n            \n                Class for tracking the STATE of a Tic-Tac-Toe game\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _currentPlayer\n                            \n                            \n                                    Private\n                                _result\n                            \n                            \n                                    Private\n                                _winner\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                switchPlayer\n                            \n                            \n                                    Public\n                                toString\n                            \n                            \n                                    Public\n                                win\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:101\n                            \n                        \n\n                \n                    \n                            Initialize the state:\nresult: playing\ncurrent player: X\nwinner: none\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _currentPlayer\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _currentPlayer:     TicTacToePlayer\n\n                    \n                \n                    \n                        \n                            Type :     TicTacToePlayer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:96\n                            \n                        \n\n                \n                    \n                        The currently active player\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _result\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _result:     TicTacToeGameResult\n\n                    \n                \n                    \n                        \n                            Type :     TicTacToeGameResult\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:91\n                            \n                        \n\n                \n                    \n                        The result of the game\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _winner\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _winner:     TicTacToePlayer\n\n                    \n                \n                    \n                        \n                            Type :     TicTacToePlayer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:101\n                            \n                        \n\n                \n                    \n                        The winner (if the game is over and the result is \"won\")\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            draw\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        draw()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:151\n                            \n                        \n\n\n                \n                    \n                            Set the state to \"draw\" (and clear the winner)\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            switchPlayer\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        switchPlayer()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:134\n                            \n                        \n\n\n                \n                    \n                            Switch the current player\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:166\n                            \n                        \n\n\n                \n                    \n                            Get a string representation of the state\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            win\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        win(player: TicTacToePlayer)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:143\n                            \n                        \n\n\n                \n                    \n                            Set the state to \"won\" and define the player who won the game\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        player\n                                                        \n                                                                    TicTacToePlayer\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        result\n                    \n                \n\n                \n                    \n                        getresult()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:119\n                                \n                            \n                    \n                        \n                                Get the result from the state\n\n\n                                \n                                    Returns :     TicTacToeGameResult\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        currentPlayer\n                    \n                \n\n                \n                    \n                        getcurrentPlayer()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:124\n                                \n                            \n                    \n                        \n                                Get the current player from the state\n\n\n                                \n                                    Returns :     TicTacToePlayer\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        winner\n                    \n                \n\n                \n                    \n                        getwinner()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:129\n                                \n                            \n                    \n                        \n                                Get the winner from the state\n\n\n                                \n                                    Returns :     TicTacToePlayer\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        gameOver\n                    \n                \n\n                \n                    \n                        getgameOver()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:159\n                                \n                            \n                    \n                        \n                                Check if the state represents a \"game over\" state (won or draw)\n\n\n                                \n                                    Returns :     boolean\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { GamesService } from '../../games.service';\n\n/**\n * An individual cell of a Tic-Tac-Toe game that players can claim\n */\nclass TicTacToeCell {\n  /**\n   * The player who has \"claimed\" the cell\n   */\n  private _status: TicTacToePlayer;\n\n  /**\n   * Initialize the cell:\n   * \n   * status: none (nobody has claimed it)\n   */\n  constructor() {\n    this._status = null;\n  }\n\n  /**\n   * Get the player who has claimed the cell\n   */\n  public get status(): TicTacToePlayer { return this._status; }\n\n  /**\n   * Handle a click event on the cell, set the cell's status to the player who clicked\n   * @param player \n   */\n  public click(player: TicTacToePlayer): boolean {\n    if (this._status !== null) {\n      let message: string = `This cell is already claimed by Player ${this._status}!`;\n      console.warn(message);\n      alert(message);\n      return false;\n    }\n    this._status = player;\n    return true;\n  }\n}\n\n/**\n * A row of a Tic-Tac-Toe board, containing cells\n */\nclass TicTacToeRow {\n  /**\n   * The cells in the row\n   */\n  private _cells: TicTacToeCell[];\n\n  /**\n   * Initialize the row:\n   * \n   * cells: [cell, cell, cell]\n   */\n  constructor() {\n    this._cells = [new TicTacToeCell(), new TicTacToeCell(), new TicTacToeCell()];\n  }\n\n  /**\n   * Get the cells in the row\n   */\n  public get cells(): TicTacToeCell[] { return this._cells; }\n}\n\n/**\n * The different players in a Tic-Tac-Toe game\n */\nenum TicTacToePlayer {\n  X = 'X',\n  O = 'O'\n}\n\n/**\n * The different results of a Tic-Tac-Toe game\n */\nenum TicTacToeGameResult {\n  playing = 'playing',\n  won = 'won',\n  draw = 'draw'\n}\n\n/**\n * Class for tracking the STATE of a Tic-Tac-Toe game\n */\nclass TicTacToeGameState {\n  /**\n   * The result of the game\n   */\n  private _result: TicTacToeGameResult;\n\n  /**\n   * The currently active player\n   */\n  private _currentPlayer: TicTacToePlayer;\n\n  /**\n   * The winner (if the game is over and the result is \"won\")\n   */\n  private _winner: TicTacToePlayer;\n\n  /**\n   * Initialize the state:\n   * \n   * result: playing\n   * current player: X\n   * winner: none\n   */\n  constructor() {\n    this._result = TicTacToeGameResult.playing;\n    this._currentPlayer = TicTacToePlayer.X;\n    this._winner = undefined;\n  }\n\n  /**\n   * Get the result from the state\n   */\n  public get result(): TicTacToeGameResult { return this._result; }\n\n  /**\n   * Get the current player from the state\n   */\n  public get currentPlayer(): TicTacToePlayer { return this._currentPlayer; }\n\n  /**\n   * Get the winner from the state\n   */\n  public get winner(): TicTacToePlayer { return this._winner; }\n\n  /**\n   * Switch the current player\n   */\n  public switchPlayer(): void {\n    if (this._currentPlayer === TicTacToePlayer.X) this._currentPlayer = TicTacToePlayer.O;\n    else this._currentPlayer = TicTacToePlayer.X;\n  }\n\n  /**\n   * Set the state to \"won\" and define the player who won the game\n   * @param player \n   */\n  public win(player: TicTacToePlayer) {\n    this._winner = player;\n    this._result = TicTacToeGameResult.won;\n  }\n\n  /**\n   * Set the state to \"draw\" (and clear the winner)\n   */\n  public draw(): void {\n    this._result = TicTacToeGameResult.draw;\n    this._winner = undefined;\n  }\n\n  /**\n   * Check if the state represents a \"game over\" state (won or draw)\n   */\n  public get gameOver(): boolean {\n    return this._result === TicTacToeGameResult.won || this._result === TicTacToeGameResult.draw;\n  }\n\n  /**\n   * Get a string representation of the state\n   */\n  public toString(): string {\n    if (this._result === TicTacToeGameResult.won) return 'Winner!';\n    if (this._result === TicTacToeGameResult.draw) return 'Draw!';\n    return 'Playing...';\n  }\n}\n\n/**\n * A Tic-Tac-Toe board\n */\n@Component({\n  selector: 'tic-tac-toe-board',\n  templateUrl: './tic-tac-toe-board.component.html',\n  styleUrls: ['./tic-tac-toe-board.component.scss']\n})\nexport class TicTacToeBoardComponent implements OnInit {\n\n  /**\n   * Broadcast a \"new game\" event to parent component\n   */\n  @Output('onNewGame') newGame: EventEmitter = new EventEmitter();\n\n  /**\n   * The rows of the board\n   */\n  private _rows: TicTacToeRow[];\n\n  /**\n   * The state of the game\n   */\n  private _state: TicTacToeGameState;\n\n  /**\n   * Initialize the component\n   * @param gamesService \n   */\n  constructor(private gamesService: GamesService) { }\n\n  /**\n   * Initialize the component with a new game\n   */\n  public ngOnInit(): void {\n    this.reset();\n  }\n\n  /**\n   * Get the rows of the board\n   */\n  public get rows(): TicTacToeRow[] { return this._rows; }\n\n  /**\n   * Get the state of the game\n   */\n  public get state(): TicTacToeGameState { return this._state; }\n\n  /**\n   * Get the columns of the board (transpose the rows)\n   */\n  private get columns(): TicTacToeCell[][] {\n    let columns: TicTacToeCell[][] = [];\n    for (let c: number = 0; c  cell.status === TicTacToePlayer.X).length === 3) return TicTacToePlayer.X;\n    if (cells.filter((cell: TicTacToeCell) => cell.status === TicTacToePlayer.O).length === 3) return TicTacToePlayer.O;\n    return null;\n  }\n\n  /**\n   * Update the state of the game by checking for game over conditions or updating the current player\n   */\n  public updateGameState(): void {\n\n    // Check for Game Over\n\n    // Check for WIN\n    let winner: TicTacToePlayer = null;\n    let allCells: TicTacToeCell[] = [];\n\n    // Horizontal\n    for (let r: number = 0; r  cell.status === null).length === 0) {\n      this._state.draw();\n      return;\n    }\n\n    // Game is still being played, switch players\n    this._state.switchPlayer();\n  }\n\n  /**\n   * Handle a cell click event (a \"move\")\n   * @param cell \n   */\n  public click(cell: TicTacToeCell): void {\n    if (!this._state.gameOver && cell.click(this._state.currentPlayer)) {\n      this.updateGameState();\n\n      if (this._state.result === TicTacToeGameResult.won) {\n        console.log(`WINNER: ${this._state.winner}`);\n        this.gamesService.reportWin('Tic-Tac-Toe', this._state.winner.toString()).subscribe()\n      } else if (this._state.result === TicTacToeGameResult.draw) {\n        console.log('DRAW!');\n      }\n    }\n  }\n\n  /**\n   * Reset the game\n   */\n  public reset(): void {\n    this._rows = [new TicTacToeRow(), new TicTacToeRow(), new TicTacToeRow()];\n    this._state = new TicTacToeGameState();\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TicTacToeModule.html":{"url":"modules/TicTacToeModule.html","title":"module - TicTacToeModule","body":"\n                   \n\n\n\n\n  Modules\n  TicTacToeModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TicTacToeModule\n\n\n\ncluster_TicTacToeModule_declarations\n\n\n\ncluster_TicTacToeModule_exports\n\n\n\n\nTicTacToeBoardComponent\n\nTicTacToeBoardComponent\n\n\n\nTicTacToeModule\n\nTicTacToeModule\n\nTicTacToeModule -->\n\nTicTacToeBoardComponent->TicTacToeModule\n\n\n\n\n\nTicTacToeGameComponent\n\nTicTacToeGameComponent\n\nTicTacToeModule -->\n\nTicTacToeGameComponent->TicTacToeModule\n\n\n\n\n\nTicTacToeGameComponent \n\nTicTacToeGameComponent \n\nTicTacToeGameComponent  -->\n\nTicTacToeModule->TicTacToeGameComponent \n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/games/tic-tac-toe/tic-tac-toe.module.ts\n        \n\n\n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                TicTacToeBoardComponent\n                            \n                            \n                                TicTacToeGameComponent\n                            \n                    \n                \n                \n                    Exports\n                    \n                            \n                                    TicTacToeGameComponent\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TicTacToeGameComponent } from './tic-tac-toe-game/tic-tac-toe-game.component';\nimport { TicTacToeBoardComponent } from './tic-tac-toe-board/tic-tac-toe-board.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    TicTacToeGameComponent,\n    TicTacToeBoardComponent,\n  ],\n  exports: [\n    TicTacToeGameComponent,\n  ]\n})\nexport class TicTacToeModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TicTacToeRow.html":{"url":"classes/TicTacToeRow.html","title":"class - TicTacToeRow","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  TicTacToeRow\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts\n        \n\n            \n                Description\n            \n            \n                A row of a Tic-Tac-Toe board, containing cells\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _cells\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:50\n                            \n                        \n\n                \n                    \n                            Initialize the row:\ncells: [cell, cell, cell]\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _cells\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _cells:     TicTacToeCell[]\n\n                    \n                \n                    \n                        \n                            Type :     TicTacToeCell[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:50\n                            \n                        \n\n                \n                    \n                        The cells in the row\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        cells\n                    \n                \n\n                \n                    \n                        getcells()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:64\n                                \n                            \n                    \n                        \n                                Get the cells in the row\n\n\n                                \n                                    Returns :     TicTacToeCell[]\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { GamesService } from '../../games.service';\n\n/**\n * An individual cell of a Tic-Tac-Toe game that players can claim\n */\nclass TicTacToeCell {\n  /**\n   * The player who has \"claimed\" the cell\n   */\n  private _status: TicTacToePlayer;\n\n  /**\n   * Initialize the cell:\n   * \n   * status: none (nobody has claimed it)\n   */\n  constructor() {\n    this._status = null;\n  }\n\n  /**\n   * Get the player who has claimed the cell\n   */\n  public get status(): TicTacToePlayer { return this._status; }\n\n  /**\n   * Handle a click event on the cell, set the cell's status to the player who clicked\n   * @param player \n   */\n  public click(player: TicTacToePlayer): boolean {\n    if (this._status !== null) {\n      let message: string = `This cell is already claimed by Player ${this._status}!`;\n      console.warn(message);\n      alert(message);\n      return false;\n    }\n    this._status = player;\n    return true;\n  }\n}\n\n/**\n * A row of a Tic-Tac-Toe board, containing cells\n */\nclass TicTacToeRow {\n  /**\n   * The cells in the row\n   */\n  private _cells: TicTacToeCell[];\n\n  /**\n   * Initialize the row:\n   * \n   * cells: [cell, cell, cell]\n   */\n  constructor() {\n    this._cells = [new TicTacToeCell(), new TicTacToeCell(), new TicTacToeCell()];\n  }\n\n  /**\n   * Get the cells in the row\n   */\n  public get cells(): TicTacToeCell[] { return this._cells; }\n}\n\n/**\n * The different players in a Tic-Tac-Toe game\n */\nenum TicTacToePlayer {\n  X = 'X',\n  O = 'O'\n}\n\n/**\n * The different results of a Tic-Tac-Toe game\n */\nenum TicTacToeGameResult {\n  playing = 'playing',\n  won = 'won',\n  draw = 'draw'\n}\n\n/**\n * Class for tracking the STATE of a Tic-Tac-Toe game\n */\nclass TicTacToeGameState {\n  /**\n   * The result of the game\n   */\n  private _result: TicTacToeGameResult;\n\n  /**\n   * The currently active player\n   */\n  private _currentPlayer: TicTacToePlayer;\n\n  /**\n   * The winner (if the game is over and the result is \"won\")\n   */\n  private _winner: TicTacToePlayer;\n\n  /**\n   * Initialize the state:\n   * \n   * result: playing\n   * current player: X\n   * winner: none\n   */\n  constructor() {\n    this._result = TicTacToeGameResult.playing;\n    this._currentPlayer = TicTacToePlayer.X;\n    this._winner = undefined;\n  }\n\n  /**\n   * Get the result from the state\n   */\n  public get result(): TicTacToeGameResult { return this._result; }\n\n  /**\n   * Get the current player from the state\n   */\n  public get currentPlayer(): TicTacToePlayer { return this._currentPlayer; }\n\n  /**\n   * Get the winner from the state\n   */\n  public get winner(): TicTacToePlayer { return this._winner; }\n\n  /**\n   * Switch the current player\n   */\n  public switchPlayer(): void {\n    if (this._currentPlayer === TicTacToePlayer.X) this._currentPlayer = TicTacToePlayer.O;\n    else this._currentPlayer = TicTacToePlayer.X;\n  }\n\n  /**\n   * Set the state to \"won\" and define the player who won the game\n   * @param player \n   */\n  public win(player: TicTacToePlayer) {\n    this._winner = player;\n    this._result = TicTacToeGameResult.won;\n  }\n\n  /**\n   * Set the state to \"draw\" (and clear the winner)\n   */\n  public draw(): void {\n    this._result = TicTacToeGameResult.draw;\n    this._winner = undefined;\n  }\n\n  /**\n   * Check if the state represents a \"game over\" state (won or draw)\n   */\n  public get gameOver(): boolean {\n    return this._result === TicTacToeGameResult.won || this._result === TicTacToeGameResult.draw;\n  }\n\n  /**\n   * Get a string representation of the state\n   */\n  public toString(): string {\n    if (this._result === TicTacToeGameResult.won) return 'Winner!';\n    if (this._result === TicTacToeGameResult.draw) return 'Draw!';\n    return 'Playing...';\n  }\n}\n\n/**\n * A Tic-Tac-Toe board\n */\n@Component({\n  selector: 'tic-tac-toe-board',\n  templateUrl: './tic-tac-toe-board.component.html',\n  styleUrls: ['./tic-tac-toe-board.component.scss']\n})\nexport class TicTacToeBoardComponent implements OnInit {\n\n  /**\n   * Broadcast a \"new game\" event to parent component\n   */\n  @Output('onNewGame') newGame: EventEmitter = new EventEmitter();\n\n  /**\n   * The rows of the board\n   */\n  private _rows: TicTacToeRow[];\n\n  /**\n   * The state of the game\n   */\n  private _state: TicTacToeGameState;\n\n  /**\n   * Initialize the component\n   * @param gamesService \n   */\n  constructor(private gamesService: GamesService) { }\n\n  /**\n   * Initialize the component with a new game\n   */\n  public ngOnInit(): void {\n    this.reset();\n  }\n\n  /**\n   * Get the rows of the board\n   */\n  public get rows(): TicTacToeRow[] { return this._rows; }\n\n  /**\n   * Get the state of the game\n   */\n  public get state(): TicTacToeGameState { return this._state; }\n\n  /**\n   * Get the columns of the board (transpose the rows)\n   */\n  private get columns(): TicTacToeCell[][] {\n    let columns: TicTacToeCell[][] = [];\n    for (let c: number = 0; c  cell.status === TicTacToePlayer.X).length === 3) return TicTacToePlayer.X;\n    if (cells.filter((cell: TicTacToeCell) => cell.status === TicTacToePlayer.O).length === 3) return TicTacToePlayer.O;\n    return null;\n  }\n\n  /**\n   * Update the state of the game by checking for game over conditions or updating the current player\n   */\n  public updateGameState(): void {\n\n    // Check for Game Over\n\n    // Check for WIN\n    let winner: TicTacToePlayer = null;\n    let allCells: TicTacToeCell[] = [];\n\n    // Horizontal\n    for (let r: number = 0; r  cell.status === null).length === 0) {\n      this._state.draw();\n      return;\n    }\n\n    // Game is still being played, switch players\n    this._state.switchPlayer();\n  }\n\n  /**\n   * Handle a cell click event (a \"move\")\n   * @param cell \n   */\n  public click(cell: TicTacToeCell): void {\n    if (!this._state.gameOver && cell.click(this._state.currentPlayer)) {\n      this.updateGameState();\n\n      if (this._state.result === TicTacToeGameResult.won) {\n        console.log(`WINNER: ${this._state.winner}`);\n        this.gamesService.reportWin('Tic-Tac-Toe', this._state.winner.toString()).subscribe()\n      } else if (this._state.result === TicTacToeGameResult.draw) {\n        console.log('DRAW!');\n      }\n    }\n  }\n\n  /**\n   * Reset the game\n   */\n  public reset(): void {\n    this._rows = [new TicTacToeRow(), new TicTacToeRow(), new TicTacToeRow()];\n    this._state = new TicTacToeGameState();\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                    src/app/app.component.ts\n            \n            \n                component\n            \n            \n                AppComponent\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                    src/app/games/browse-games/browse-games.component.ts\n            \n            \n                component\n            \n            \n                BrowseGamesComponent\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                    src/app/games/game-component.ts\n            \n            \n                class\n            \n            \n                GameComponent\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                    src/app/games/game-view/game-view.component.ts\n            \n            \n                component\n            \n            \n                GameViewComponent\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                    src/app/games/games.service.ts\n            \n            \n                class\n            \n            \n                Game\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                    src/app/games/games.service.ts\n            \n            \n                injectable\n            \n            \n                GamesService\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                    src/app/games/games.service.ts\n            \n            \n                variable\n            \n            \n                GAMES\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                    src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts\n            \n            \n                component\n            \n            \n                RockPaperScissorsGameComponent\n            \n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                    src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts\n            \n            \n                variable\n            \n            \n                MOVE_TIME_LIMIT\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                    src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts\n            \n            \n                variable\n            \n            \n                MOVES\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                    src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts\n            \n            \n                variable\n            \n            \n                WIN_STATES\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                    src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts\n            \n            \n                component\n            \n            \n                TicTacToeBoardComponent\n            \n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                    src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts\n            \n            \n                class\n            \n            \n                TicTacToeCell\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                    src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts\n            \n            \n                class\n            \n            \n                TicTacToeGameState\n            \n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                    src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts\n            \n            \n                class\n            \n            \n                TicTacToeRow\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                    src/app/games/tic-tac-toe/tic-tac-toe-game/tic-tac-toe-game.component.ts\n            \n            \n                component\n            \n            \n                TicTacToeGameComponent\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                    src/environments/environment.prod.ts\n            \n            \n                variable\n            \n            \n                environment\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                    src/environments/environment.ts\n            \n            \n                variable\n            \n            \n                environment\n            \n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^5.2.0\n        \n            @angular/common : ^5.2.0\n        \n            @angular/compiler : ^5.2.0\n        \n            @angular/core : ^5.2.0\n        \n            @angular/forms : ^5.2.0\n        \n            @angular/http : ^5.2.0\n        \n            @angular/platform-browser : ^5.2.0\n        \n            @angular/platform-browser-dynamic : ^5.2.0\n        \n            @angular/router : ^5.2.0\n        \n            core-js : ^2.4.1\n        \n            rxjs : ^5.5.6\n        \n            zone.js : ^0.8.19\n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RockPaperScissorsResult   (src/.../rock-paper-scissors-game.component.ts)\n                        \n                        \n                            TicTacToeGameResult   (src/.../tic-tac-toe-board.component.ts)\n                        \n                        \n                            TicTacToePlayer   (src/.../tic-tac-toe-board.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts\n    \n        \n            \n                \n                    \n                        \n                        RockPaperScissorsResult\n                    \n                \n                    \n                        \n                            The possible outcomes of a Rock-Paper-Scissors game\n\n                        \n                    \n                        \n                            \n                                 win\n                            \n                        \n                        \n                            \n                                Value: win\n                            \n                        \n                        \n                            \n                                 lose\n                            \n                        \n                        \n                            \n                                Value: lose\n                            \n                        \n                        \n                            \n                                 draw\n                            \n                        \n                        \n                            \n                                Value: draw\n                            \n                        \n            \n        \n\n    src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts\n    \n        \n            \n                \n                    \n                        \n                        TicTacToeGameResult\n                    \n                \n                    \n                        \n                            The different results of a Tic-Tac-Toe game\n\n                        \n                    \n                        \n                            \n                                 playing\n                            \n                        \n                        \n                            \n                                Value: playing\n                            \n                        \n                        \n                            \n                                 won\n                            \n                        \n                        \n                            \n                                Value: won\n                            \n                        \n                        \n                            \n                                 draw\n                            \n                        \n                        \n                            \n                                Value: draw\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        TicTacToePlayer\n                    \n                \n                    \n                        \n                            The different players in a Tic-Tac-Toe game\n\n                        \n                    \n                        \n                            \n                                 X\n                            \n                        \n                        \n                            \n                                Value: X\n                            \n                        \n                        \n                            \n                                 O\n                            \n                        \n                        \n                            \n                                Value: O\n                            \n                        \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nArcadeAngular\nThis project was generated with Angular CLI version 1.7.4.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the -prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GamesModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RockPaperScissorsModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TicTacToeModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n            \n                \n                    \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_GamesModule\n\n\n\ncluster_GamesModule_declarations\n\n\n\ncluster_GamesModule_imports\n\n\n\ncluster_GamesModule_exports\n\n\n\ncluster_GamesModule_providers\n\n\n\ncluster_RockPaperScissorsModule\n\n\n\ncluster_RockPaperScissorsModule_declarations\n\n\n\ncluster_RockPaperScissorsModule_exports\n\n\n\ncluster_TicTacToeModule\n\n\n\ncluster_TicTacToeModule_declarations\n\n\n\ncluster_TicTacToeModule_exports\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nGamesModule\n\nGamesModule\n\nAppModule -->\n\nGamesModule->AppModule\n\n\n\n\n\nGameViewComponent \n\nGameViewComponent \n\nGameViewComponent  -->\n\nGamesModule->GameViewComponent \n\n\n\n\n\nRockPaperScissorsModule \n\nRockPaperScissorsModule \n\nRockPaperScissorsModule  -->\n\nGamesModule->RockPaperScissorsModule \n\n\n\n\n\nTicTacToeModule \n\nTicTacToeModule \n\nTicTacToeModule  -->\n\nGamesModule->TicTacToeModule \n\n\n\n\n\nBrowseGamesComponent\n\nBrowseGamesComponent\n\nGamesModule -->\n\nBrowseGamesComponent->GamesModule\n\n\n\n\n\nGameViewComponent\n\nGameViewComponent\n\nGamesModule -->\n\nGameViewComponent->GamesModule\n\n\n\n\n\nRockPaperScissorsModule\n\nRockPaperScissorsModule\n\nGamesModule -->\n\nRockPaperScissorsModule->GamesModule\n\n\n\n\n\nRockPaperScissorsGameComponent \n\nRockPaperScissorsGameComponent \n\nRockPaperScissorsGameComponent  -->\n\nRockPaperScissorsModule->RockPaperScissorsGameComponent \n\n\n\n\n\nTicTacToeModule\n\nTicTacToeModule\n\nGamesModule -->\n\nTicTacToeModule->GamesModule\n\n\n\n\n\nTicTacToeGameComponent \n\nTicTacToeGameComponent \n\nTicTacToeGameComponent  -->\n\nTicTacToeModule->TicTacToeGameComponent \n\n\n\n\n\nGamesService\n\nGamesService\n\nGamesModule -->\n\nGamesService->GamesModule\n\n\n\n\n\nRockPaperScissorsGameComponent\n\nRockPaperScissorsGameComponent\n\nRockPaperScissorsModule -->\n\nRockPaperScissorsGameComponent->RockPaperScissorsModule\n\n\n\n\n\nTicTacToeBoardComponent\n\nTicTacToeBoardComponent\n\nTicTacToeModule -->\n\nTicTacToeBoardComponent->TicTacToeModule\n\n\n\n\n\nTicTacToeGameComponent\n\nTicTacToeGameComponent\n\nTicTacToeModule -->\n\nTicTacToeGameComponent->TicTacToeModule\n\n\n\n\n\n\n                \n                \n                \n                    Zoom in\n                    Reset\n                    Zoom out\n                \n            \n\n    \n            \n                \n                    \n                        \n                        \n                            5 modules\n                        \n                    \n                \n            \n            \n                \n                    \n                        \n                        6 components\n                    \n                \n            \n            \n                \n                    \n                        \n                        1 injectable\n                    \n                \n            \n            \n                \n                    \n                        \n                        5 classes\n                    \n                \n            \n            \n                \n                    \n                        \n                        \n                            2 routes\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            GAMES   (src/.../games.service.ts)\n                        \n                        \n                            MOVE_TIME_LIMIT   (src/.../rock-paper-scissors-game.component.ts)\n                        \n                        \n                            MOVES   (src/.../rock-paper-scissors-game.component.ts)\n                        \n                        \n                            WIN_STATES   (src/.../rock-paper-scissors-game.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        environment:     object\n\n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true\n}\n                        \n                    \n\n                \n                    \n                        Production environment configuration\n\n                    \n                \n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        environment:     object\n\n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false\n}\n                        \n                    \n\n                \n                    \n                        The default environment configuration\n\n                    \n                \n\n            \n        \n\n    src/app/games/games.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GAMES\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        GAMES:     Game[]\n\n                    \n                \n                    \n                        \n                            Type :     Game[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    id: 'tic-tac-toe',\n    name: 'Tic-Tac-Toe',\n  }, {\n    id: 'rock-paper-scissors',\n    name: 'Rock-Paper-Scissors'\n  }\n]\n                        \n                    \n\n                \n                    \n                        The implemented games\n\n                    \n                \n\n            \n        \n\n    src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            MOVE_TIME_LIMIT\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        MOVE_TIME_LIMIT:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 3\n                        \n                    \n\n                \n                    \n                        The amount of time (seconds) for the player to make a move\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MOVES\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        MOVES:     string[]\n\n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : ['rock', 'paper', 'scissors']\n                        \n                    \n\n                \n                    \n                        The valid moves in a Rock-Paper-Scissors game\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            WIN_STATES\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        WIN_STATES:     string[]\n\n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : ['rock/scissors', 'paper/rock', 'scissors/paper']\n                        \n                    \n\n                \n                    \n                        String representations of the win states of a Rock-Paper-Scissors game\ne.g.:\n[player move]/[computer move] --> player wins\n[computer move]/[player move] --> computer wins\n\n                    \n                \n\n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
