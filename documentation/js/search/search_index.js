var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.2.0","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,0.235,1,0.973]],["body/components/AppComponent.html",[0,0.462,1,1.809,2,0.522,3,0.449,4,1.965,5,1.965,6,1.965,7,0.38,8,3.284,9,0.957,10,5.536,11,4.902,12,1.595,13,1.934,14,2.519,15,1.602,16,4.902,17,1.602,18,4.902,19,0.598,20,0.04,21,0.522,22,0.449,23,0.026,24,1.178,25,2.415,26,2.415,27,2.415,28,2.728,29,1.965,30,1.176,31,1.965,32,1.303,33,1.441,34,1.965,35,1.303,36,0.641,37,1.965,38,1.178,39,0.957,40,0.858,41,0.957,42,1.965,43,0.957,44,0.941,45,0.835,46,0.941,47,1.965,48,1.303,49,1.965,50,0.032,51,0.032]],["title/modules/AppModule.html",[52,0.714,53,1.846]],["body/modules/AppModule.html",[1,1.976,2,0.515,3,0.443,7,0.375,19,0.877,20,0.04,21,0.515,22,0.547,23,0.025,24,1.162,33,1.422,50,0.031,51,0.031,52,1.166,53,3.689,54,1.744,55,2.599,56,2.904,57,1.944,58,3.239,59,3.239,60,3.239,61,3.239,62,3.174,63,2.676,64,1.422,65,1.938,66,3.934,67,4.861,68,3.239,69,2.781,70,2.676,71,3.239,72,2.599,73,2.439,74,3.934,75,3.934,76,1.938,77,3.239,78,3.934,79,3.934,80,3.934,81,3.934]],["title/components/BrowseGamesComponent.html",[0,0.235,32,0.973]],["body/components/BrowseGamesComponent.html",[0,0.455,1,0.984,2,0.394,3,0.339,4,1.484,5,1.484,6,1.484,7,0.287,9,0.722,12,1.204,13,1.824,14,2.306,15,1.336,17,1.336,19,0.613,20,0.04,21,0.394,22,0.339,23,0.019,24,0.889,25,2.014,26,2.014,27,2.014,28,2.452,29,1.484,30,1.113,31,1.484,32,1.626,33,1.983,34,1.484,35,0.984,36,0.795,37,1.484,38,0.889,39,0.722,40,0.648,41,0.722,42,1.484,43,0.722,44,0.785,45,0.697,46,0.785,47,1.484,48,0.984,49,1.484,50,0.026,51,0.026,82,4.417,83,3.792,84,2.48,85,4.088,86,3.461,87,4.088,88,4.088,89,3.365,90,1.207,91,1.855,92,4.088,93,4.088,94,0.578,95,1.336,96,2.145,97,4.097,98,1.336,99,4.977,100,1.326,101,1.99,102,0.984,103,2.129,104,1.217,105,1.386,106,4.088,107,1.469,108,1.204,109,0.98,110,1.204,111,3.012,112,4.088,113,1.326,114,1.626,115,3.012,116,2.129,117,1.867,118,3.012,119,1.204,120,2.129,121,1.089,122,3.365,123,0.984,124,1.089,125,3.012,126,3.012,127,4.088,128,3.365,129,4.088,130,3.365]],["title/modules/CoreModule.html",[52,0.714,131,2.105]],["body/modules/CoreModule.html",[2,0.596,3,0.513,7,0.434,19,0.843,20,0.04,21,0.596,22,0.513,23,0.029,50,0.034,51,0.034,52,1.092,55,2.244,70,2.922,131,3.752,132,4.554,133,3.29,134,2.507]],["title/classes/Game.html",[23,0.019,36,0.389]],["body/classes/Game.html",[2,0.428,3,0.368,7,0.312,9,0.785,12,1.728,19,0.772,20,0.041,21,0.428,22,0.486,23,0.031,30,1.364,36,0.798,39,1.036,40,0.929,41,1.036,44,0.83,45,0.736,46,0.83,50,0.028,51,0.028,76,1.612,86,2.028,90,0.966,94,0.628,95,1.412,100,1.534,104,0.704,105,1.371,107,0.966,109,1.036,113,1.289,123,1.681,124,1.182,135,2.028,136,3.557,137,4.068,138,2.08,139,3.272,140,3.557,141,3.272,142,2.379,143,3.557,144,2.313,145,3.557,146,2.694,147,2.694,148,3.557,149,2.694,150,2.694,151,2.694,152,2.028,153,2.694,154,3.557,155,2.313,156,3.557,157,2.694,158,2.694,159,2.694,160,3.983,161,1.581,162,2.636,163,2.694,164,2.694,165,1.581,166,2.694,167,0.785,168,2.694,169,2.694,170,3.557,171,2.694]],["title/classes/GameComponent.html",[23,0.019,172,1.319]],["body/classes/GameComponent.html",[0,0.348,2,0.578,3,0.497,7,0.421,9,1.059,20,0.039,22,0.497,23,0.034,36,0.725,50,0.034,51,0.034,94,0.848,98,1.703,100,1.477,105,1.176,113,1.176,114,1.703,167,1.25,172,2.31,173,3.684,174,3.635,175,3.121,176,4.415,177,2.07,178,4.415,179,3.684,180,5.212]],["title/components/GameViewComponent.html",[0,0.235,35,0.973]],["body/components/GameViewComponent.html",[0,0.446,1,0.93,2,0.372,3,0.32,4,1.402,5,1.402,6,1.402,7,0.271,9,0.682,12,1.138,13,1.8,14,2.26,15,1.285,17,1.285,19,0.729,20,0.04,21,0.372,22,0.32,23,0.018,24,0.84,25,1.937,26,1.937,27,1.937,28,2.394,29,1.402,30,1.08,31,1.402,32,0.93,33,1.028,34,1.402,35,1.588,36,0.8,37,1.402,38,0.84,39,0.682,40,0.612,41,0.682,42,1.402,43,0.682,44,0.755,45,0.67,46,0.755,47,1.402,48,0.93,49,1.402,50,0.025,51,0.025,72,2.219,73,1.764,90,1.161,91,1.801,94,0.546,95,1.285,96,2.039,97,4,98,1.285,100,1.44,101,1.943,102,1.285,104,1.185,105,1.405,107,1.435,108,1.138,109,1.08,110,1.138,113,1.295,114,1.588,119,1.138,120,2.011,121,1.028,122,3.237,123,1.285,130,3.237,155,2.779,167,1.165,172,2.153,173,3.821,177,1.756,181,3.821,182,2.343,183,2.164,184,5.509,185,3.932,186,3.932,187,4.859,188,2.845,189,4.859,190,3.932,191,2.845,192,2.164,193,2.845,194,2.845,195,5.274,196,2.343,197,3.237,198,2.845,199,3.237,200,3.932,201,2.845,202,2.845,203,2.845,204,2.845,205,2.845,206,3.932]],["title/modules/GamesModule.html",[52,0.714,62,1.639]],["body/modules/GamesModule.html",[0,0.352,2,0.45,3,0.388,7,0.328,19,0.886,20,0.04,21,0.45,22,0.591,23,0.022,24,1.017,32,1.854,33,1.614,35,1.951,36,0.584,39,0.826,40,0.961,44,0.661,45,0.761,50,0.029,51,0.029,52,1.071,54,1.526,55,2.443,56,1.895,57,1.983,62,3.334,63,2.459,64,1.244,65,1.696,70,2.459,71,2.834,72,2.443,73,2.134,76,1.696,77,3.677,83,2.433,104,1.199,121,1.244,133,2.769,134,1.895,144,2.433,181,2.433,207,2.834,208,2.834,209,2.834,210,2.834,211,2.834,212,3.27,213,3.27,214,3.443,215,4.467,216,3.443,217,3.443,218,1.895,219,1.244,220,3.443,221,1.526,222,3.443,223,3.443,224,3.443]],["title/injectables/GamesService.html",[104,0.64,142,1.639]],["body/injectables/GamesService.html",[2,0.403,3,0.347,7,0.294,9,0.739,12,1.232,19,0.754,20,0.041,21,0.403,22,0.467,23,0.027,30,1.324,36,0.796,39,0.995,40,0.893,41,0.995,44,0.797,45,0.707,46,0.797,50,0.027,51,0.027,76,1.518,86,2.573,90,0.91,94,0.591,98,1.356,100,1.515,102,1.007,104,0.893,105,1.397,107,1.226,108,1.877,109,1.126,110,1.877,113,1.439,119,1.232,120,3.318,123,1.641,124,1.113,135,1.91,136,2.536,137,3.818,138,2.095,140,2.536,142,2.584,143,4.135,144,2.177,145,3.864,146,2.536,147,2.536,148,4.135,149,3.417,150,3.417,151,3.417,152,2.573,153,3.417,154,3.864,155,2.934,156,3.864,157,3.417,158,2.536,159,2.536,160,4.135,161,1.641,162,2.719,163,3.417,164,2.536,165,1.534,166,2.536,167,0.739,168,2.536,169,2.536,170,3.417,171,2.536,225,4.15,226,3.08,227,3.08,228,3.08,229,3.08,230,3.08]],["title/components/RockPaperScissorsGameComponent.html",[0,0.235,38,0.879]],["body/components/RockPaperScissorsGameComponent.html",[0,0.372,1,0.465,2,0.186,3,0.16,4,0.701,5,0.701,6,0.701,7,0.136,9,0.341,12,0.569,13,1.45,14,1.307,15,0.76,17,0.76,19,0.563,20,0.041,21,0.186,22,0.16,23,0.015,24,0.42,25,1.146,26,1.146,27,1.146,28,1.678,29,0.701,30,0.817,31,0.701,32,0.465,33,0.514,34,0.701,35,0.465,36,0.727,37,0.701,38,1.109,39,1.132,40,1.304,41,1.428,42,0.701,43,0.341,44,0.447,45,0.396,46,0.447,47,0.701,48,0.465,49,0.701,50,0.028,51,0.015,57,1.179,76,1.146,90,0.687,91,1.179,94,0.273,95,0.76,96,2.21,98,0.76,100,1.464,101,1.362,102,0.465,103,1.006,104,0.915,105,1.444,107,1.109,108,0.93,109,1.064,110,0.93,113,1.472,114,1.5,116,1.644,117,1.442,119,0.569,121,0.514,123,0.964,124,0.514,138,0.514,152,0.882,161,0.964,165,1.58,167,1.064,172,1.664,175,1.006,177,1.537,179,1.006,192,2.716,221,2.402,231,2.67,232,2.67,233,0.701,234,1.644,235,1.644,236,1.644,237,2.804,238,2.804,239,2.804,240,2.804,241,2.804,242,3.091,243,2.804,244,2.326,245,2.326,246,1.423,247,1.786,248,3.006,249,1.915,250,3.334,251,1.423,252,1.915,253,2.804,254,2.08,255,3.091,256,1.423,257,1.423,258,1.423,259,2.093,260,1.172,261,1.172,262,2.326,263,1.786,264,1.423,265,1.678,266,1.678,267,3.318,268,1.423,269,3.318,270,1.915,271,1.423,272,3.136,273,1.423,274,2.428,275,1.423,276,1.678,277,2.093,278,1.423,279,3.338,280,3.652,281,2.804,282,1.423,283,1.423,284,1.915,285,1.423,286,1.423,287,2.804,288,1.423,289,1.423,290,2.408,291,1.915,292,1.423,293,1.423,294,1.423,295,1.423,296,2.804,297,1.423,298,1.423,299,2.804,300,1.423,301,1.644,302,2.804,303,1.172,304,1.915,305,1.172,306,1.172,307,2.636,308,1.644,309,1.172,310,2.428,311,1.172,312,1.172,313,1.172,314,3.318,315,1.172,316,1.172,317,0.701,318,1.172,319,1.172,320,1.172,321,1.172,322,1.172,323,1.644,324,0.882,325,1.006,326,1.644,327,1.644,328,1.644,329,1.006,330,1.442,331,0.631,332,1.006,333,2.428,334,2.804,335,3.091,336,3.501,337,3.318,338,1.006,339,1.172,340,1.172,341,1.172,342,1.172,343,0.631,344,1.172,345,2.085,346,1.172,347,1.172,348,1.172,349,1.172,350,1.031,351,1.915,352,1.172,353,1.172,354,1.172,355,1.172,356,0.631,357,1.172,358,1.172,359,1.172,360,1.172,361,1.006,362,0.701,363,2.326,364,2.326,365,4.436,366,1.875,367,2.326,368,1.423]],["title/modules/RockPaperScissorsModule.html",[52,0.714,212,1.639]],["body/modules/RockPaperScissorsModule.html",[2,0.539,3,0.464,7,0.393,19,0.84,20,0.04,21,0.539,22,0.631,23,0.027,24,1.218,38,1.797,39,0.989,40,1.205,41,1.2,50,0.032,51,0.032,52,1.2,54,1.828,55,2.654,56,2.27,57,1.649,63,2.754,64,1.49,65,2.032,70,2.754,133,3.101,134,2.27,212,3.249,221,1.828,231,2.032,232,2.032,369,3.395,370,3.395,371,3.395,372,4.124,373,3.395]],["title/components/TicTacToeBoardComponent.html",[0,0.235,43,0.714]],["body/components/TicTacToeBoardComponent.html",[0,0.383,1,0.474,2,0.19,3,0.163,4,0.714,5,0.714,6,0.714,7,0.138,9,0.348,12,0.58,13,1.46,14,1.324,15,0.771,17,0.771,19,0.354,20,0.041,21,0.19,22,0.163,23,0.025,24,0.428,25,1.163,26,1.163,27,1.163,28,1.696,29,0.714,30,0.909,31,0.714,32,0.474,33,0.524,34,0.714,35,0.474,36,0.742,37,0.714,38,0.428,39,0.348,40,0.312,41,0.348,42,0.714,43,0.826,44,0.996,45,1.024,46,1.134,47,0.714,48,0.474,49,0.714,50,0.029,51,0.015,64,1.469,90,0.697,91,1.194,94,0.278,95,0.771,96,2.047,98,0.771,100,1.492,101,1.377,102,1.125,103,1.024,104,0.922,105,1.364,107,1.265,108,1.194,109,0.975,110,1.194,113,1.499,114,1.552,119,0.58,121,0.524,123,1.125,124,0.524,138,1.079,161,0.474,162,2.276,165,1.801,167,1.228,177,0.524,183,0.798,218,0.798,219,1.85,247,1.801,254,0.853,259,1.68,262,1.163,263,0.642,265,0.714,266,2.002,276,0.714,277,1.046,317,1.163,331,1.046,343,2.372,350,0.642,356,1.801,362,1.163,366,1.299,374,2.047,375,2.047,376,0.714,377,2.73,378,1.463,379,1.463,380,2.134,381,2.134,382,2.361,383,2.519,384,2.134,385,1.851,386,2.361,387,2.361,388,2.519,389,1.463,390,2.134,391,1.449,392,1.449,393,2.556,394,1.449,395,1.449,396,3.394,397,1.449,398,2.519,399,1.449,400,2.676,401,1.463,402,1.449,403,1.851,404,1.449,405,1.449,406,1.449,407,2.134,408,2.35,409,1.463,410,2.276,411,1.449,412,3.074,413,2.111,414,1.449,415,1.449,416,1.449,417,1.449,418,2.35,419,1.449,420,1.449,421,1.463,422,2.361,423,1.449,424,1.449,425,0.898,426,1.851,427,0.898,428,2.35,429,2.134,430,1.851,431,0.898,432,0.898,433,0.898,434,0.898,435,0.898,436,0.898,437,0.898,438,1.463,439,1.299,440,1.463,441,1.644,442,1.299,443,1.644,444,2.237,445,0.898,446,0.898,447,0.898,448,0.898,449,2.769,450,0.898,451,2.35,452,2.134,453,2.134,454,0.898,455,1.463,456,0.898,457,1.463,458,0.898,459,2.134,460,0.898,461,2.134,462,0.898,463,0.898,464,0.798,465,0.898,466,0.898,467,0.898,468,1.463,469,1.463,470,1.463,471,1.851,472,2.35,473,0.898,474,0.898,475,0.898,476,0.898,477,0.898,478,1.463,479,0.898,480,0.898,481,0.898,482,0.898,483,0.898,484,0.898,485,0.898,486,1.463,487,0.898,488,0.898,489,0.898,490,0.898,491,0.898,492,2.361,493,2.361]],["title/classes/TicTacToeCell.html",[23,0.019,393,1.467]],["body/classes/TicTacToeCell.html",[0,0.331,2,0.233,3,0.201,7,0.17,9,0.428,13,0.583,15,0.583,17,0.583,19,0.418,20,0.041,21,0.233,22,0.201,23,0.029,30,0.428,36,0.728,43,0.428,44,0.972,45,0.986,46,1.088,50,0.031,51,0.018,64,1.007,90,0.527,91,1.115,94,0.343,95,0.911,96,2.024,98,0.911,100,1.493,101,0.714,102,1.374,104,0.834,105,1.12,107,1.316,108,0.714,109,0.668,110,0.714,113,1.493,114,1.456,119,0.714,121,0.645,123,1.266,124,0.645,138,1.239,161,0.583,162,2.293,165,1.861,167,1.214,177,0.645,183,0.983,218,1.534,219,1.519,247,1.718,254,0.645,259,1.863,262,1.69,263,0.791,265,0.879,266,2.071,276,0.879,277,1.235,317,0.879,331,1.235,343,2.382,350,0.791,356,1.975,362,1.373,366,1.888,374,1.681,375,1.681,376,0.879,377,2.453,378,1.106,379,1.106,380,1.106,381,1.106,383,2.885,384,1.106,385,1.106,388,2.403,389,1.106,390,2.126,393,2.582,396,3.513,398,3.068,400,2.99,401,1.106,403,2.126,407,1.728,408,2.403,409,1.106,410,2.195,412,2.985,413,1.909,418,2.126,421,1.106,425,2.403,426,2.762,427,1.728,428,2.606,429,2.403,430,2.403,431,1.728,432,1.728,433,1.106,434,1.106,435,1.106,436,1.106,437,1.106,438,1.728,439,1.534,440,1.728,441,1.888,442,1.534,443,1.888,444,2.453,445,1.106,446,1.106,447,1.106,448,1.106,449,2.985,450,1.106,451,2.606,452,2.403,453,2.403,454,1.106,455,1.728,456,1.106,457,1.728,458,1.106,459,2.403,460,1.106,461,2.403,462,1.106,463,1.106,464,0.983,465,1.106,466,1.106,467,1.106,468,1.728,469,1.728,470,1.728,471,2.126,472,2.126,473,1.106,474,1.106,475,1.106,476,1.106,477,1.106,478,1.728,479,1.106,480,1.106,481,1.106,482,1.106,483,1.106,484,1.106,485,1.106,486,1.728,487,1.106,488,1.106,489,1.106,490,1.106,491,1.106,494,2.787,495,1.785,496,1.785,497,1.785]],["title/components/TicTacToeGameComponent.html",[0,0.235,48,0.973]],["body/components/TicTacToeGameComponent.html",[0,0.45,1,0.969,2,0.388,3,0.334,4,1.461,5,1.461,6,1.461,7,0.283,9,0.711,12,1.186,13,1.818,14,2.04,15,1.322,17,1.322,19,0.691,20,0.04,21,0.388,22,0.334,23,0.019,24,0.876,25,1.993,26,1.993,27,1.993,28,2.436,29,1.461,30,0.97,31,1.461,32,0.969,33,1.072,34,1.461,35,0.969,36,0.764,37,1.461,38,0.876,39,0.711,40,0.638,41,0.711,42,1.461,43,1.241,44,1.14,45,1.042,46,1.168,47,1.461,48,1.691,49,1.461,50,0.026,51,0.026,57,1.841,94,0.569,95,1.322,98,1.322,100,1.379,102,1.504,105,1.317,107,1.194,109,0.711,113,1.078,114,1.504,167,1.281,172,2.293,177,1.975,179,2.096,192,2.227,196,2.442,197,3.33,199,3.33,219,1.787,233,1.461,234,2.859,235,2.859,236,2.859,260,2.442,261,2.442,301,2.859,332,2.096,338,2.096,361,2.096,374,1.977,375,1.186,377,2.94,498,3.495,499,4.045,500,2.966,501,2.442,502,2.966,503,2.966]],["title/classes/TicTacToeGameState.html",[23,0.019,413,1.467]],["body/classes/TicTacToeGameState.html",[0,0.312,2,0.207,3,0.178,7,0.151,9,0.379,13,0.517,15,0.517,17,0.517,19,0.38,20,0.041,21,0.207,22,0.178,23,0.029,30,0.379,36,0.731,43,0.379,44,0.938,45,1.022,46,1.129,50,0.033,51,0.016,64,0.915,90,0.467,91,1.013,94,0.304,95,0.828,96,2.091,98,0.828,100,1.512,101,0.632,102,1.295,104,0.779,105,1.393,107,1.249,108,0.632,109,0.869,110,0.632,113,1.512,114,1.556,119,0.632,121,0.571,123,1.184,124,0.571,138,1.432,161,1.035,162,2.503,165,1.837,167,1.171,177,0.571,183,0.87,218,0.87,219,1.865,247,1.756,254,0.571,259,1.874,262,1.561,263,0.701,265,1.248,266,2.345,276,0.779,277,1.122,317,0.779,331,1.122,343,2.503,350,0.701,356,2.211,362,1.248,366,1.744,374,2.063,375,2.063,376,0.779,377,2.328,378,0.98,379,0.98,380,0.98,381,0.98,383,1.964,384,0.98,385,0.98,388,1.964,389,0.98,390,1.964,393,2.458,396,3.316,398,2.457,400,2.997,401,0.98,403,1.57,407,1.57,408,2.622,409,0.98,410,2.084,412,2.861,413,1.953,418,1.964,421,0.98,425,0.98,426,1.964,427,0.98,428,2.457,429,2.245,430,2.457,431,0.98,432,0.98,433,0.98,434,0.98,435,0.98,436,0.98,437,0.98,438,1.57,439,1.394,440,1.57,441,1.994,442,1.394,443,2.328,444,2.688,445,2.245,446,1.57,447,2.245,448,2.245,449,2.861,450,0.98,451,2.457,452,2.245,453,2.245,454,1.57,455,1.964,456,2.245,457,1.57,458,1.57,459,2.245,460,1.57,461,2.245,462,1.57,463,1.57,464,1.394,465,2.245,466,0.98,467,0.98,468,1.57,469,1.57,470,1.57,471,1.964,472,1.964,473,0.98,474,0.98,475,0.98,476,0.98,477,0.98,478,1.57,479,0.98,480,0.98,481,0.98,482,0.98,483,0.98,484,0.98,485,0.98,486,1.57,487,0.98,488,0.98,489,0.98,490,0.98,491,0.98,504,2.532,505,1.581,506,1.581,507,1.581,508,1.581,509,1.581,510,1.581,511,1.581,512,1.581,513,1.581,514,1.581,515,1.581,516,1.581,517,1.581,518,1.581]],["title/modules/TicTacToeModule.html",[52,0.714,213,1.639]],["body/modules/TicTacToeModule.html",[2,0.522,3,0.449,7,0.38,19,0.853,20,0.04,21,0.522,22,0.623,23,0.026,24,1.178,43,1.388,44,0.941,45,0.986,46,1.063,48,1.98,50,0.032,51,0.032,52,1.176,54,1.768,55,2.615,56,2.196,57,1.595,63,2.699,64,1.441,65,1.965,70,2.699,133,3.039,134,2.196,213,3.284,219,1.441,373,3.284,374,1.595,375,1.595,498,2.819,501,3.284,519,3.284,520,3.284,521,3.284,522,3.989]],["title/classes/TicTacToeRow.html",[23,0.019,410,1.467]],["body/classes/TicTacToeRow.html",[0,0.336,2,0.241,3,0.207,7,0.175,9,0.442,13,0.602,15,0.602,17,0.602,19,0.428,20,0.041,21,0.241,22,0.207,23,0.029,36,0.727,43,0.442,44,0.98,45,0.979,46,1.081,50,0.031,51,0.018,64,1.032,90,0.544,91,1.142,94,0.354,95,0.933,96,2.042,100,1.481,101,0.736,102,1.394,104,0.848,105,1.05,107,1.333,109,0.442,113,1.491,114,1.475,119,0.736,121,0.666,123,1.288,124,0.666,138,1.264,161,0.602,162,2.32,165,1.816,167,1.225,177,0.666,183,1.572,218,1.014,219,1.425,247,1.747,254,0.666,259,1.891,262,1.407,263,0.816,265,0.907,266,2.102,276,0.907,277,1.266,317,0.907,331,1.266,343,2.398,350,0.816,356,2,362,1.407,366,1.572,374,1.576,375,1.576,376,0.907,377,2.592,378,1.142,379,1.142,380,1.142,381,1.142,383,2.169,384,1.142,385,1.142,388,2.169,389,1.142,390,2.169,393,2.666,396,3.576,398,2.645,400,2.811,401,1.142,403,1.771,407,1.771,408,2.444,409,1.142,410,2.32,412,3.273,413,1.942,418,2.169,421,1.142,425,1.142,426,2.169,427,1.142,428,2.645,429,2.444,430,2.169,431,1.142,432,1.142,433,1.142,434,1.142,435,1.142,436,1.142,437,2.444,438,1.771,439,1.572,440,1.771,441,1.926,442,1.572,443,1.926,444,2.485,445,1.142,446,1.142,447,1.142,448,1.142,449,3.017,450,1.142,451,2.645,452,2.444,453,2.444,454,1.142,455,1.771,456,1.142,457,1.771,458,1.142,459,2.444,460,1.142,461,2.444,462,1.142,463,1.142,464,1.014,465,1.142,466,1.142,467,1.142,468,1.771,469,1.771,470,1.771,471,2.169,472,2.169,473,1.142,474,1.142,475,1.142,476,1.142,477,1.142,478,1.771,479,1.142,480,1.142,481,1.142,482,1.142,483,1.142,484,1.142,485,1.142,486,1.771,487,1.142,488,1.142,489,1.142,490,1.142,491,1.142,523,2.856,524,1.842,525,1.842]],["title/classes/Timer.html",[23,0.019,307,1.846]],["body/classes/Timer.html",[0,0.353,2,0.268,3,0.231,7,0.195,9,0.491,13,0.669,15,0.669,17,0.669,19,0.671,20,0.041,21,0.268,22,0.231,23,0.024,30,0.491,36,0.716,38,0.915,39,1.073,40,1.243,41,1.348,50,0.027,51,0.02,57,1.239,76,1.527,90,0.605,91,1.239,94,0.393,95,1.013,96,2.189,98,1.013,100,1.473,101,0.819,102,0.669,104,0.896,105,1.11,107,1.231,108,0.819,109,0.896,110,0.819,113,1.422,114,1.362,121,0.74,123,1.221,124,0.74,138,0.74,152,1.921,161,1.221,165,1.598,167,1.073,172,1.657,175,2.191,177,0.74,192,2.837,221,1.984,231,2.205,232,2.205,233,1.009,234,1.448,235,1.448,236,1.448,237,1.687,238,1.687,239,1.687,240,1.687,241,1.687,242,3.685,243,1.687,247,1.657,248,2.642,249,1.687,250,3.257,252,1.687,253,2.551,254,2.031,255,3.077,259,1.847,262,2.053,263,1.847,265,1.527,266,1.527,267,2.551,269,3.077,270,1.687,272,2.642,274,2.551,276,1.527,277,2.426,279,3.643,280,3.685,281,2.551,284,1.687,287,1.687,290,2.946,291,1.687,296,1.687,299,1.687,301,2.191,302,3.685,303,1.687,304,2.551,305,1.687,306,2.551,307,3.354,308,2.642,309,2.551,310,3.685,311,2.551,312,3.431,313,2.551,314,3.876,315,1.687,316,1.687,317,1.527,318,2.551,319,2.551,320,1.687,321,1.687,322,1.687,323,2.191,324,1.27,325,1.448,326,2.191,327,2.191,328,2.191,329,1.448,330,1.921,331,0.908,332,1.448,333,3.077,334,3.431,335,3.685,336,4.025,337,3.876,338,1.448,339,1.687,340,1.687,341,1.687,342,1.687,343,0.908,344,1.687,345,2.642,346,1.687,347,1.687,348,1.687,349,1.687,350,1.373,351,2.551,352,1.687,353,1.687,354,1.687,355,1.687,356,0.908,357,1.687,358,1.687,359,1.687,360,1.687,361,1.448,362,1.009,526,3.099,527,2.049,528,2.049]],["title/coverage.html",[529,3.339]],["body/coverage.html",[0,0.436,1,1.1,7,0.321,8,2.772,20,0.039,23,0.036,32,1.1,35,1.1,36,0.576,38,0.994,40,1.291,41,1.401,43,0.808,45,1.023,46,1.121,48,1.1,50,0.028,51,0.028,82,2.772,83,2.38,84,2.772,104,0.724,109,0.808,135,3.041,142,1.854,167,0.808,172,1.492,173,3.112,174,2.772,181,2.38,182,2.772,219,1.951,221,2.393,231,2.66,232,2.66,233,2.729,254,1.217,307,2.087,324,2.087,330,2.087,374,2.159,375,2.081,376,2.564,393,1.659,410,1.659,413,1.659,498,2.38,529,2.772,530,3.367,531,3.367,532,3.367,533,6.075,534,5.643,535,4.906,536,3.367,537,3.367,538,4.403,539,4.403,540,3.915,541,3.367,542,3.367,543,3.367,544,2.772,545,3.625,546,2.772,547,3.367,548,3.367]],["title/dependencies.html",[54,1.586,549,2.49]],["body/dependencies.html",[20,0.04,21,0.582,50,0.034,51,0.034,54,1.972,68,4.31,69,3.701,73,2.758,134,2.449,550,4.449,551,6.069,552,4.449,553,4.449,554,4.449,555,4.449,556,4.449,557,4.449,558,4.449,559,4.449,560,4.449,561,4.449,562,4.449]],["title/miscellaneous/enumerations.html",[563,1.544,564,2.946]],["body/miscellaneous/enumerations.html",[20,0.032,36,0.694,39,1.328,40,1.283,41,1.419,44,0.941,45,0.999,46,1.111,50,0.034,51,0.032,94,0.766,117,3.74,161,1.602,165,1.303,219,1.441,221,1.768,231,1.965,232,1.965,233,2.615,248,3.465,250,3.039,254,1.441,259,2.173,272,2.819,356,2.454,374,1.595,375,1.595,376,2.615,400,2.699,439,2.699,441,2.699,442,2.699,443,2.699,444,2.699,563,2.473,564,3.284,565,4.036,566,4.902,567,3.284,568,3.989,569,4.902]],["title/index.html",[94,0.478,192,1.371,570,2.49]],["body/index.html",[0,0.421,3,0.456,7,0.386,14,1.796,20,0.032,30,0.972,50,0.032,51,0.032,65,1.996,89,3.336,128,4.4,167,0.972,247,1.796,571,4.052,572,4.95,573,5.566,574,5.344,575,4.052,576,4.052,577,4.052,578,4.95,579,5.88,580,5.88,581,4.052,582,4.052,583,4.052,584,4.052,585,4.052,586,4.052,587,4.052,588,4.052,589,5.344,590,4.052,591,5.709,592,4.052,593,4.052,594,4.052,595,4.052,596,4.052,597,4.052,598,3.336,599,4.95,600,5.709,601,4.95,602,4.95,603,4.052,604,5.566,605,4.052,606,4.052,607,4.052,608,5.344,609,4.052,610,4.052,611,4.052]],["title/modules.html",[52,0.973]],["body/modules.html",[20,0.034,33,2.134,50,0.034,51,0.034,52,1.101,53,2.846,62,2.527,69,4.1,86,2.846,131,3.245,212,2.527,213,2.527,612,5.8,613,5.8,614,4.59]],["title/overview.html",[615,3.339]],["body/overview.html",[0,0.297,1,1.892,20,0.04,22,0.424,23,0.024,24,1.113,32,1.69,35,1.892,38,1.71,43,1.241,48,1.892,50,0.031,51,0.031,52,1.135,53,3.589,54,1.67,55,1.856,56,2.074,57,1.507,58,3.102,59,3.102,60,3.102,61,3.102,62,3.356,63,2.605,64,1.362,65,1.856,72,1.856,104,1.113,142,2.074,207,3.102,208,3.102,209,3.102,210,3.102,211,3.102,212,3.275,213,3.311,345,2.663,369,3.102,370,3.102,371,3.102,519,3.102,520,3.102,521,3.102,615,3.102,616,3.768,617,4.732,618,3.768]],["title/routes.html",[72,1.998]],["body/routes.html",[20,0.035,50,0.035,51,0.035,72,2.375]],["title/miscellaneous/variables.html",[540,2.53,563,1.544]],["body/miscellaneous/variables.html",[20,0.04,30,1.088,36,0.756,39,1.27,40,1.266,41,1.4,44,0.871,45,0.773,46,0.871,50,0.029,51,0.029,90,1.041,94,0.677,109,1.345,116,4.032,117,3.477,135,2.186,137,3.207,138,1.274,161,1.639,165,1.73,221,1.563,231,1.737,232,1.737,233,2.609,250,2.812,254,2.11,263,1.563,277,2.011,279,2.493,290,2.493,308,2.493,323,3.546,324,3.109,325,3.207,326,3.546,327,3.546,328,3.546,329,2.493,330,3.109,331,1.563,343,1.563,350,1.563,464,1.941,540,2.493,544,2.903,545,4.757,546,2.903,563,2.186,565,4.129,567,2.903,598,4.129,619,3.527,620,3.527,621,3.527,622,5.296,623,4.537,624,3.527]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BrowseGamesComponent.html":{},"modules/CoreModule.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":471,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["0.8.19",{"_index":562,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":345,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{},"overview.html":{}}}],["1.7.4",{"_index":576,"title":{},"body":{"index.html":{}}}],["1/1",{"_index":534,"title":{},"body":{"coverage.html":{}}}],["10/10",{"_index":542,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":533,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":316,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["14/14",{"_index":541,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":618,"title":{},"body":{"overview.html":{}}}],["2.4.1",{"_index":558,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":536,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":331,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{},"miscellaneous/variables.html":{}}}],["3/3",{"_index":538,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":539,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":616,"title":{},"body":{"overview.html":{}}}],["5.2.0",{"_index":551,"title":{},"body":{"dependencies.html":{}}}],["5.5.6",{"_index":560,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":535,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":617,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":537,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":543,"title":{},"body":{"coverage.html":{}}}],["_cell",{"_index":437,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["_choosingmov",{"_index":237,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["_currentplay",{"_index":447,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["_game",{"_index":97,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{}}}],["_interv",{"_index":312,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["_opponentmov",{"_index":238,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["_outcom",{"_index":239,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["_play",{"_index":241,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["_playermov",{"_index":240,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["_result",{"_index":445,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["_row",{"_index":380,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["_state",{"_index":381,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["_statu",{"_index":425,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["_timeremain",{"_index":242,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["_winner",{"_index":448,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["abstract",{"_index":180,"title":{},"body":{"classes/GameComponent.html":{}}}],["accept",{"_index":284,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["accessor",{"_index":119,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["activ",{"_index":446,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["activatedrout",{"_index":189,"title":{},"body":{"components/GameViewComponent.html":{}}}],["actual_compon",{"_index":49,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["again",{"_index":367,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["alert(messag",{"_index":436,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["allcel",{"_index":476,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["allow",{"_index":87,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["alreadi",{"_index":434,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["amount",{"_index":290,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{},"miscellaneous/variables.html":{}}}],["angular",{"_index":128,"title":{},"body":{"components/BrowseGamesComponent.html":{},"index.html":{}}}],["angular/anim",{"_index":550,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":134,"title":{},"body":{"modules/CoreModule.html":{},"modules/GamesModule.html":{},"modules/RockPaperScissorsModule.html":{},"modules/TicTacToeModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":144,"title":{},"body":{"classes/Game.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{}}}],["angular/compil",{"_index":552,"title":{},"body":{"dependencies.html":{}}}],["angular/cor",{"_index":21,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BrowseGamesComponent.html":{},"modules/CoreModule.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{},"dependencies.html":{}}}],["angular/form",{"_index":553,"title":{},"body":{"dependencies.html":{}}}],["angular/http",{"_index":554,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/rout",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"dependencies.html":{}}}],["app",{"_index":14,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{},"index.html":{}}}],["app.compon",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.html",{"_index":18,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":16,"title":{},"body":{"components/AppComponent.html":{}}}],["appcompon",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{},"coverage.html":{},"overview.html":{}}}],["applic",{"_index":11,"title":{},"body":{"components/AppComponent.html":{}}}],["appmodul",{"_index":53,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arcad",{"_index":129,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["arcadeangular",{"_index":571,"title":{},"body":{"index.html":{}}}],["array",{"_index":325,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{},"miscellaneous/variables.html":{}}}],["artifact",{"_index":592,"title":{},"body":{"index.html":{}}}],["automat",{"_index":584,"title":{},"body":{"index.html":{}}}],["avail",{"_index":86,"title":{},"body":{"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"injectables/GamesService.html":{},"modules.html":{}}}],["away",{"_index":319,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["back",{"_index":206,"title":{},"body":{"components/GameViewComponent.html":{}}}],["base",{"_index":175,"title":{},"body":{"classes/GameComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["basic",{"_index":136,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["be",{"_index":276,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{}}}],["board",{"_index":377,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["board'},{'nam",{"_index":47,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["board.compon",{"_index":501,"title":{},"body":{"components/TicTacToeGameComponent.html":{},"modules/TicTacToeModule.html":{}}}],["board.component.html",{"_index":379,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["board.component.scss",{"_index":378,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["board.component.t",{"_index":376,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["board.component.ts:101",{"_index":504,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["board.component.ts:11",{"_index":494,"title":{},"body":{"classes/TicTacToeCell.html":{}}}],["board.component.ts:119",{"_index":512,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["board.component.ts:124",{"_index":514,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["board.component.ts:129",{"_index":516,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["board.component.ts:134",{"_index":508,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["board.component.ts:143",{"_index":510,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["board.component.ts:151",{"_index":507,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["board.component.ts:159",{"_index":518,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["board.component.ts:166",{"_index":509,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["board.component.ts:186",{"_index":391,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["board.component.ts:191",{"_index":411,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["board.component.ts:196",{"_index":387,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["board.component.ts:207",{"_index":404,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["board.component.ts:214",{"_index":415,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["board.component.ts:219",{"_index":417,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["board.component.ts:224",{"_index":420,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["board.component.ts:239",{"_index":424,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["board.component.ts:25",{"_index":497,"title":{},"body":{"classes/TicTacToeCell.html":{}}}],["board.component.ts:253",{"_index":394,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["board.component.ts:262",{"_index":406,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["board.component.ts:309",{"_index":402,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["board.component.ts:31",{"_index":495,"title":{},"body":{"classes/TicTacToeCell.html":{}}}],["board.component.ts:325",{"_index":405,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["board.component.ts:50",{"_index":523,"title":{},"body":{"classes/TicTacToeRow.html":{}}}],["board.component.ts:64",{"_index":525,"title":{},"body":{"classes/TicTacToeRow.html":{}}}],["board.component.ts:91",{"_index":506,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["board.component.ts:96",{"_index":505,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["board/tic",{"_index":375,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["boolean",{"_index":262,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{}}}],["bootstrap",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/GamesModule.html":{},"modules/RockPaperScissorsModule.html":{},"modules/TicTacToeModule.html":{},"overview.html":{}}}],["broadcast",{"_index":317,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{}}}],["brows",{"_index":33,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{},"modules.html":{}}}],["browsegamescompon",{"_index":32,"title":{"components/BrowseGamesComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{},"coverage.html":{},"overview.html":{}}}],["browser",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"modules.html":{}}}],["browsermodul",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["build",{"_index":591,"title":{},"body":{"index.html":{}}}],["c",{"_index":470,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["cell",{"_index":396,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["cell'",{"_index":431,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["cell.click(this._state.currentplay",{"_index":484,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["cell.statu",{"_index":472,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["cells.filter((cel",{"_index":474,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["chang",{"_index":586,"title":{},"body":{"index.html":{}}}],["check",{"_index":247,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{},"index.html":{}}}],["checkforwinn",{"_index":382,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["checkforwinner(cel",{"_index":392,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["checkresult",{"_index":243,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["choic",{"_index":255,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["choice.tostr",{"_index":364,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["choos",{"_index":267,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["choosemov",{"_index":244,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["choosemove(choic",{"_index":249,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["choosingmov",{"_index":291,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["claim",{"_index":398,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["class",{"_index":23,"title":{"classes/Game.html":{},"classes/GameComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BrowseGamesComponent.html":{},"modules/CoreModule.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{},"coverage.html":{},"overview.html":{}}}],["clear",{"_index":460,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["cli",{"_index":574,"title":{},"body":{"index.html":{}}}],["click",{"_index":383,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["click(cel",{"_index":401,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["click(play",{"_index":432,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["cluster_appmodul",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declar",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_import",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_gamesmodul",{"_index":207,"title":{},"body":{"modules/GamesModule.html":{},"overview.html":{}}}],["cluster_gamesmodule_declar",{"_index":208,"title":{},"body":{"modules/GamesModule.html":{},"overview.html":{}}}],["cluster_gamesmodule_export",{"_index":210,"title":{},"body":{"modules/GamesModule.html":{},"overview.html":{}}}],["cluster_gamesmodule_import",{"_index":209,"title":{},"body":{"modules/GamesModule.html":{},"overview.html":{}}}],["cluster_gamesmodule_provid",{"_index":211,"title":{},"body":{"modules/GamesModule.html":{},"overview.html":{}}}],["cluster_rockpaperscissorsmodul",{"_index":369,"title":{},"body":{"modules/RockPaperScissorsModule.html":{},"overview.html":{}}}],["cluster_rockpaperscissorsmodule_declar",{"_index":370,"title":{},"body":{"modules/RockPaperScissorsModule.html":{},"overview.html":{}}}],["cluster_rockpaperscissorsmodule_export",{"_index":371,"title":{},"body":{"modules/RockPaperScissorsModule.html":{},"overview.html":{}}}],["cluster_tictactoemodul",{"_index":519,"title":{},"body":{"modules/TicTacToeModule.html":{},"overview.html":{}}}],["cluster_tictactoemodule_declar",{"_index":520,"title":{},"body":{"modules/TicTacToeModule.html":{},"overview.html":{}}}],["cluster_tictactoemodule_export",{"_index":521,"title":{},"body":{"modules/TicTacToeModule.html":{},"overview.html":{}}}],["code",{"_index":587,"title":{},"body":{"index.html":{}}}],["collect",{"_index":395,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["column",{"_index":418,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["commonmodul",{"_index":133,"title":{},"body":{"modules/CoreModule.html":{},"modules/GamesModule.html":{},"modules/RockPaperScissorsModule.html":{},"modules/TicTacToeModule.html":{}}}],["compon",{"_index":0,"title":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["component.t",{"_index":174,"title":{},"body":{"classes/GameComponent.html":{},"coverage.html":{}}}],["component.ts:9",{"_index":178,"title":{},"body":{"classes/GameComponent.html":{}}}],["component_templ",{"_index":29,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["comput",{"_index":323,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{},"miscellaneous/variables.html":{}}}],["computer'",{"_index":270,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["computer').subscrib",{"_index":358,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["condit",{"_index":409,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["configur",{"_index":623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.error(`fail",{"_index":171,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["console.info('start",{"_index":361,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeGameComponent.html":{},"classes/Timer.html":{}}}],["console.info(`${gam",{"_index":169,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["console.info(`mov",{"_index":360,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["console.log('draw",{"_index":491,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["console.log(`winn",{"_index":487,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["console.warn(messag",{"_index":435,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["consolid",{"_index":149,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["const",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"classes/Game.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["constructor",{"_index":102,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{}}}],["constructor(dur",{"_index":313,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["constructor(gamesservic",{"_index":103,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{}}}],["constructor(http",{"_index":226,"title":{},"body":{"injectables/GamesService.html":{}}}],["constructor(priv",{"_index":124,"title":{},"body":{"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{}}}],["constructor(rout",{"_index":188,"title":{},"body":{"components/GameViewComponent.html":{}}}],["contain",{"_index":183,"title":{},"body":{"components/GameViewComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["core",{"_index":556,"title":{},"body":{"dependencies.html":{}}}],["coremodul",{"_index":131,"title":{"modules/CoreModule.html":{}},"body":{"modules/CoreModule.html":{},"modules.html":{}}}],["coverag",{"_index":529,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["current",{"_index":266,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{}}}],["currentplay",{"_index":454,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["date()}).map((data",{"_index":168,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["declar",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/GamesModule.html":{},"modules/RockPaperScissorsModule.html":{},"modules/TicTacToeModule.html":{},"overview.html":{}}}],["decor",{"_index":196,"title":{},"body":{"components/GameViewComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["default",{"_index":116,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"miscellaneous/variables.html":{}}}],["defin",{"_index":105,"title":{},"body":{"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{}}}],["definit",{"_index":176,"title":{},"body":{"classes/GameComponent.html":{}}}],["depend",{"_index":54,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/GamesModule.html":{},"modules/RockPaperScissorsModule.html":{},"modules/TicTacToeModule.html":{},"dependencies.html":{},"overview.html":{}}}],["descript",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{}}}],["determin",{"_index":351,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["dev",{"_index":582,"title":{},"body":{"index.html":{}}}],["develop",{"_index":577,"title":{},"body":{"index.html":{}}}],["diagon",{"_index":422,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["differ",{"_index":439,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/enumerations.html":{}}}],["direct",{"_index":27,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|modul",{"_index":590,"title":{},"body":{"index.html":{}}}],["directori",{"_index":595,"title":{},"body":{"index.html":{}}}],["display",{"_index":85,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["dist",{"_index":594,"title":{},"body":{"index.html":{}}}],["document",{"_index":530,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":5,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["draw",{"_index":356,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{},"miscellaneous/enumerations.html":{}}}],["durat",{"_index":310,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["dynam",{"_index":555,"title":{},"body":{"dependencies.html":{}}}],["e.g",{"_index":624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e2",{"_index":605,"title":{},"body":{"index.html":{}}}],["element",{"_index":26,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["end",{"_index":604,"title":{},"body":{"index.html":{}}}],["enum",{"_index":440,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["enumer",{"_index":564,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environ",{"_index":545,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":170,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["event",{"_index":388,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["eventemitt",{"_index":390,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["execut",{"_index":601,"title":{},"body":{"index.html":{}}}],["export",{"_index":22,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BrowseGamesComponent.html":{},"modules/CoreModule.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{},"overview.html":{}}}],["extend",{"_index":234,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeGameComponent.html":{},"classes/Timer.html":{}}}],["fals",{"_index":263,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":7,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BrowseGamesComponent.html":{},"modules/CoreModule.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{},"coverage.html":{},"index.html":{}}}],["flag",{"_index":597,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":301,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeGameComponent.html":{},"classes/Timer.html":{}}}],["full",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["function",{"_index":152,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["further",{"_index":607,"title":{},"body":{"index.html":{}}}],["game",{"_index":36,"title":{"classes/Game.html":{}},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["game'},{'nam",{"_index":42,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["game.compon",{"_index":373,"title":{},"body":{"modules/RockPaperScissorsModule.html":{},"modules/TicTacToeModule.html":{}}}],["game.component.html",{"_index":236,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeGameComponent.html":{},"classes/Timer.html":{}}}],["game.component.scss",{"_index":235,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeGameComponent.html":{},"classes/Timer.html":{}}}],["game.component.t",{"_index":233,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeGameComponent.html":{},"classes/Timer.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["game.component.ts:108",{"_index":283,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:113",{"_index":275,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:118",{"_index":286,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:123",{"_index":278,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:128",{"_index":289,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:133",{"_index":264,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:138",{"_index":293,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:14",{"_index":527,"title":{},"body":{"classes/Timer.html":{}}}],["game.component.ts:143",{"_index":271,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:148",{"_index":295,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:153",{"_index":273,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:158",{"_index":298,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:163",{"_index":268,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:168",{"_index":245,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:179",{"_index":257,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:18",{"_index":499,"title":{},"body":{"components/TicTacToeGameComponent.html":{}}}],["game.component.ts:186",{"_index":246,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:19",{"_index":526,"title":{},"body":{"classes/Timer.html":{}}}],["game.component.ts:198",{"_index":258,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:223",{"_index":251,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:231",{"_index":256,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["game.component.ts:28",{"_index":500,"title":{},"body":{"components/TicTacToeGameComponent.html":{}}}],["game.component.ts:33",{"_index":528,"title":{},"body":{"classes/Timer.html":{}}}],["game.id",{"_index":159,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["game.nam",{"_index":130,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{}}}],["game/:gameid",{"_index":223,"title":{},"body":{"modules/GamesModule.html":{}}}],["game/rock",{"_index":232,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"classes/Timer.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["game/t",{"_index":498,"title":{},"body":{"components/TicTacToeGameComponent.html":{},"modules/TicTacToeModule.html":{},"coverage.html":{}}}],["gamecompon",{"_index":172,"title":{"classes/GameComponent.html":{}},"body":{"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeGameComponent.html":{},"classes/Timer.html":{},"coverage.html":{}}}],["gamecomponent:9",{"_index":261,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["gameid",{"_index":156,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["gameov",{"_index":463,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["gameref",{"_index":187,"title":{},"body":{"components/GameViewComponent.html":{}}}],["games'},{'nam",{"_index":34,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["games.compon",{"_index":216,"title":{},"body":{"modules/GamesModule.html":{}}}],["games.component.html",{"_index":93,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["games.component.scss",{"_index":92,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["games.component.t",{"_index":84,"title":{},"body":{"components/BrowseGamesComponent.html":{},"coverage.html":{}}}],["games.component.ts:17",{"_index":118,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["games.component.ts:22",{"_index":106,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["games.component.ts:33",{"_index":111,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["games.component.ts:40",{"_index":115,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["games.find((gam",{"_index":158,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["games.servic",{"_index":121,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{}}}],["games/brows",{"_index":83,"title":{},"body":{"components/BrowseGamesComponent.html":{},"modules/GamesModule.html":{},"coverage.html":{}}}],["games/games.modul",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["gamesmodul",{"_index":62,"title":{"modules/GamesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GamesModule.html":{},"modules.html":{},"overview.html":{}}}],["gamesservic",{"_index":104,"title":{"injectables/GamesService.html":{}},"body":{"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{},"coverage.html":{},"overview.html":{}}}],["gameviewcompon",{"_index":35,"title":{"components/GameViewComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{},"coverage.html":{},"overview.html":{}}}],["gener",{"_index":573,"title":{},"body":{"index.html":{}}}],["get",{"_index":570,"title":{"index.html":{}},"body":{}}],["getcel",{"_index":524,"title":{},"body":{"classes/TicTacToeRow.html":{}}}],["getchoosingmov",{"_index":292,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["getcolumn",{"_index":419,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["getcurrentplay",{"_index":513,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["getdiagon",{"_index":423,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["getgam",{"_index":120,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{}}}],["getgame(gameid",{"_index":157,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["getgameov",{"_index":517,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["getmov",{"_index":282,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["getopponentmov",{"_index":300,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["getoutcom",{"_index":294,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["getplay",{"_index":285,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["getplayermov",{"_index":297,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["getresult",{"_index":511,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["getrow",{"_index":414,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["getstat",{"_index":416,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["getstatu",{"_index":496,"title":{},"body":{"classes/TicTacToeCell.html":{}}}],["gettimeremain",{"_index":288,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["getwinn",{"_index":515,"title":{},"body":{"classes/TicTacToeGameState.html":{}}}],["given",{"_index":397,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["go",{"_index":610,"title":{},"body":{"index.html":{}}}],["graph",{"_index":614,"title":{},"body":{"modules.html":{}}}],["handl",{"_index":403,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["help",{"_index":608,"title":{},"body":{"index.html":{}}}],["horizont",{"_index":477,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["html",{"_index":25,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["http",{"_index":154,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["http://localhost:4200",{"_index":583,"title":{},"body":{"index.html":{}}}],["httpclient",{"_index":143,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["httpclientmodul",{"_index":215,"title":{},"body":{"modules/GamesModule.html":{}}}],["human",{"_index":274,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["id",{"_index":137,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{},"miscellaneous/variables.html":{}}}],["identifi",{"_index":531,"title":{},"body":{"coverage.html":{}}}],["implement",{"_index":90,"title":{},"body":{"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{},"miscellaneous/variables.html":{}}}],["import",{"_index":19,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BrowseGamesComponent.html":{},"modules/CoreModule.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{}}}],["index",{"_index":94,"title":{"index.html":{}},"body":{"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["individu",{"_index":218,"title":{},"body":{"modules/GamesModule.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["info",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BrowseGamesComponent.html":{},"modules/CoreModule.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{}}}],["inherit",{"_index":260,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["initgam",{"_index":99,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["initi",{"_index":107,"title":{},"body":{"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{}}}],["inject",{"_index":142,"title":{"injectables/GamesService.html":{}},"body":{"classes/Game.html":{},"injectables/GamesService.html":{},"coverage.html":{},"overview.html":{}}}],["interv",{"_index":309,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["js",{"_index":557,"title":{},"body":{"dependencies.html":{}}}],["karma",{"_index":603,"title":{},"body":{"index.html":{}}}],["legend",{"_index":24,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{},"modules/TicTacToeModule.html":{},"overview.html":{}}}],["list",{"_index":112,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["load",{"_index":195,"title":{},"body":{"components/GameViewComponent.html":{}}}],["lose",{"_index":569,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["make",{"_index":329,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{},"miscellaneous/variables.html":{}}}],["match",{"_index":51,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BrowseGamesComponent.html":{},"modules/CoreModule.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["messag",{"_index":433,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["metadata",{"_index":12,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["method",{"_index":98,"title":{},"body":{"components/BrowseGamesComponent.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/Timer.html":{}}}],["millisecond",{"_index":311,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["miscellan",{"_index":563,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["modul",{"_index":52,"title":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/GamesModule.html":{},"modules/RockPaperScissorsModule.html":{},"modules/TicTacToeModule.html":{},"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/GamesModule.html":{},"modules/RockPaperScissorsModule.html":{},"modules/TicTacToeModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":609,"title":{},"body":{"index.html":{}}}],["move",{"_index":254,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["move_time_limit",{"_index":330,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["moves.length",{"_index":353,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["moves[math.floor(math.random",{"_index":352,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["name",{"_index":30,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/Timer.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["navig",{"_index":89,"title":{},"body":{"components/BrowseGamesComponent.html":{},"index.html":{}}}],["new",{"_index":167,"title":{},"body":{"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{},"coverage.html":{},"index.html":{}}}],["newgam",{"_index":177,"title":{},"body":{"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{}}}],["ng",{"_index":580,"title":{},"body":{"index.html":{}}}],["ngmodul",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/GamesModule.html":{},"modules/RockPaperScissorsModule.html":{},"modules/TicTacToeModule.html":{}}}],["ngoninit",{"_index":101,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{}}}],["nobodi",{"_index":427,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["none",{"_index":366,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["null",{"_index":429,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["null).length",{"_index":479,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["number",{"_index":277,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{},"miscellaneous/variables.html":{}}}],["o",{"_index":442,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/enumerations.html":{}}}],["ob",{"_index":320,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["object",{"_index":622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["obs.next(this._timeremain",{"_index":322,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["observ",{"_index":145,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["oninit",{"_index":91,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{}}}],["onnewgam",{"_index":386,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["opponent'",{"_index":269,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["opponent\\'",{"_index":368,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["opponentmov",{"_index":299,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["option",{"_index":110,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/Timer.html":{}}}],["out",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/GamesModule.html":{},"modules/RockPaperScissorsModule.html":{},"modules/TicTacToeModule.html":{},"index.html":{},"overview.html":{}}}],["outcom",{"_index":272,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{},"miscellaneous/enumerations.html":{}}}],["output",{"_index":385,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["output('onnewgam",{"_index":466,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["over",{"_index":408,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["overview",{"_index":615,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":549,"title":{"dependencies.html":{}},"body":{}}],["paper",{"_index":40,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{},"classes/Timer.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["param",{"_index":123,"title":{},"body":{"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{}}}],["paramet",{"_index":108,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/Timer.html":{}}}],["parammap",{"_index":200,"title":{},"body":{"components/GameViewComponent.html":{}}}],["parent",{"_index":389,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["path",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/GamesModule.html":{}}}],["pathmatch",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["play",{"_index":259,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{},"miscellaneous/enumerations.html":{}}}],["playedon",{"_index":166,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["player",{"_index":165,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["player'",{"_index":253,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["playermov",{"_index":296,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["possibl",{"_index":568,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["privat",{"_index":96,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{}}}],["prod",{"_index":596,"title":{},"body":{"index.html":{}}}],["product",{"_index":598,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["project",{"_index":572,"title":{},"body":{"index.html":{}}}],["properti",{"_index":95,"title":{},"body":{"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{}}}],["protractor",{"_index":606,"title":{},"body":{"index.html":{}}}],["provid",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/GamesModule.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeGameComponent.html":{},"modules/TicTacToeModule.html":{},"classes/Timer.html":{},"overview.html":{}}}],["public",{"_index":100,"title":{},"body":{"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{}}}],["quick",{"_index":363,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["r",{"_index":478,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["readm",{"_index":611,"title":{},"body":{"index.html":{}}}],["redirectto",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["refer",{"_index":199,"title":{},"body":{"components/GameViewComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["relat",{"_index":151,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["reload",{"_index":585,"title":{},"body":{"index.html":{}}}],["remain",{"_index":280,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["report",{"_index":160,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["reportwin",{"_index":225,"title":{},"body":{"injectables/GamesService.html":{}}}],["reportwin(gam",{"_index":163,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["repres",{"_index":462,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["represent",{"_index":464,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/variables.html":{}}}],["reset",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/GamesModule.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"overview.html":{}}}],["result",{"_index":50,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BrowseGamesComponent.html":{},"modules/CoreModule.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":113,"title":{},"body":{"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{}}}],["rock",{"_index":39,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{},"classes/Timer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["rockpaperscissorsgamecompon",{"_index":38,"title":{"components/RockPaperScissorsGameComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{},"classes/Timer.html":{},"coverage.html":{},"overview.html":{}}}],["rockpaperscissorsmodul",{"_index":212,"title":{"modules/RockPaperScissorsModule.html":{}},"body":{"modules/GamesModule.html":{},"modules/RockPaperScissorsModule.html":{},"modules.html":{},"overview.html":{}}}],["rockpaperscissorsmov",{"_index":250,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["rockpaperscissorsmove.pap",{"_index":328,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{},"miscellaneous/variables.html":{}}}],["rockpaperscissorsmove.rock",{"_index":326,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{},"miscellaneous/variables.html":{}}}],["rockpaperscissorsmove.scissor",{"_index":327,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{},"miscellaneous/variables.html":{}}}],["rockpaperscissorsresult",{"_index":248,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{},"miscellaneous/enumerations.html":{}}}],["rockpaperscissorsresult.draw",{"_index":349,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["rockpaperscissorsresult.los",{"_index":348,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["rockpaperscissorsresult.win",{"_index":346,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["root",{"_index":10,"title":{},"body":{"components/AppComponent.html":{}}}],["root'},{'nam",{"_index":31,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["rout",{"_index":72,"title":{"routes.html":{}},"body":{"modules/AppModule.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"overview.html":{},"routes.html":{}}}],["routermodul",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/GamesModule.html":{}}}],["routermodule.forchild(rout",{"_index":224,"title":{},"body":{"modules/GamesModule.html":{}}}],["routermodule.forroot(rout",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["row",{"_index":412,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["run",{"_index":579,"title":{},"body":{"index.html":{}}}],["rxj",{"_index":559,"title":{},"body":{"dependencies.html":{}}}],["rxjs/add/operator/map",{"_index":147,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["rxjs/observ",{"_index":146,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["rxjs/subject",{"_index":303,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["rxjs/subscript",{"_index":305,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["same",{"_index":399,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["scaffold",{"_index":588,"title":{},"body":{"index.html":{}}}],["scissor",{"_index":41,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{},"classes/Timer.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["scissors.modul",{"_index":222,"title":{},"body":{"modules/GamesModule.html":{}}}],["scissors.module.t",{"_index":372,"title":{},"body":{"modules/RockPaperScissorsModule.html":{}}}],["scissors/rock",{"_index":221,"title":{},"body":{"modules/GamesModule.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"classes/Timer.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["second",{"_index":308,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{},"miscellaneous/variables.html":{}}}],["select",{"_index":281,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["selector",{"_index":13,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{}}}],["serv",{"_index":581,"title":{},"body":{"index.html":{}}}],["server",{"_index":578,"title":{},"body":{"index.html":{}}}],["servic",{"_index":148,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["set",{"_index":430,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["setinterv",{"_index":321,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["share",{"_index":150,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["simpl",{"_index":306,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["singl",{"_index":155,"title":{},"body":{"classes/Game.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BrowseGamesComponent.html":{},"modules/CoreModule.html":{},"classes/Game.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{},"index.html":{}}}],["src/.../environment.prod.t",{"_index":619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.t",{"_index":620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../games.service.t",{"_index":621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../rock",{"_index":565,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../tic",{"_index":566,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app/app.component.t",{"_index":8,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.module.t",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/core/core.module.t",{"_index":132,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/app/games/brows",{"_index":82,"title":{},"body":{"components/BrowseGamesComponent.html":{},"coverage.html":{}}}],["src/app/games/gam",{"_index":173,"title":{},"body":{"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"coverage.html":{}}}],["src/app/games/games.module.t",{"_index":214,"title":{},"body":{"modules/GamesModule.html":{}}}],["src/app/games/games.service.t",{"_index":135,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/games/games.service.ts:13",{"_index":139,"title":{},"body":{"classes/Game.html":{}}}],["src/app/games/games.service.ts:18",{"_index":141,"title":{},"body":{"classes/Game.html":{}}}],["src/app/games/games.service.ts:38",{"_index":227,"title":{},"body":{"injectables/GamesService.html":{}}}],["src/app/games/games.service.ts:49",{"_index":230,"title":{},"body":{"injectables/GamesService.html":{}}}],["src/app/games/games.service.ts:55",{"_index":228,"title":{},"body":{"injectables/GamesService.html":{}}}],["src/app/games/games.service.ts:62",{"_index":229,"title":{},"body":{"injectables/GamesService.html":{}}}],["src/app/games/rock",{"_index":231,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"modules/RockPaperScissorsModule.html":{},"classes/Timer.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/app/games/t",{"_index":374,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/environments/environment.prod.t",{"_index":544,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.t",{"_index":546,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":192,"title":{"index.html":{}},"body":{"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeGameComponent.html":{},"classes/Timer.html":{}}}],["state",{"_index":343,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{},"miscellaneous/variables.html":{}}}],["state.join",{"_index":342,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["state.tostr",{"_index":492,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["state.winn",{"_index":493,"title":{},"body":{"components/TicTacToeBoardComponent.html":{}}}],["statement",{"_index":532,"title":{},"body":{"coverage.html":{}}}],["statu",{"_index":426,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["still",{"_index":481,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["store",{"_index":593,"title":{},"body":{"index.html":{}}}],["string",{"_index":138,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{},"miscellaneous/variables.html":{}}}],["styleurl",{"_index":15,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{}}}],["subject",{"_index":302,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["subscript",{"_index":304,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["super",{"_index":338,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeGameComponent.html":{},"classes/Timer.html":{}}}],["support",{"_index":612,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":613,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":455,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["switchplay",{"_index":456,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["tabl",{"_index":548,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":547,"title":{},"body":{"coverage.html":{}}}],["tac",{"_index":45,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["take",{"_index":252,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["templat",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["templateurl",{"_index":17,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{}}}],["test",{"_index":600,"title":{},"body":{"index.html":{}}}],["this._cel",{"_index":438,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this._choosingmov",{"_index":334,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["this._currentplay",{"_index":451,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this._gam",{"_index":122,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{}}}],["this._interv",{"_index":315,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["this._opponentmov",{"_index":337,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["this._outcom",{"_index":335,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["this._play",{"_index":333,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["this._playermov",{"_index":336,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["this._result",{"_index":449,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this._row",{"_index":468,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this._stat",{"_index":469,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this._state.draw",{"_index":480,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this._state.gameov",{"_index":483,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this._state.result",{"_index":486,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this._state.switchplay",{"_index":482,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this._state.winn",{"_index":488,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this._state.winner.tostring()).subscrib",{"_index":490,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this._statu",{"_index":428,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this._timeremain",{"_index":314,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["this._winn",{"_index":453,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this.board.reset",{"_index":503,"title":{},"body":{"components/TicTacToeGameComponent.html":{}}}],["this.checkresult",{"_index":355,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["this.gam",{"_index":204,"title":{},"body":{"components/GameViewComponent.html":{}}}],["this.gameref.newgam",{"_index":205,"title":{},"body":{"components/GameViewComponent.html":{}}}],["this.gamesservice.gam",{"_index":125,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["this.gamesservice.getgame(params.get('gameid",{"_index":203,"title":{},"body":{"components/GameViewComponent.html":{}}}],["this.gamesservice.reportwin('rock",{"_index":357,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["this.gamesservice.reportwin('t",{"_index":489,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this.http.post('/local/win",{"_index":164,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["this.initgam",{"_index":126,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["this.newgam",{"_index":339,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["this.reset",{"_index":467,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["this.route.parammap.subscribe((param",{"_index":202,"title":{},"body":{"components/GameViewComponent.html":{}}}],["this.updategamest",{"_index":485,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["tic",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["tick",{"_index":318,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["tictactoeboardcompon",{"_index":43,"title":{"components/TicTacToeBoardComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{},"overview.html":{}}}],["tictactoecel",{"_index":393,"title":{"classes/TicTacToeCell.html":{}},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{}}}],["tictactoegamecompon",{"_index":48,"title":{"components/TicTacToeGameComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{},"modules/TicTacToeModule.html":{},"coverage.html":{},"overview.html":{}}}],["tictactoegameresult",{"_index":443,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/enumerations.html":{}}}],["tictactoegameresult.draw",{"_index":461,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["tictactoegameresult.play",{"_index":450,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["tictactoegameresult.won",{"_index":459,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["tictactoegamest",{"_index":413,"title":{"classes/TicTacToeGameState.html":{}},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{}}}],["tictactoemodul",{"_index":213,"title":{"modules/TicTacToeModule.html":{}},"body":{"modules/GamesModule.html":{},"modules/TicTacToeModule.html":{},"modules.html":{},"overview.html":{}}}],["tictactoeplay",{"_index":400,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/enumerations.html":{}}}],["tictactoeplayer.o",{"_index":457,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["tictactoeplayer.o).length",{"_index":475,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["tictactoeplayer.x",{"_index":452,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["tictactoeplayer.x).length",{"_index":473,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["tictactoerow",{"_index":410,"title":{"classes/TicTacToeRow.html":{}},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{}}}],["time",{"_index":279,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{},"miscellaneous/variables.html":{}}}],["timer",{"_index":307,"title":{"classes/Timer.html":{}},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{},"coverage.html":{}}}],["timer(this._timeremaining).start().subscribe((remain",{"_index":354,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["timer.unsubscrib",{"_index":359,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["timeremain",{"_index":287,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["toe",{"_index":46,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["toe.modul",{"_index":220,"title":{},"body":{"modules/GamesModule.html":{}}}],["toe.module.t",{"_index":522,"title":{},"body":{"modules/TicTacToeModule.html":{}}}],["toe/tic",{"_index":219,"title":{},"body":{"modules/GamesModule.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"modules/TicTacToeModule.html":{},"classes/TicTacToeRow.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["tostr",{"_index":465,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["track",{"_index":265,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{}}}],["transpos",{"_index":421,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["tree",{"_index":6,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["trigger",{"_index":179,"title":{},"body":{"classes/GameComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["true",{"_index":350,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":109,"title":{},"body":{"components/BrowseGamesComponent.html":{},"classes/Game.html":{},"components/GameViewComponent.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["undefin",{"_index":362,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{}}}],["uniqu",{"_index":140,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["unit",{"_index":599,"title":{},"body":{"index.html":{}}}],["updat",{"_index":407,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["updategamest",{"_index":384,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["uppercas",{"_index":365,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{}}}],["us",{"_index":589,"title":{},"body":{"index.html":{}}}],["useexist",{"_index":332,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeGameComponent.html":{},"classes/Timer.html":{}}}],["user",{"_index":88,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["util",{"_index":153,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{}}}],["valid",{"_index":567,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["valu",{"_index":117,"title":{},"body":{"components/BrowseGamesComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["variabl",{"_index":540,"title":{"miscellaneous/variables.html":{}},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":575,"title":{},"body":{"index.html":{}}}],["via",{"_index":602,"title":{},"body":{"index.html":{}}}],["view",{"_index":184,"title":{},"body":{"components/GameViewComponent.html":{}}}],["view'},{'nam",{"_index":37,"title":{},"body":{"components/AppComponent.html":{},"components/BrowseGamesComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["view.compon",{"_index":217,"title":{},"body":{"modules/GamesModule.html":{}}}],["view.component.html",{"_index":186,"title":{},"body":{"components/GameViewComponent.html":{}}}],["view.component.scss",{"_index":185,"title":{},"body":{"components/GameViewComponent.html":{}}}],["view.component.t",{"_index":182,"title":{},"body":{"components/GameViewComponent.html":{},"coverage.html":{}}}],["view.component.ts:19",{"_index":198,"title":{},"body":{"components/GameViewComponent.html":{}}}],["view.component.ts:24",{"_index":194,"title":{},"body":{"components/GameViewComponent.html":{}}}],["view.component.ts:29",{"_index":190,"title":{},"body":{"components/GameViewComponent.html":{}}}],["view.component.ts:44",{"_index":193,"title":{},"body":{"components/GameViewComponent.html":{}}}],["view.component.ts:53",{"_index":191,"title":{},"body":{"components/GameViewComponent.html":{}}}],["view/gam",{"_index":181,"title":{},"body":{"components/GameViewComponent.html":{},"modules/GamesModule.html":{},"coverage.html":{}}}],["viewchild",{"_index":197,"title":{},"body":{"components/GameViewComponent.html":{},"components/TicTacToeGameComponent.html":{}}}],["viewchild(gamecompon",{"_index":201,"title":{},"body":{"components/GameViewComponent.html":{}}}],["viewchild(tictactoeboardcompon",{"_index":502,"title":{},"body":{"components/TicTacToeGameComponent.html":{}}}],["void",{"_index":114,"title":{},"body":{"components/BrowseGamesComponent.html":{},"classes/GameComponent.html":{},"components/GameViewComponent.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"components/TicTacToeGameComponent.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{}}}],["welcom",{"_index":127,"title":{},"body":{"components/BrowseGamesComponent.html":{}}}],["win",{"_index":161,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{},"components/RockPaperScissorsGameComponent.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"classes/Timer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["win(play",{"_index":458,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["win_stat",{"_index":324,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["win_states.map((st",{"_index":341,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["winner",{"_index":162,"title":{},"body":{"classes/Game.html":{},"injectables/GamesService.html":{},"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{}}}],["winstatestr",{"_index":340,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["winstatestrings.indexof(state.join",{"_index":344,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["winstatestrings.indexof(state.reverse().join",{"_index":347,"title":{},"body":{"components/RockPaperScissorsGameComponent.html":{},"classes/Timer.html":{}}}],["won",{"_index":444,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/enumerations.html":{}}}],["x",{"_index":441,"title":{},"body":{"components/TicTacToeBoardComponent.html":{},"classes/TicTacToeCell.html":{},"classes/TicTacToeGameState.html":{},"classes/TicTacToeRow.html":{},"miscellaneous/enumerations.html":{}}}],["zone.j",{"_index":561,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/GamesModule.html":{},"modules/RockPaperScissorsModule.html":{},"modules/TicTacToeModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n    \n        Description\n    \n    \n        The root component of the application\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                app.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n/**\n * The root component of the application\n */\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {}\n\n    \n\n    \n        \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BrowseGamesComponent', 'selector': 'app-browse-games'},{'name': 'GameViewComponent', 'selector': 'app-game-view'},{'name': 'RockPaperScissorsGameComponent', 'selector': 'rock-paper-scissors-game'},{'name': 'TicTacToeBoardComponent', 'selector': 'tic-tac-toe-board'},{'name': 'TicTacToeGameComponent', 'selector': 'tic-tac-toe-game'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n  Modules\n  AppModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nGamesModule\n\nGamesModule\n\nAppModule -->\n\nGamesModule->AppModule\n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                AppComponent\n                            \n                    \n                \n                \n                    Imports\n                    \n                            \n                                    GamesModule\n                            \n                    \n                \n                \n                    Bootstrap\n                    \n                            \n                                AppComponent\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { AppComponent } from './app.component';\n\nimport { GamesModule } from './games/games.module';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'browse', pathMatch: 'full' }\n];\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    RouterModule.forRoot(routes),\n\n    GamesModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BrowseGamesComponent.html":{"url":"components/BrowseGamesComponent.html","title":"component - BrowseGamesComponent","body":"\n                   \n\n\n\n\n\n  Components\n  BrowseGamesComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/games/browse-games/browse-games.component.ts\n\n\n    \n        Description\n    \n    \n        Component that displays the available games and allows users to navigate to a game\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-browse-games\n            \n\n            \n                styleUrls\n                browse-games.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./browse-games.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _games\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                initGames\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(gamesService: GamesService)\n                    \n                \n                        \n                            \n                                Defined in src/app/games/browse-games/browse-games.component.ts:22\n                            \n                        \n\n                \n                    \n                            Initialize the component\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gamesService\n                                                  \n                                                        \n                                                                    GamesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            initGames\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initGames()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/browse-games/browse-games.component.ts:33\n                            \n                        \n\n\n                \n                    \n                            Get the list of available games from GamesService\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        ngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/browse-games/browse-games.component.ts:40\n                            \n                        \n\n\n                \n                    \n                            Initialize the component\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _games\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _games:     Game[]\n\n                    \n                \n                    \n                        \n                            Type :     Game[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/browse-games/browse-games.component.ts:17\n                            \n                        \n\n                \n                    \n                        The available games\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        games\n                    \n                \n\n                \n                    \n                        getgames()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/browse-games/browse-games.component.ts:22\n                                \n                            \n                    \n                        \n                                Get the available games\n\n\n                                \n                                    Returns :     Game[]\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Game, GamesService } from '../games.service';\n\n/**\n * Component that displays the available games and allows users to navigate to a game\n */\n@Component({\n  selector: 'app-browse-games',\n  templateUrl: './browse-games.component.html',\n  styleUrls: ['./browse-games.component.scss']\n})\nexport class BrowseGamesComponent implements OnInit {\n\n  /**\n   * The available games\n   */\n  private _games: Game[] = [];\n\n  /**\n   * Get the available games\n   */\n  public get games(): Game[] { return this._games; }\n\n  /**\n   * Initialize the component\n   * @param gamesService \n   */\n  constructor(private gamesService: GamesService) { }\n\n  /**\n   * Get the list of available games from GamesService\n   */\n  private initGames(): void {\n    this._games = this.gamesService.games;\n  }\n\n  /**\n   * Initialize the component\n   */\n  public ngOnInit(): void {\n    this.initGames();\n  }\n\n}\n\n    \n\n    \n        \n  \n    Welcome to the Angular Arcade!\n  \n\n  \n    -- GAMES --\n    \n      \n        {{ game.name }}\n      \n    \n  \n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Welcome to the Angular Arcade!        -- GAMES --                  {{ game.name }}            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BrowseGamesComponent', 'selector': 'app-browse-games'},{'name': 'GameViewComponent', 'selector': 'app-game-view'},{'name': 'RockPaperScissorsGameComponent', 'selector': 'rock-paper-scissors-game'},{'name': 'TicTacToeBoardComponent', 'selector': 'tic-tac-toe-board'},{'name': 'TicTacToeGameComponent', 'selector': 'tic-tac-toe-game'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BrowseGamesComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n  Modules\n  CoreModule\n\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/core/core.module.ts\n        \n\n\n        \n\n        \n            \n            \n        \n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: []\n})\nexport class CoreModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Game.html":{"url":"classes/Game.html","title":"class - Game","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Game\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/games/games.service.ts\n        \n\n            \n                Description\n            \n            \n                Basic metadata defining a Game\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/games.service.ts:13\n                            \n                        \n\n                \n                    \n                        Unique ID for the game\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/games.service.ts:18\n                            \n                        \n\n                \n                    \n                        Name of the game\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\n\n/**\n * Basic metadata defining a Game\n */\nexport class Game {\n  /**\n   * Unique ID for the game\n   */\n  public id: string;\n\n  /**\n   * Name of the game\n   */\n  public name: string;\n}\n\n/**\n * The implemented games\n */\nconst GAMES: Game[] = [\n  {\n    id: 'tic-tac-toe',\n    name: 'Tic-Tac-Toe',\n  }, {\n    id: 'rock-paper-scissors',\n    name: 'Rock-Paper-Scissors'\n  }\n]\n\n/**\n * Service for consolidating shared game-related functionality and utilities\n */\n@Injectable()\nexport class GamesService {\n\n  /**\n   * Initialize the service\n   * @param http \n   */\n  constructor(private http: HttpClient) { }\n\n  /**\n   * Get the available games\n   */\n  public get games(): Game[] { return GAMES; }\n\n  /**\n   * Get a single game by its ID\n   * @param gameId \n   */\n  public getGame(gameId: string) { return GAMES.find((game: Game) => game.id === gameId); }\n\n  /**\n   * Report a win\n   * @param game \n   * @param winner \n   */\n  public reportWin(game: string, winner: string): Observable {\n    return this.http.post('/local/wins', { player: winner, game: game, playedOn: new Date()}).map((data: any) => {\n      console.info(`${game} win reported for player ${winner}`);\n    }, (error: Error) => {\n      console.error(`Failed to report ${game} win for player ${winner}`);\n    });\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GameComponent.html":{"url":"classes/GameComponent.html","title":"class - GameComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  GameComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/games/game-component.ts\n        \n\n            \n                Description\n            \n            \n                Base definition of a Game component\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                newGame\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                \n                            newGame\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        newGame()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/game-component.ts:9\n                            \n                        \n\n\n                \n                    \n                            Trigger a new game\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class GameComponent {\n\n    /**\n     * Trigger a new game\n     */\n    public abstract newGame(): void;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GameViewComponent.html":{"url":"components/GameViewComponent.html","title":"component - GameViewComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GameViewComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/games/game-view/game-view.component.ts\n\n\n    \n        Description\n    \n    \n        Container for a single game\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-game-view\n            \n\n            \n                styleUrls\n                game-view.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./game-view.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _game\n                            \n                            \n                                gameRef\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                newGame\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(route: ActivatedRoute, gamesService: GamesService)\n                    \n                \n                        \n                            \n                                Defined in src/app/games/game-view/game-view.component.ts:29\n                            \n                        \n\n                \n                    \n                            Initialize the component\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        gamesService\n                                                  \n                                                        \n                                                                    GamesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            newGame\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        newGame()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/game-view/game-view.component.ts:53\n                            \n                        \n\n\n                \n                    \n                            Start a new game\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        ngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/game-view/game-view.component.ts:44\n                            \n                        \n\n\n                \n                    \n                            Initialize the component\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _game\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _game:     Game\n\n                    \n                \n                    \n                        \n                            Type :     Game\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/game-view/game-view.component.ts:24\n                            \n                        \n\n                \n                    \n                        The game loaded into the view\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gameRef\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        gameRef:     GameComponent\n\n                    \n                \n                    \n                        \n                            Type :     GameComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : ViewChild\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/game-view/game-view.component.ts:19\n                            \n                        \n\n                \n                    \n                        Reference to the game loaded into the view\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        game\n                    \n                \n\n                \n                    \n                        getgame()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/game-view/game-view.component.ts:29\n                                \n                            \n                    \n                        \n                                Get the game loaded into the view\n\n\n                                \n                                    Returns :     Game\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, ParamMap } from '@angular/router';\nimport { GameComponent } from '../game-component';\nimport { Game, GamesService } from '../games.service';\n\n/**\n * Container for a single game\n */\n@Component({\n  selector: 'app-game-view',\n  templateUrl: './game-view.component.html',\n  styleUrls: ['./game-view.component.scss']\n})\nexport class GameViewComponent implements OnInit {\n\n  /**\n   * Reference to the game loaded into the view\n   */\n  @ViewChild(GameComponent) gameRef: GameComponent;\n\n  /**\n   * The game loaded into the view\n   */\n  private _game: Game;\n\n  /**\n   * Get the game loaded into the view\n   */\n  public get game(): Game { return this._game; }\n\n  /**\n   * Initialize the component\n   * @param route \n   * @param gamesService \n   */\n  constructor(\n    private route: ActivatedRoute,\n    private gamesService: GamesService\n  ) { }\n\n  /**\n   * Initialize the component\n   */\n  public ngOnInit(): void {\n    this.route.paramMap.subscribe((params: ParamMap) => {\n      this._game = this.gamesService.getGame(params.get('gameId'));\n    });\n  }\n\n  /**\n   * Start a new game\n   */\n  public newGame(): void {\n    if (this.game) this.gameRef.newGame();\n  }\n\n}\n\n    \n\n    \n        \n  \n    {{ game.name }}\n  \n\n  \n    \n    \n  \n\n  \n    Back to Games\n    New Game\n  \n\n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      {{ game.name }}                    Back to Games    New Game    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BrowseGamesComponent', 'selector': 'app-browse-games'},{'name': 'GameViewComponent', 'selector': 'app-game-view'},{'name': 'RockPaperScissorsGameComponent', 'selector': 'rock-paper-scissors-game'},{'name': 'TicTacToeBoardComponent', 'selector': 'tic-tac-toe-board'},{'name': 'TicTacToeGameComponent', 'selector': 'tic-tac-toe-game'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GameViewComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GamesModule.html":{"url":"modules/GamesModule.html","title":"module - GamesModule","body":"\n                   \n\n\n\n\n  Modules\n  GamesModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GamesModule\n\n\n\ncluster_GamesModule_declarations\n\n\n\ncluster_GamesModule_imports\n\n\n\ncluster_GamesModule_exports\n\n\n\ncluster_GamesModule_providers\n\n\n\n\nBrowseGamesComponent\n\nBrowseGamesComponent\n\n\n\nGamesModule\n\nGamesModule\n\nGamesModule -->\n\nBrowseGamesComponent->GamesModule\n\n\n\n\n\nGameViewComponent\n\nGameViewComponent\n\nGamesModule -->\n\nGameViewComponent->GamesModule\n\n\n\n\n\nGameViewComponent \n\nGameViewComponent \n\nGameViewComponent  -->\n\nGamesModule->GameViewComponent \n\n\n\n\n\nRockPaperScissorsModule \n\nRockPaperScissorsModule \n\nRockPaperScissorsModule  -->\n\nGamesModule->RockPaperScissorsModule \n\n\n\n\n\nTicTacToeModule \n\nTicTacToeModule \n\nTicTacToeModule  -->\n\nGamesModule->TicTacToeModule \n\n\n\n\n\nRockPaperScissorsModule\n\nRockPaperScissorsModule\n\nGamesModule -->\n\nRockPaperScissorsModule->GamesModule\n\n\n\n\n\nTicTacToeModule\n\nTicTacToeModule\n\nGamesModule -->\n\nTicTacToeModule->GamesModule\n\n\n\n\n\nGamesService\n\nGamesService\n\nGamesModule -->\n\nGamesService->GamesModule\n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/games/games.module.ts\n        \n\n\n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                BrowseGamesComponent\n                            \n                            \n                                GameViewComponent\n                            \n                    \n                \n                \n                    Providers\n                    \n                            \n                                     GamesService\n                            \n                    \n                \n                \n                    Imports\n                    \n                            \n                                    RockPaperScissorsModule\n                            \n                            \n                                    TicTacToeModule\n                            \n                    \n                \n                \n                    Exports\n                    \n                            \n                                    GameViewComponent\n                            \n                            \n                                    RockPaperScissorsModule\n                            \n                            \n                                    TicTacToeModule\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { GamesService } from './games.service';\nimport { BrowseGamesComponent } from './browse-games/browse-games.component';\nimport { GameViewComponent } from './game-view/game-view.component';\n\n// Individual Games\nimport { TicTacToeModule } from './tic-tac-toe/tic-tac-toe.module';\nimport { RockPaperScissorsModule } from './rock-paper-scissors/rock-paper-scissors.module';\n\nconst routes: Routes = [\n  { path: 'browse', component: BrowseGamesComponent },\n  { path: 'game/:gameId', component: GameViewComponent }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    RouterModule.forChild(routes),\n\n    TicTacToeModule,\n    RockPaperScissorsModule,\n  ],\n  declarations: [\n    GameViewComponent,\n    BrowseGamesComponent\n  ],\n  exports: [\n    GameViewComponent,\n\n    TicTacToeModule,\n    RockPaperScissorsModule,\n  ],\n  providers: [\n    GamesService,\n  ]\n})\nexport class GamesModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GamesService.html":{"url":"injectables/GamesService.html","title":"injectable - GamesService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  GamesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/games/games.service.ts\n        \n\n            \n                Description\n            \n            \n                Service for consolidating shared game-related functionality and utilities\n\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getGame\n                            \n                            \n                                    Public\n                                reportWin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/games/games.service.ts:38\n                            \n                        \n\n                \n                    \n                            Initialize the service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getGame\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getGame(gameId: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/games.service.ts:55\n                            \n                        \n\n\n                \n                    \n                            Get a single game by its ID\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gameId\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            reportWin\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        reportWin(game: string, winner: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/games.service.ts:62\n                            \n                        \n\n\n                \n                    \n                            Report a win\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        game\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        winner\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        games\n                    \n                \n\n                \n                    \n                        getgames()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/games.service.ts:49\n                                \n                            \n                    \n                        \n                                Get the available games\n\n\n                                \n                                    Returns :     Game[]\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\n\n/**\n * Basic metadata defining a Game\n */\nexport class Game {\n  /**\n   * Unique ID for the game\n   */\n  public id: string;\n\n  /**\n   * Name of the game\n   */\n  public name: string;\n}\n\n/**\n * The implemented games\n */\nconst GAMES: Game[] = [\n  {\n    id: 'tic-tac-toe',\n    name: 'Tic-Tac-Toe',\n  }, {\n    id: 'rock-paper-scissors',\n    name: 'Rock-Paper-Scissors'\n  }\n]\n\n/**\n * Service for consolidating shared game-related functionality and utilities\n */\n@Injectable()\nexport class GamesService {\n\n  /**\n   * Initialize the service\n   * @param http \n   */\n  constructor(private http: HttpClient) { }\n\n  /**\n   * Get the available games\n   */\n  public get games(): Game[] { return GAMES; }\n\n  /**\n   * Get a single game by its ID\n   * @param gameId \n   */\n  public getGame(gameId: string) { return GAMES.find((game: Game) => game.id === gameId); }\n\n  /**\n   * Report a win\n   * @param game \n   * @param winner \n   */\n  public reportWin(game: string, winner: string): Observable {\n    return this.http.post('/local/wins', { player: winner, game: game, playedOn: new Date()}).map((data: any) => {\n      console.info(`${game} win reported for player ${winner}`);\n    }, (error: Error) => {\n      console.error(`Failed to report ${game} win for player ${winner}`);\n    });\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RockPaperScissorsGameComponent.html":{"url":"components/RockPaperScissorsGameComponent.html","title":"component - RockPaperScissorsGameComponent","body":"\n                   \n\n\n\n\n\n  Components\n  RockPaperScissorsGameComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts\n\n\n    \n        Description\n    \n    \n        Rock-Paper-Scissors game\n\n    \n\n    \n        Extends\n    \n    \n            GameComponent\n    \n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                            { : , : (() => ) }\n                \n            \n\n\n            \n                selector\n                rock-paper-scissors-game\n            \n\n            \n                styleUrls\n                rock-paper-scissors-game.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./rock-paper-scissors-game.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _choosingMove\n                            \n                            \n                                    Private\n                                _opponentMove\n                            \n                            \n                                    Private\n                                _outcome\n                            \n                            \n                                    Private\n                                _playerMove\n                            \n                            \n                                    Private\n                                _playing\n                            \n                            \n                                    Private\n                                _timeRemaining\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkResult\n                            \n                            \n                                    Public\n                                chooseMove\n                            \n                            \n                                    Public\n                                newGame\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                    \n                                newGame\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(gamesService: GamesService)\n                    \n                \n                        \n                            \n                                Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:168\n                            \n                        \n\n                \n                    \n                            Initialize the component\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gamesService\n                                                  \n                                                        \n                                                                    GamesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            checkResult\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        checkResult()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:186\n                            \n                        \n\n\n                \n                    \n                            Check the result of the game\n\n\n                            \n                                Returns :     RockPaperScissorsResult\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chooseMove\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        chooseMove(choice: RockPaperScissorsMove)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:223\n                            \n                        \n\n\n                \n                    \n                            Take the player's move choice\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        choice\n                                                        \n                                                                    RockPaperScissorsMove\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            newGame\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        newGame()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:231\n                            \n                        \n\n\n                \n                    \n                            Start a new game\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        ngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:179\n                            \n                        \n\n\n                \n                    \n                            Initialize the component with a new game\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            start\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        start()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:198\n                            \n                        \n\n\n                \n                    \n                            Start playing\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                \n                            newGame\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        newGame()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     GameComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in GameComponent:9\n                            \n                        \n\n\n                \n                    \n                            Trigger a new game\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _choosingMove\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _choosingMove:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:133\n                            \n                        \n\n                \n                    \n                        Track if the player is currently choosing a move\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _opponentMove\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _opponentMove:     RockPaperScissorsMove\n\n                    \n                \n                    \n                        \n                            Type :     RockPaperScissorsMove\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:163\n                            \n                        \n\n                \n                    \n                        The opponent's (computer's) move\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _outcome\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _outcome:     RockPaperScissorsResult\n\n                    \n                \n                    \n                        \n                            Type :     RockPaperScissorsResult\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:143\n                            \n                        \n\n                \n                    \n                        The outcome of the game\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _playerMove\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _playerMove:     RockPaperScissorsMove\n\n                    \n                \n                    \n                        \n                            Type :     RockPaperScissorsMove\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:153\n                            \n                        \n\n                \n                    \n                        The player (human) move\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _playing\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _playing:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:113\n                            \n                        \n\n                \n                    \n                        Track if the game is being played\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _timeRemaining\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _timeRemaining:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:123\n                            \n                        \n\n                \n                    \n                        The time remaining for the player to select a move\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        moves\n                    \n                \n\n                \n                    \n                        getmoves()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:108\n                                \n                            \n                    \n                        \n                                Get the acceptable moves\n\n\n                                \n                                    Returns :     RockPaperScissorsMove[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        playing\n                    \n                \n\n                \n                    \n                        getplaying()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:118\n                                \n                            \n                    \n                        \n                                Check if the game is currently being played\n\n\n                                \n                                    Returns :     boolean\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        timeRemaining\n                    \n                \n\n                \n                    \n                        gettimeRemaining()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:128\n                                \n                            \n                    \n                        \n                                Get the amount of time remaining for move selection\n\n\n                                \n                                    Returns :     number\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        choosingMove\n                    \n                \n\n                \n                    \n                        getchoosingMove()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:138\n                                \n                            \n                    \n                        \n                                Check if the player is choosing a move\n\n\n                                \n                                    Returns :     boolean\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        outcome\n                    \n                \n\n                \n                    \n                        getoutcome()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:148\n                                \n                            \n                    \n                        \n                                Get the outcome of the game\n\n\n                                \n                                    Returns :     RockPaperScissorsResult\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        playerMove\n                    \n                \n\n                \n                    \n                        getplayerMove()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:158\n                                \n                            \n                    \n                        \n                                Get the player's move\n\n\n                                \n                                    Returns :     RockPaperScissorsMove\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        opponentMove\n                    \n                \n\n                \n                    \n                        getopponentMove()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:168\n                                \n                            \n                    \n                        \n                                Get the opponent's move\n\n\n                                \n                                    Returns :     RockPaperScissorsMove\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, OnInit, forwardRef } from '@angular/core';\nimport { GameComponent } from '../../game-component';\nimport { GamesService } from '../../games.service';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\n\n/**\n * A simple timer for time-based game functionality\n */\nclass Timer {\n  /**\n   * The amount of time (seconds) remaining on the timer\n   */\n  private _timeRemaining: number;\n\n  /**\n   * The interval duration (milliseconds)\n   */\n  private _interval: number;\n\n  /**\n   * Initialize the timer\n   * @param duration \n   */\n  constructor(duration: number) {\n    this._timeRemaining = duration;\n    this._interval = 1000;\n  }\n\n  /**\n   * Start the timer and broadcast as time ticks away\n   */\n  public start(): Subject {\n    let obs: Subject = new Subject();\n\n    let timer = setInterval(() => {\n      this._timeRemaining--;\n      obs.next(this._timeRemaining);\n      if (this._timeRemaining  player wins\n * [computer move, player move] --> computer wins\n */\nconst WIN_STATES: Array = [\n  [RockPaperScissorsMove.rock, RockPaperScissorsMove.scissors],\n  [RockPaperScissorsMove.paper, RockPaperScissorsMove.rock],\n  [RockPaperScissorsMove.scissors, RockPaperScissorsMove.paper]\n];\n\n/**\n * The amount of time (seconds) for the player to make a move\n */\nconst MOVE_TIME_LIMIT: number = 3;\n\n/**\n * Rock-Paper-Scissors game\n */\n@Component({\n  selector: 'rock-paper-scissors-game',\n  templateUrl: './rock-paper-scissors-game.component.html',\n  styleUrls: ['./rock-paper-scissors-game.component.scss'],\n  providers: [{ provide: GameComponent, useExisting: forwardRef(() => RockPaperScissorsGameComponent) }]\n})\nexport class RockPaperScissorsGameComponent extends GameComponent implements OnInit {\n\n  /**\n   * Get the acceptable moves\n   */\n  public get moves(): RockPaperScissorsMove[] { return MOVES; }\n\n  /**\n   * Track if the game is being played\n   */\n  private _playing: boolean = false;\n\n  /**\n   * Check if the game is currently being played\n   */\n  public get playing(): boolean { return this._playing; }\n\n  /**\n   * The time remaining for the player to select a move\n   */\n  private _timeRemaining: number;\n\n  /**\n   * Get the amount of time remaining for move selection\n   */\n  public get timeRemaining(): number { return this._timeRemaining; }\n\n  /**\n   * Track if the player is currently choosing a move\n   */\n  private _choosingMove: boolean = false;\n\n  /**\n   * Check if the player is choosing a move\n   */\n  public get choosingMove(): boolean { return this._choosingMove; }\n\n  /**\n   * The outcome of the game\n   */\n  private _outcome: RockPaperScissorsResult;\n\n  /**\n   * Get the outcome of the game\n   */\n  public get outcome(): RockPaperScissorsResult { return this._outcome; }\n\n  /**\n   * The player (human) move\n   */\n  private _playerMove: RockPaperScissorsMove;\n\n  /**\n   * Get the player's move\n   */\n  public get playerMove(): RockPaperScissorsMove { return this._playerMove; }\n\n  /**\n   * The opponent's (computer's) move\n   */\n  private _opponentMove: RockPaperScissorsMove;\n\n  /**\n   * Get the opponent's move\n   */\n  public get opponentMove(): RockPaperScissorsMove { return this._opponentMove; }\n\n  /**\n   * Initialize the component\n   * @param gamesService \n   */\n  constructor(private gamesService: GamesService) { super(); }\n\n  /**\n   * Initialize the component with a new game\n   */\n  public ngOnInit(): void {\n    this.newGame();\n  }\n\n  /**\n   * Check the result of the game\n   */\n  private checkResult(): RockPaperScissorsResult {\n    let winStateStrings: string[] = WIN_STATES.map((state: [RockPaperScissorsMove, RockPaperScissorsMove]) => state.join('/'));\n    let state: [RockPaperScissorsMove, RockPaperScissorsMove] = [this._playerMove, this._opponentMove];\n\n    if ((this._playerMove && !this._opponentMove) || (winStateStrings.indexOf(state.join('/')) > -1)) return RockPaperScissorsResult.win;\n    if ((this._opponentMove && !this._playerMove) || (winStateStrings.indexOf(state.reverse().join('/')) > -1)) return RockPaperScissorsResult.lose;\n    return RockPaperScissorsResult.draw;\n  }\n\n  /**\n   * Start playing\n   */\n  public start(): void {\n    this._playing = true;\n    this._choosingMove = true;\n\n    // Determine opponent's move\n    this._opponentMove = MOVES[Math.floor(Math.random() * (MOVES.length - 1))];\n\n    this._timeRemaining = MOVE_TIME_LIMIT;\n    let timer: Subscription = new Timer(this._timeRemaining).start().subscribe((remaining: number) => {\n      this._timeRemaining = remaining;\n    }, () => { }, () => {\n      this._choosingMove = false;\n\n      // determine result\n      this._outcome = this.checkResult();\n\n      if (this._outcome !== 'draw') this.gamesService.reportWin('Rock-Paper-Scissors', this._outcome === 'win' ? 'Human' : 'Computer').subscribe();\n      timer.unsubscribe();\n    });\n  }\n\n  /**\n   * Take the player's move choice\n   * @param choice \n   */\n  public chooseMove(choice: RockPaperScissorsMove): void {\n    this._playerMove = choice;\n    console.info(`Move: ${this._playerMove}`);\n  }\n\n  /**\n   * Start a new game\n   */\n  public newGame(): void {\n    console.info('Starting a new Rock-Paper-Scissors game');\n    this._playing = this._choosingMove = false;\n    this._outcome = this._playerMove = this._opponentMove = undefined;\n  }\n\n}\n\n    \n\n    \n        \n  \n    Start!\n\n    \n      QUICK!\n      Choose your move!\n      Time Remaining: {{ timeRemaining }}\n      \n        {{ choice.toString() | uppercase }}\n      \n    \n\n    \n      Opponent's Move: {{ opponentMove || 'none' | uppercase }}\n      Your Move: {{ playerMove || 'none' | uppercase }}\n      Result: {{ outcome | uppercase }}!\n      Play Again\n    \n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Start!          QUICK!      Choose your move!      Time Remaining: {{ timeRemaining }}              {{ choice.toString() | uppercase }}                    Opponent\\'s Move: {{ opponentMove || \\'none\\' | uppercase }}      Your Move: {{ playerMove || \\'none\\' | uppercase }}      Result: {{ outcome | uppercase }}!      Play Again      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BrowseGamesComponent', 'selector': 'app-browse-games'},{'name': 'GameViewComponent', 'selector': 'app-game-view'},{'name': 'RockPaperScissorsGameComponent', 'selector': 'rock-paper-scissors-game'},{'name': 'TicTacToeBoardComponent', 'selector': 'tic-tac-toe-board'},{'name': 'TicTacToeGameComponent', 'selector': 'tic-tac-toe-game'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'RockPaperScissorsGameComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RockPaperScissorsModule.html":{"url":"modules/RockPaperScissorsModule.html","title":"module - RockPaperScissorsModule","body":"\n                   \n\n\n\n\n  Modules\n  RockPaperScissorsModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RockPaperScissorsModule\n\n\n\ncluster_RockPaperScissorsModule_declarations\n\n\n\ncluster_RockPaperScissorsModule_exports\n\n\n\n\nRockPaperScissorsGameComponent\n\nRockPaperScissorsGameComponent\n\n\n\nRockPaperScissorsModule\n\nRockPaperScissorsModule\n\nRockPaperScissorsModule -->\n\nRockPaperScissorsGameComponent->RockPaperScissorsModule\n\n\n\n\n\nRockPaperScissorsGameComponent \n\nRockPaperScissorsGameComponent \n\nRockPaperScissorsGameComponent  -->\n\nRockPaperScissorsModule->RockPaperScissorsGameComponent \n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/games/rock-paper-scissors/rock-paper-scissors.module.ts\n        \n\n\n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                RockPaperScissorsGameComponent\n                            \n                    \n                \n                \n                    Exports\n                    \n                            \n                                    RockPaperScissorsGameComponent\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RockPaperScissorsGameComponent } from './rock-paper-scissors-game/rock-paper-scissors-game.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    RockPaperScissorsGameComponent\n  ],\n  exports: [\n    RockPaperScissorsGameComponent\n  ]\n})\nexport class RockPaperScissorsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TicTacToeBoardComponent.html":{"url":"components/TicTacToeBoardComponent.html","title":"component - TicTacToeBoardComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TicTacToeBoardComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts\n\n\n    \n        Description\n    \n    \n        A Tic-Tac-Toe board\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                tic-tac-toe-board\n            \n\n            \n                styleUrls\n                tic-tac-toe-board.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./tic-tac-toe-board.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _rows\n                            \n                            \n                                    Private\n                                _state\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkForWinner\n                            \n                            \n                                    Public\n                                click\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                            \n                                    Public\n                                reset\n                            \n                            \n                                    Public\n                                updateGameState\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                onNewGame\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(gamesService: GamesService)\n                    \n                \n                        \n                            \n                                Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:196\n                            \n                        \n\n                \n                    \n                            Initialize the component\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gamesService\n                                                  \n                                                        \n                                                                    GamesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        onNewGame\n                    \n                    \n                        Broadcast a \"new game\" event to parent component\n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:186\n                            \n                        \n            \n        \n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            checkForWinner\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        checkForWinner(cells: TicTacToeCell[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:253\n                            \n                        \n\n\n                \n                    \n                            Check for a winner in a collection of cells. If all the given cells are claimed by the same player, that player is the winner\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cells\n                                                        \n                                                                    TicTacToeCell[]\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TicTacToePlayer\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            click\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        click(cell: TicTacToeCell)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:309\n                            \n                        \n\n\n                \n                    \n                            Handle a cell click event (a \"move\")\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cell\n                                                        \n                                                                    TicTacToeCell\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        ngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:207\n                            \n                        \n\n\n                \n                    \n                            Initialize the component with a new game\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            reset\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        reset()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:325\n                            \n                        \n\n\n                \n                    \n                            Reset the game\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            updateGameState\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        updateGameState()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:262\n                            \n                        \n\n\n                \n                    \n                            Update the state of the game by checking for game over conditions or updating the current player\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _rows\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _rows:     TicTacToeRow[]\n\n                    \n                \n                    \n                        \n                            Type :     TicTacToeRow[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:191\n                            \n                        \n\n                \n                    \n                        The rows of the board\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _state\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _state:     TicTacToeGameState\n\n                    \n                \n                    \n                        \n                            Type :     TicTacToeGameState\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:196\n                            \n                        \n\n                \n                    \n                        The state of the game\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        rows\n                    \n                \n\n                \n                    \n                        getrows()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:214\n                                \n                            \n                    \n                        \n                                Get the rows of the board\n\n\n                                \n                                    Returns :     TicTacToeRow[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:219\n                                \n                            \n                    \n                        \n                                Get the state of the game\n\n\n                                \n                                    Returns :     TicTacToeGameState\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        columns\n                    \n                \n\n                \n                    \n                        getcolumns()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:224\n                                \n                            \n                    \n                        \n                                Get the columns of the board (transpose the rows)\n\n\n                                \n                                    Returns :     [][]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        diagonals\n                    \n                \n\n                \n                    \n                        getdiagonals()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:239\n                                \n                            \n                    \n                        \n                                Get the diagonals of the board\n\n\n                                \n                                    Returns :     [][]\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { GamesService } from '../../games.service';\n\n/**\n * An individual cell of a Tic-Tac-Toe game that players can claim\n */\nclass TicTacToeCell {\n  /**\n   * The player who has \"claimed\" the cell\n   */\n  private _status: TicTacToePlayer;\n\n  /**\n   * Initialize the cell:\n   * \n   * status: none (nobody has claimed it)\n   */\n  constructor() {\n    this._status = null;\n  }\n\n  /**\n   * Get the player who has claimed the cell\n   */\n  public get status(): TicTacToePlayer { return this._status; }\n\n  /**\n   * Handle a click event on the cell, set the cell's status to the player who clicked\n   * @param player \n   */\n  public click(player: TicTacToePlayer): boolean {\n    if (this._status !== null) {\n      let message: string = `This cell is already claimed by Player ${this._status}!`;\n      console.warn(message);\n      alert(message);\n      return false;\n    }\n    this._status = player;\n    return true;\n  }\n}\n\n/**\n * A row of a Tic-Tac-Toe board, containing cells\n */\nclass TicTacToeRow {\n  /**\n   * The cells in the row\n   */\n  private _cells: TicTacToeCell[];\n\n  /**\n   * Initialize the row:\n   * \n   * cells: [cell, cell, cell]\n   */\n  constructor() {\n    this._cells = [new TicTacToeCell(), new TicTacToeCell(), new TicTacToeCell()];\n  }\n\n  /**\n   * Get the cells in the row\n   */\n  public get cells(): TicTacToeCell[] { return this._cells; }\n}\n\n/**\n * The different players in a Tic-Tac-Toe game\n */\nenum TicTacToePlayer {\n  X = 'X',\n  O = 'O'\n}\n\n/**\n * The different results of a Tic-Tac-Toe game\n */\nenum TicTacToeGameResult {\n  playing = 'playing',\n  won = 'won',\n  draw = 'draw'\n}\n\n/**\n * Class for tracking the STATE of a Tic-Tac-Toe game\n */\nclass TicTacToeGameState {\n  /**\n   * The result of the game\n   */\n  private _result: TicTacToeGameResult;\n\n  /**\n   * The currently active player\n   */\n  private _currentPlayer: TicTacToePlayer;\n\n  /**\n   * The winner (if the game is over and the result is \"won\")\n   */\n  private _winner: TicTacToePlayer;\n\n  /**\n   * Initialize the state:\n   * \n   * result: playing\n   * current player: X\n   * winner: none\n   */\n  constructor() {\n    this._result = TicTacToeGameResult.playing;\n    this._currentPlayer = TicTacToePlayer.X;\n    this._winner = undefined;\n  }\n\n  /**\n   * Get the result from the state\n   */\n  public get result(): TicTacToeGameResult { return this._result; }\n\n  /**\n   * Get the current player from the state\n   */\n  public get currentPlayer(): TicTacToePlayer { return this._currentPlayer; }\n\n  /**\n   * Get the winner from the state\n   */\n  public get winner(): TicTacToePlayer { return this._winner; }\n\n  /**\n   * Switch the current player\n   */\n  public switchPlayer(): void {\n    if (this._currentPlayer === TicTacToePlayer.X) this._currentPlayer = TicTacToePlayer.O;\n    else this._currentPlayer = TicTacToePlayer.X;\n  }\n\n  /**\n   * Set the state to \"won\" and define the player who won the game\n   * @param player \n   */\n  public win(player: TicTacToePlayer) {\n    this._winner = player;\n    this._result = TicTacToeGameResult.won;\n  }\n\n  /**\n   * Set the state to \"draw\" (and clear the winner)\n   */\n  public draw(): void {\n    this._result = TicTacToeGameResult.draw;\n    this._winner = undefined;\n  }\n\n  /**\n   * Check if the state represents a \"game over\" state (won or draw)\n   */\n  public get gameOver(): boolean {\n    return this._result === TicTacToeGameResult.won || this._result === TicTacToeGameResult.draw;\n  }\n\n  /**\n   * Get a string representation of the state\n   */\n  public toString(): string {\n    if (this._result === TicTacToeGameResult.won) return 'Winner!';\n    if (this._result === TicTacToeGameResult.draw) return 'Draw!';\n    return 'Playing...';\n  }\n}\n\n/**\n * A Tic-Tac-Toe board\n */\n@Component({\n  selector: 'tic-tac-toe-board',\n  templateUrl: './tic-tac-toe-board.component.html',\n  styleUrls: ['./tic-tac-toe-board.component.scss']\n})\nexport class TicTacToeBoardComponent implements OnInit {\n\n  /**\n   * Broadcast a \"new game\" event to parent component\n   */\n  @Output('onNewGame') newGame: EventEmitter = new EventEmitter();\n\n  /**\n   * The rows of the board\n   */\n  private _rows: TicTacToeRow[];\n\n  /**\n   * The state of the game\n   */\n  private _state: TicTacToeGameState;\n\n  /**\n   * Initialize the component\n   * @param gamesService \n   */\n  constructor(private gamesService: GamesService) { }\n\n  /**\n   * Initialize the component with a new game\n   */\n  public ngOnInit(): void {\n    this.reset();\n  }\n\n  /**\n   * Get the rows of the board\n   */\n  public get rows(): TicTacToeRow[] { return this._rows; }\n\n  /**\n   * Get the state of the game\n   */\n  public get state(): TicTacToeGameState { return this._state; }\n\n  /**\n   * Get the columns of the board (transpose the rows)\n   */\n  private get columns(): TicTacToeCell[][] {\n    let columns: TicTacToeCell[][] = [];\n    for (let c: number = 0; c  cell.status === TicTacToePlayer.X).length === 3) return TicTacToePlayer.X;\n    if (cells.filter((cell: TicTacToeCell) => cell.status === TicTacToePlayer.O).length === 3) return TicTacToePlayer.O;\n    return null;\n  }\n\n  /**\n   * Update the state of the game by checking for game over conditions or updating the current player\n   */\n  public updateGameState(): void {\n\n    // Check for Game Over\n\n    // Check for WIN\n    let winner: TicTacToePlayer = null;\n    let allCells: TicTacToeCell[] = [];\n\n    // Horizontal\n    for (let r: number = 0; r  cell.status === null).length === 0) {\n      this._state.draw();\n      return;\n    }\n\n    // Game is still being played, switch players\n    this._state.switchPlayer();\n  }\n\n  /**\n   * Handle a cell click event (a \"move\")\n   * @param cell \n   */\n  public click(cell: TicTacToeCell): void {\n    if (!this._state.gameOver && cell.click(this._state.currentPlayer)) {\n      this.updateGameState();\n\n      if (this._state.result === TicTacToeGameResult.won) {\n        console.log(`WINNER: ${this._state.winner}`);\n        this.gamesService.reportWin('Tic-Tac-Toe', this._state.winner.toString()).subscribe()\n      } else if (this._state.result === TicTacToeGameResult.draw) {\n        console.log('DRAW!');\n      }\n    }\n  }\n\n  /**\n   * Reset the game\n   */\n  public reset(): void {\n    this._rows = [new TicTacToeRow(), new TicTacToeRow(), new TicTacToeRow()];\n    this._state = new TicTacToeGameState();\n  }\n\n}\n\n    \n\n    \n        \n  \n    \n      \n        {{ cell.status }}\n      \n    \n  \n\n  \n    \n      {{ state.toString() }}\n      Player: {{ state.winner }}\n      New Game\n    \n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    {{ cell.status }}                        {{ state.toString() }}      Player: {{ state.winner }}      New Game      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BrowseGamesComponent', 'selector': 'app-browse-games'},{'name': 'GameViewComponent', 'selector': 'app-game-view'},{'name': 'RockPaperScissorsGameComponent', 'selector': 'rock-paper-scissors-game'},{'name': 'TicTacToeBoardComponent', 'selector': 'tic-tac-toe-board'},{'name': 'TicTacToeGameComponent', 'selector': 'tic-tac-toe-game'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TicTacToeBoardComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TicTacToeCell.html":{"url":"classes/TicTacToeCell.html","title":"class - TicTacToeCell","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  TicTacToeCell\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts\n        \n\n            \n                Description\n            \n            \n                An individual cell of a Tic-Tac-Toe game that players can claim\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                click\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:11\n                            \n                        \n\n                \n                    \n                            Initialize the cell:\nstatus: none (nobody has claimed it)\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _status\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _status:     TicTacToePlayer\n\n                    \n                \n                    \n                        \n                            Type :     TicTacToePlayer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:11\n                            \n                        \n\n                \n                    \n                        The player who has \"claimed\" the cell\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            click\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        click(player: TicTacToePlayer)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:31\n                            \n                        \n\n\n                \n                    \n                            Handle a click event on the cell, set the cell's status to the player who clicked\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        player\n                                                        \n                                                                    TicTacToePlayer\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        status\n                    \n                \n\n                \n                    \n                        getstatus()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:25\n                                \n                            \n                    \n                        \n                                Get the player who has claimed the cell\n\n\n                                \n                                    Returns :     TicTacToePlayer\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { GamesService } from '../../games.service';\n\n/**\n * An individual cell of a Tic-Tac-Toe game that players can claim\n */\nclass TicTacToeCell {\n  /**\n   * The player who has \"claimed\" the cell\n   */\n  private _status: TicTacToePlayer;\n\n  /**\n   * Initialize the cell:\n   * \n   * status: none (nobody has claimed it)\n   */\n  constructor() {\n    this._status = null;\n  }\n\n  /**\n   * Get the player who has claimed the cell\n   */\n  public get status(): TicTacToePlayer { return this._status; }\n\n  /**\n   * Handle a click event on the cell, set the cell's status to the player who clicked\n   * @param player \n   */\n  public click(player: TicTacToePlayer): boolean {\n    if (this._status !== null) {\n      let message: string = `This cell is already claimed by Player ${this._status}!`;\n      console.warn(message);\n      alert(message);\n      return false;\n    }\n    this._status = player;\n    return true;\n  }\n}\n\n/**\n * A row of a Tic-Tac-Toe board, containing cells\n */\nclass TicTacToeRow {\n  /**\n   * The cells in the row\n   */\n  private _cells: TicTacToeCell[];\n\n  /**\n   * Initialize the row:\n   * \n   * cells: [cell, cell, cell]\n   */\n  constructor() {\n    this._cells = [new TicTacToeCell(), new TicTacToeCell(), new TicTacToeCell()];\n  }\n\n  /**\n   * Get the cells in the row\n   */\n  public get cells(): TicTacToeCell[] { return this._cells; }\n}\n\n/**\n * The different players in a Tic-Tac-Toe game\n */\nenum TicTacToePlayer {\n  X = 'X',\n  O = 'O'\n}\n\n/**\n * The different results of a Tic-Tac-Toe game\n */\nenum TicTacToeGameResult {\n  playing = 'playing',\n  won = 'won',\n  draw = 'draw'\n}\n\n/**\n * Class for tracking the STATE of a Tic-Tac-Toe game\n */\nclass TicTacToeGameState {\n  /**\n   * The result of the game\n   */\n  private _result: TicTacToeGameResult;\n\n  /**\n   * The currently active player\n   */\n  private _currentPlayer: TicTacToePlayer;\n\n  /**\n   * The winner (if the game is over and the result is \"won\")\n   */\n  private _winner: TicTacToePlayer;\n\n  /**\n   * Initialize the state:\n   * \n   * result: playing\n   * current player: X\n   * winner: none\n   */\n  constructor() {\n    this._result = TicTacToeGameResult.playing;\n    this._currentPlayer = TicTacToePlayer.X;\n    this._winner = undefined;\n  }\n\n  /**\n   * Get the result from the state\n   */\n  public get result(): TicTacToeGameResult { return this._result; }\n\n  /**\n   * Get the current player from the state\n   */\n  public get currentPlayer(): TicTacToePlayer { return this._currentPlayer; }\n\n  /**\n   * Get the winner from the state\n   */\n  public get winner(): TicTacToePlayer { return this._winner; }\n\n  /**\n   * Switch the current player\n   */\n  public switchPlayer(): void {\n    if (this._currentPlayer === TicTacToePlayer.X) this._currentPlayer = TicTacToePlayer.O;\n    else this._currentPlayer = TicTacToePlayer.X;\n  }\n\n  /**\n   * Set the state to \"won\" and define the player who won the game\n   * @param player \n   */\n  public win(player: TicTacToePlayer) {\n    this._winner = player;\n    this._result = TicTacToeGameResult.won;\n  }\n\n  /**\n   * Set the state to \"draw\" (and clear the winner)\n   */\n  public draw(): void {\n    this._result = TicTacToeGameResult.draw;\n    this._winner = undefined;\n  }\n\n  /**\n   * Check if the state represents a \"game over\" state (won or draw)\n   */\n  public get gameOver(): boolean {\n    return this._result === TicTacToeGameResult.won || this._result === TicTacToeGameResult.draw;\n  }\n\n  /**\n   * Get a string representation of the state\n   */\n  public toString(): string {\n    if (this._result === TicTacToeGameResult.won) return 'Winner!';\n    if (this._result === TicTacToeGameResult.draw) return 'Draw!';\n    return 'Playing...';\n  }\n}\n\n/**\n * A Tic-Tac-Toe board\n */\n@Component({\n  selector: 'tic-tac-toe-board',\n  templateUrl: './tic-tac-toe-board.component.html',\n  styleUrls: ['./tic-tac-toe-board.component.scss']\n})\nexport class TicTacToeBoardComponent implements OnInit {\n\n  /**\n   * Broadcast a \"new game\" event to parent component\n   */\n  @Output('onNewGame') newGame: EventEmitter = new EventEmitter();\n\n  /**\n   * The rows of the board\n   */\n  private _rows: TicTacToeRow[];\n\n  /**\n   * The state of the game\n   */\n  private _state: TicTacToeGameState;\n\n  /**\n   * Initialize the component\n   * @param gamesService \n   */\n  constructor(private gamesService: GamesService) { }\n\n  /**\n   * Initialize the component with a new game\n   */\n  public ngOnInit(): void {\n    this.reset();\n  }\n\n  /**\n   * Get the rows of the board\n   */\n  public get rows(): TicTacToeRow[] { return this._rows; }\n\n  /**\n   * Get the state of the game\n   */\n  public get state(): TicTacToeGameState { return this._state; }\n\n  /**\n   * Get the columns of the board (transpose the rows)\n   */\n  private get columns(): TicTacToeCell[][] {\n    let columns: TicTacToeCell[][] = [];\n    for (let c: number = 0; c  cell.status === TicTacToePlayer.X).length === 3) return TicTacToePlayer.X;\n    if (cells.filter((cell: TicTacToeCell) => cell.status === TicTacToePlayer.O).length === 3) return TicTacToePlayer.O;\n    return null;\n  }\n\n  /**\n   * Update the state of the game by checking for game over conditions or updating the current player\n   */\n  public updateGameState(): void {\n\n    // Check for Game Over\n\n    // Check for WIN\n    let winner: TicTacToePlayer = null;\n    let allCells: TicTacToeCell[] = [];\n\n    // Horizontal\n    for (let r: number = 0; r  cell.status === null).length === 0) {\n      this._state.draw();\n      return;\n    }\n\n    // Game is still being played, switch players\n    this._state.switchPlayer();\n  }\n\n  /**\n   * Handle a cell click event (a \"move\")\n   * @param cell \n   */\n  public click(cell: TicTacToeCell): void {\n    if (!this._state.gameOver && cell.click(this._state.currentPlayer)) {\n      this.updateGameState();\n\n      if (this._state.result === TicTacToeGameResult.won) {\n        console.log(`WINNER: ${this._state.winner}`);\n        this.gamesService.reportWin('Tic-Tac-Toe', this._state.winner.toString()).subscribe()\n      } else if (this._state.result === TicTacToeGameResult.draw) {\n        console.log('DRAW!');\n      }\n    }\n  }\n\n  /**\n   * Reset the game\n   */\n  public reset(): void {\n    this._rows = [new TicTacToeRow(), new TicTacToeRow(), new TicTacToeRow()];\n    this._state = new TicTacToeGameState();\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TicTacToeGameComponent.html":{"url":"components/TicTacToeGameComponent.html","title":"component - TicTacToeGameComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TicTacToeGameComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/games/tic-tac-toe/tic-tac-toe-game/tic-tac-toe-game.component.ts\n\n\n    \n        Description\n    \n    \n        A Tic-Tac-Toe game\n\n    \n\n    \n        Extends\n    \n    \n            GameComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                            { : , : (() => ) }\n                \n            \n\n\n            \n                selector\n                tic-tac-toe-game\n            \n\n            \n                styleUrls\n                tic-tac-toe-game.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./tic-tac-toe-game.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                board\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                newGame\n                            \n                            \n                                    Public\n                                    \n                                newGame\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/games/tic-tac-toe/tic-tac-toe-game/tic-tac-toe-game.component.ts:18\n                            \n                        \n\n                \n                    \n                            Initialize the component\n\n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            newGame\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        newGame()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-game/tic-tac-toe-game.component.ts:28\n                            \n                        \n\n\n                \n                    \n                            Start a new Tic-Tac-Toe game\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                \n                            newGame\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        newGame()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     GameComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in GameComponent:9\n                            \n                        \n\n\n                \n                    \n                            Trigger a new game\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            board\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        board:     TicTacToeBoardComponent\n\n                    \n                \n                    \n                        \n                            Type :     TicTacToeBoardComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : ViewChild\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-game/tic-tac-toe-game.component.ts:18\n                            \n                        \n\n                \n                    \n                        Reference to the Tic-Tac-Toe board component\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, ViewChild, forwardRef } from '@angular/core';\nimport { GameComponent } from '../../game-component';\nimport { TicTacToeBoardComponent } from '../tic-tac-toe-board/tic-tac-toe-board.component';\n\n/**\n * A Tic-Tac-Toe game\n */\n@Component({\n  selector: 'tic-tac-toe-game',\n  templateUrl: './tic-tac-toe-game.component.html',\n  styleUrls: ['./tic-tac-toe-game.component.scss'],\n  providers: [{ provide: GameComponent, useExisting: forwardRef(() => TicTacToeGameComponent) }]\n})\nexport class TicTacToeGameComponent extends GameComponent {\n  /**\n   * Reference to the Tic-Tac-Toe board component\n   */\n  @ViewChild(TicTacToeBoardComponent) board: TicTacToeBoardComponent;\n\n  /**\n   * Initialize the component\n   */\n  constructor() { super(); }\n\n  /**\n   * Start a new Tic-Tac-Toe game\n   */\n  public newGame(): void {\n    console.info('Starting a new Tic-Tac-Toe game');\n    this.board.reset();\n  }\n\n}\n\n    \n\n    \n        \n    \n\nNew Game -->\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    New Game -->'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BrowseGamesComponent', 'selector': 'app-browse-games'},{'name': 'GameViewComponent', 'selector': 'app-game-view'},{'name': 'RockPaperScissorsGameComponent', 'selector': 'rock-paper-scissors-game'},{'name': 'TicTacToeBoardComponent', 'selector': 'tic-tac-toe-board'},{'name': 'TicTacToeGameComponent', 'selector': 'tic-tac-toe-game'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TicTacToeGameComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TicTacToeGameState.html":{"url":"classes/TicTacToeGameState.html","title":"class - TicTacToeGameState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  TicTacToeGameState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts\n        \n\n            \n                Description\n            \n            \n                Class for tracking the STATE of a Tic-Tac-Toe game\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _currentPlayer\n                            \n                            \n                                    Private\n                                _result\n                            \n                            \n                                    Private\n                                _winner\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                switchPlayer\n                            \n                            \n                                    Public\n                                toString\n                            \n                            \n                                    Public\n                                win\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:101\n                            \n                        \n\n                \n                    \n                            Initialize the state:\nresult: playing\ncurrent player: X\nwinner: none\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _currentPlayer\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _currentPlayer:     TicTacToePlayer\n\n                    \n                \n                    \n                        \n                            Type :     TicTacToePlayer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:96\n                            \n                        \n\n                \n                    \n                        The currently active player\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _result\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _result:     TicTacToeGameResult\n\n                    \n                \n                    \n                        \n                            Type :     TicTacToeGameResult\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:91\n                            \n                        \n\n                \n                    \n                        The result of the game\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _winner\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _winner:     TicTacToePlayer\n\n                    \n                \n                    \n                        \n                            Type :     TicTacToePlayer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:101\n                            \n                        \n\n                \n                    \n                        The winner (if the game is over and the result is \"won\")\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            draw\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        draw()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:151\n                            \n                        \n\n\n                \n                    \n                            Set the state to \"draw\" (and clear the winner)\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            switchPlayer\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        switchPlayer()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:134\n                            \n                        \n\n\n                \n                    \n                            Switch the current player\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:166\n                            \n                        \n\n\n                \n                    \n                            Get a string representation of the state\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            win\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        win(player: TicTacToePlayer)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:143\n                            \n                        \n\n\n                \n                    \n                            Set the state to \"won\" and define the player who won the game\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        player\n                                                        \n                                                                    TicTacToePlayer\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        result\n                    \n                \n\n                \n                    \n                        getresult()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:119\n                                \n                            \n                    \n                        \n                                Get the result from the state\n\n\n                                \n                                    Returns :     TicTacToeGameResult\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        currentPlayer\n                    \n                \n\n                \n                    \n                        getcurrentPlayer()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:124\n                                \n                            \n                    \n                        \n                                Get the current player from the state\n\n\n                                \n                                    Returns :     TicTacToePlayer\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        winner\n                    \n                \n\n                \n                    \n                        getwinner()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:129\n                                \n                            \n                    \n                        \n                                Get the winner from the state\n\n\n                                \n                                    Returns :     TicTacToePlayer\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        gameOver\n                    \n                \n\n                \n                    \n                        getgameOver()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:159\n                                \n                            \n                    \n                        \n                                Check if the state represents a \"game over\" state (won or draw)\n\n\n                                \n                                    Returns :     boolean\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { GamesService } from '../../games.service';\n\n/**\n * An individual cell of a Tic-Tac-Toe game that players can claim\n */\nclass TicTacToeCell {\n  /**\n   * The player who has \"claimed\" the cell\n   */\n  private _status: TicTacToePlayer;\n\n  /**\n   * Initialize the cell:\n   * \n   * status: none (nobody has claimed it)\n   */\n  constructor() {\n    this._status = null;\n  }\n\n  /**\n   * Get the player who has claimed the cell\n   */\n  public get status(): TicTacToePlayer { return this._status; }\n\n  /**\n   * Handle a click event on the cell, set the cell's status to the player who clicked\n   * @param player \n   */\n  public click(player: TicTacToePlayer): boolean {\n    if (this._status !== null) {\n      let message: string = `This cell is already claimed by Player ${this._status}!`;\n      console.warn(message);\n      alert(message);\n      return false;\n    }\n    this._status = player;\n    return true;\n  }\n}\n\n/**\n * A row of a Tic-Tac-Toe board, containing cells\n */\nclass TicTacToeRow {\n  /**\n   * The cells in the row\n   */\n  private _cells: TicTacToeCell[];\n\n  /**\n   * Initialize the row:\n   * \n   * cells: [cell, cell, cell]\n   */\n  constructor() {\n    this._cells = [new TicTacToeCell(), new TicTacToeCell(), new TicTacToeCell()];\n  }\n\n  /**\n   * Get the cells in the row\n   */\n  public get cells(): TicTacToeCell[] { return this._cells; }\n}\n\n/**\n * The different players in a Tic-Tac-Toe game\n */\nenum TicTacToePlayer {\n  X = 'X',\n  O = 'O'\n}\n\n/**\n * The different results of a Tic-Tac-Toe game\n */\nenum TicTacToeGameResult {\n  playing = 'playing',\n  won = 'won',\n  draw = 'draw'\n}\n\n/**\n * Class for tracking the STATE of a Tic-Tac-Toe game\n */\nclass TicTacToeGameState {\n  /**\n   * The result of the game\n   */\n  private _result: TicTacToeGameResult;\n\n  /**\n   * The currently active player\n   */\n  private _currentPlayer: TicTacToePlayer;\n\n  /**\n   * The winner (if the game is over and the result is \"won\")\n   */\n  private _winner: TicTacToePlayer;\n\n  /**\n   * Initialize the state:\n   * \n   * result: playing\n   * current player: X\n   * winner: none\n   */\n  constructor() {\n    this._result = TicTacToeGameResult.playing;\n    this._currentPlayer = TicTacToePlayer.X;\n    this._winner = undefined;\n  }\n\n  /**\n   * Get the result from the state\n   */\n  public get result(): TicTacToeGameResult { return this._result; }\n\n  /**\n   * Get the current player from the state\n   */\n  public get currentPlayer(): TicTacToePlayer { return this._currentPlayer; }\n\n  /**\n   * Get the winner from the state\n   */\n  public get winner(): TicTacToePlayer { return this._winner; }\n\n  /**\n   * Switch the current player\n   */\n  public switchPlayer(): void {\n    if (this._currentPlayer === TicTacToePlayer.X) this._currentPlayer = TicTacToePlayer.O;\n    else this._currentPlayer = TicTacToePlayer.X;\n  }\n\n  /**\n   * Set the state to \"won\" and define the player who won the game\n   * @param player \n   */\n  public win(player: TicTacToePlayer) {\n    this._winner = player;\n    this._result = TicTacToeGameResult.won;\n  }\n\n  /**\n   * Set the state to \"draw\" (and clear the winner)\n   */\n  public draw(): void {\n    this._result = TicTacToeGameResult.draw;\n    this._winner = undefined;\n  }\n\n  /**\n   * Check if the state represents a \"game over\" state (won or draw)\n   */\n  public get gameOver(): boolean {\n    return this._result === TicTacToeGameResult.won || this._result === TicTacToeGameResult.draw;\n  }\n\n  /**\n   * Get a string representation of the state\n   */\n  public toString(): string {\n    if (this._result === TicTacToeGameResult.won) return 'Winner!';\n    if (this._result === TicTacToeGameResult.draw) return 'Draw!';\n    return 'Playing...';\n  }\n}\n\n/**\n * A Tic-Tac-Toe board\n */\n@Component({\n  selector: 'tic-tac-toe-board',\n  templateUrl: './tic-tac-toe-board.component.html',\n  styleUrls: ['./tic-tac-toe-board.component.scss']\n})\nexport class TicTacToeBoardComponent implements OnInit {\n\n  /**\n   * Broadcast a \"new game\" event to parent component\n   */\n  @Output('onNewGame') newGame: EventEmitter = new EventEmitter();\n\n  /**\n   * The rows of the board\n   */\n  private _rows: TicTacToeRow[];\n\n  /**\n   * The state of the game\n   */\n  private _state: TicTacToeGameState;\n\n  /**\n   * Initialize the component\n   * @param gamesService \n   */\n  constructor(private gamesService: GamesService) { }\n\n  /**\n   * Initialize the component with a new game\n   */\n  public ngOnInit(): void {\n    this.reset();\n  }\n\n  /**\n   * Get the rows of the board\n   */\n  public get rows(): TicTacToeRow[] { return this._rows; }\n\n  /**\n   * Get the state of the game\n   */\n  public get state(): TicTacToeGameState { return this._state; }\n\n  /**\n   * Get the columns of the board (transpose the rows)\n   */\n  private get columns(): TicTacToeCell[][] {\n    let columns: TicTacToeCell[][] = [];\n    for (let c: number = 0; c  cell.status === TicTacToePlayer.X).length === 3) return TicTacToePlayer.X;\n    if (cells.filter((cell: TicTacToeCell) => cell.status === TicTacToePlayer.O).length === 3) return TicTacToePlayer.O;\n    return null;\n  }\n\n  /**\n   * Update the state of the game by checking for game over conditions or updating the current player\n   */\n  public updateGameState(): void {\n\n    // Check for Game Over\n\n    // Check for WIN\n    let winner: TicTacToePlayer = null;\n    let allCells: TicTacToeCell[] = [];\n\n    // Horizontal\n    for (let r: number = 0; r  cell.status === null).length === 0) {\n      this._state.draw();\n      return;\n    }\n\n    // Game is still being played, switch players\n    this._state.switchPlayer();\n  }\n\n  /**\n   * Handle a cell click event (a \"move\")\n   * @param cell \n   */\n  public click(cell: TicTacToeCell): void {\n    if (!this._state.gameOver && cell.click(this._state.currentPlayer)) {\n      this.updateGameState();\n\n      if (this._state.result === TicTacToeGameResult.won) {\n        console.log(`WINNER: ${this._state.winner}`);\n        this.gamesService.reportWin('Tic-Tac-Toe', this._state.winner.toString()).subscribe()\n      } else if (this._state.result === TicTacToeGameResult.draw) {\n        console.log('DRAW!');\n      }\n    }\n  }\n\n  /**\n   * Reset the game\n   */\n  public reset(): void {\n    this._rows = [new TicTacToeRow(), new TicTacToeRow(), new TicTacToeRow()];\n    this._state = new TicTacToeGameState();\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TicTacToeModule.html":{"url":"modules/TicTacToeModule.html","title":"module - TicTacToeModule","body":"\n                   \n\n\n\n\n  Modules\n  TicTacToeModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TicTacToeModule\n\n\n\ncluster_TicTacToeModule_declarations\n\n\n\ncluster_TicTacToeModule_exports\n\n\n\n\nTicTacToeBoardComponent\n\nTicTacToeBoardComponent\n\n\n\nTicTacToeModule\n\nTicTacToeModule\n\nTicTacToeModule -->\n\nTicTacToeBoardComponent->TicTacToeModule\n\n\n\n\n\nTicTacToeGameComponent\n\nTicTacToeGameComponent\n\nTicTacToeModule -->\n\nTicTacToeGameComponent->TicTacToeModule\n\n\n\n\n\nTicTacToeGameComponent \n\nTicTacToeGameComponent \n\nTicTacToeGameComponent  -->\n\nTicTacToeModule->TicTacToeGameComponent \n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/games/tic-tac-toe/tic-tac-toe.module.ts\n        \n\n\n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                TicTacToeBoardComponent\n                            \n                            \n                                TicTacToeGameComponent\n                            \n                    \n                \n                \n                    Exports\n                    \n                            \n                                    TicTacToeGameComponent\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TicTacToeGameComponent } from './tic-tac-toe-game/tic-tac-toe-game.component';\nimport { TicTacToeBoardComponent } from './tic-tac-toe-board/tic-tac-toe-board.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    TicTacToeGameComponent,\n    TicTacToeBoardComponent,\n  ],\n  exports: [\n    TicTacToeGameComponent,\n  ]\n})\nexport class TicTacToeModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TicTacToeRow.html":{"url":"classes/TicTacToeRow.html","title":"class - TicTacToeRow","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  TicTacToeRow\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts\n        \n\n            \n                Description\n            \n            \n                A row of a Tic-Tac-Toe board, containing cells\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _cells\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:50\n                            \n                        \n\n                \n                    \n                            Initialize the row:\ncells: [cell, cell, cell]\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _cells\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _cells:     TicTacToeCell[]\n\n                    \n                \n                    \n                        \n                            Type :     TicTacToeCell[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:50\n                            \n                        \n\n                \n                    \n                        The cells in the row\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        cells\n                    \n                \n\n                \n                    \n                        getcells()\n                    \n                \n                            \n                                \n                                    Defined in src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts:64\n                                \n                            \n                    \n                        \n                                Get the cells in the row\n\n\n                                \n                                    Returns :     TicTacToeCell[]\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { GamesService } from '../../games.service';\n\n/**\n * An individual cell of a Tic-Tac-Toe game that players can claim\n */\nclass TicTacToeCell {\n  /**\n   * The player who has \"claimed\" the cell\n   */\n  private _status: TicTacToePlayer;\n\n  /**\n   * Initialize the cell:\n   * \n   * status: none (nobody has claimed it)\n   */\n  constructor() {\n    this._status = null;\n  }\n\n  /**\n   * Get the player who has claimed the cell\n   */\n  public get status(): TicTacToePlayer { return this._status; }\n\n  /**\n   * Handle a click event on the cell, set the cell's status to the player who clicked\n   * @param player \n   */\n  public click(player: TicTacToePlayer): boolean {\n    if (this._status !== null) {\n      let message: string = `This cell is already claimed by Player ${this._status}!`;\n      console.warn(message);\n      alert(message);\n      return false;\n    }\n    this._status = player;\n    return true;\n  }\n}\n\n/**\n * A row of a Tic-Tac-Toe board, containing cells\n */\nclass TicTacToeRow {\n  /**\n   * The cells in the row\n   */\n  private _cells: TicTacToeCell[];\n\n  /**\n   * Initialize the row:\n   * \n   * cells: [cell, cell, cell]\n   */\n  constructor() {\n    this._cells = [new TicTacToeCell(), new TicTacToeCell(), new TicTacToeCell()];\n  }\n\n  /**\n   * Get the cells in the row\n   */\n  public get cells(): TicTacToeCell[] { return this._cells; }\n}\n\n/**\n * The different players in a Tic-Tac-Toe game\n */\nenum TicTacToePlayer {\n  X = 'X',\n  O = 'O'\n}\n\n/**\n * The different results of a Tic-Tac-Toe game\n */\nenum TicTacToeGameResult {\n  playing = 'playing',\n  won = 'won',\n  draw = 'draw'\n}\n\n/**\n * Class for tracking the STATE of a Tic-Tac-Toe game\n */\nclass TicTacToeGameState {\n  /**\n   * The result of the game\n   */\n  private _result: TicTacToeGameResult;\n\n  /**\n   * The currently active player\n   */\n  private _currentPlayer: TicTacToePlayer;\n\n  /**\n   * The winner (if the game is over and the result is \"won\")\n   */\n  private _winner: TicTacToePlayer;\n\n  /**\n   * Initialize the state:\n   * \n   * result: playing\n   * current player: X\n   * winner: none\n   */\n  constructor() {\n    this._result = TicTacToeGameResult.playing;\n    this._currentPlayer = TicTacToePlayer.X;\n    this._winner = undefined;\n  }\n\n  /**\n   * Get the result from the state\n   */\n  public get result(): TicTacToeGameResult { return this._result; }\n\n  /**\n   * Get the current player from the state\n   */\n  public get currentPlayer(): TicTacToePlayer { return this._currentPlayer; }\n\n  /**\n   * Get the winner from the state\n   */\n  public get winner(): TicTacToePlayer { return this._winner; }\n\n  /**\n   * Switch the current player\n   */\n  public switchPlayer(): void {\n    if (this._currentPlayer === TicTacToePlayer.X) this._currentPlayer = TicTacToePlayer.O;\n    else this._currentPlayer = TicTacToePlayer.X;\n  }\n\n  /**\n   * Set the state to \"won\" and define the player who won the game\n   * @param player \n   */\n  public win(player: TicTacToePlayer) {\n    this._winner = player;\n    this._result = TicTacToeGameResult.won;\n  }\n\n  /**\n   * Set the state to \"draw\" (and clear the winner)\n   */\n  public draw(): void {\n    this._result = TicTacToeGameResult.draw;\n    this._winner = undefined;\n  }\n\n  /**\n   * Check if the state represents a \"game over\" state (won or draw)\n   */\n  public get gameOver(): boolean {\n    return this._result === TicTacToeGameResult.won || this._result === TicTacToeGameResult.draw;\n  }\n\n  /**\n   * Get a string representation of the state\n   */\n  public toString(): string {\n    if (this._result === TicTacToeGameResult.won) return 'Winner!';\n    if (this._result === TicTacToeGameResult.draw) return 'Draw!';\n    return 'Playing...';\n  }\n}\n\n/**\n * A Tic-Tac-Toe board\n */\n@Component({\n  selector: 'tic-tac-toe-board',\n  templateUrl: './tic-tac-toe-board.component.html',\n  styleUrls: ['./tic-tac-toe-board.component.scss']\n})\nexport class TicTacToeBoardComponent implements OnInit {\n\n  /**\n   * Broadcast a \"new game\" event to parent component\n   */\n  @Output('onNewGame') newGame: EventEmitter = new EventEmitter();\n\n  /**\n   * The rows of the board\n   */\n  private _rows: TicTacToeRow[];\n\n  /**\n   * The state of the game\n   */\n  private _state: TicTacToeGameState;\n\n  /**\n   * Initialize the component\n   * @param gamesService \n   */\n  constructor(private gamesService: GamesService) { }\n\n  /**\n   * Initialize the component with a new game\n   */\n  public ngOnInit(): void {\n    this.reset();\n  }\n\n  /**\n   * Get the rows of the board\n   */\n  public get rows(): TicTacToeRow[] { return this._rows; }\n\n  /**\n   * Get the state of the game\n   */\n  public get state(): TicTacToeGameState { return this._state; }\n\n  /**\n   * Get the columns of the board (transpose the rows)\n   */\n  private get columns(): TicTacToeCell[][] {\n    let columns: TicTacToeCell[][] = [];\n    for (let c: number = 0; c  cell.status === TicTacToePlayer.X).length === 3) return TicTacToePlayer.X;\n    if (cells.filter((cell: TicTacToeCell) => cell.status === TicTacToePlayer.O).length === 3) return TicTacToePlayer.O;\n    return null;\n  }\n\n  /**\n   * Update the state of the game by checking for game over conditions or updating the current player\n   */\n  public updateGameState(): void {\n\n    // Check for Game Over\n\n    // Check for WIN\n    let winner: TicTacToePlayer = null;\n    let allCells: TicTacToeCell[] = [];\n\n    // Horizontal\n    for (let r: number = 0; r  cell.status === null).length === 0) {\n      this._state.draw();\n      return;\n    }\n\n    // Game is still being played, switch players\n    this._state.switchPlayer();\n  }\n\n  /**\n   * Handle a cell click event (a \"move\")\n   * @param cell \n   */\n  public click(cell: TicTacToeCell): void {\n    if (!this._state.gameOver && cell.click(this._state.currentPlayer)) {\n      this.updateGameState();\n\n      if (this._state.result === TicTacToeGameResult.won) {\n        console.log(`WINNER: ${this._state.winner}`);\n        this.gamesService.reportWin('Tic-Tac-Toe', this._state.winner.toString()).subscribe()\n      } else if (this._state.result === TicTacToeGameResult.draw) {\n        console.log('DRAW!');\n      }\n    }\n  }\n\n  /**\n   * Reset the game\n   */\n  public reset(): void {\n    this._rows = [new TicTacToeRow(), new TicTacToeRow(), new TicTacToeRow()];\n    this._state = new TicTacToeGameState();\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Timer.html":{"url":"classes/Timer.html","title":"class - Timer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Timer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts\n        \n\n            \n                Description\n            \n            \n                A simple timer for time-based game functionality\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _interval\n                            \n                            \n                                    Private\n                                _timeRemaining\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                start\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(duration: number)\n                    \n                \n                        \n                            \n                                Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:19\n                            \n                        \n\n                \n                    \n                            Initialize the timer\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        duration\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _interval\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _interval:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:19\n                            \n                        \n\n                \n                    \n                        The interval duration (milliseconds)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _timeRemaining\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _timeRemaining:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:14\n                            \n                        \n\n                \n                    \n                        The amount of time (seconds) remaining on the timer\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            start\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        start()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts:33\n                            \n                        \n\n\n                \n                    \n                            Start the timer and broadcast as time ticks away\n\n\n                            \n                                Returns :     Subject\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Component, OnInit, forwardRef } from '@angular/core';\nimport { GameComponent } from '../../game-component';\nimport { GamesService } from '../../games.service';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\n\n/**\n * A simple timer for time-based game functionality\n */\nclass Timer {\n  /**\n   * The amount of time (seconds) remaining on the timer\n   */\n  private _timeRemaining: number;\n\n  /**\n   * The interval duration (milliseconds)\n   */\n  private _interval: number;\n\n  /**\n   * Initialize the timer\n   * @param duration \n   */\n  constructor(duration: number) {\n    this._timeRemaining = duration;\n    this._interval = 1000;\n  }\n\n  /**\n   * Start the timer and broadcast as time ticks away\n   */\n  public start(): Subject {\n    let obs: Subject = new Subject();\n\n    let timer = setInterval(() => {\n      this._timeRemaining--;\n      obs.next(this._timeRemaining);\n      if (this._timeRemaining  player wins\n * [computer move, player move] --> computer wins\n */\nconst WIN_STATES: Array = [\n  [RockPaperScissorsMove.rock, RockPaperScissorsMove.scissors],\n  [RockPaperScissorsMove.paper, RockPaperScissorsMove.rock],\n  [RockPaperScissorsMove.scissors, RockPaperScissorsMove.paper]\n];\n\n/**\n * The amount of time (seconds) for the player to make a move\n */\nconst MOVE_TIME_LIMIT: number = 3;\n\n/**\n * Rock-Paper-Scissors game\n */\n@Component({\n  selector: 'rock-paper-scissors-game',\n  templateUrl: './rock-paper-scissors-game.component.html',\n  styleUrls: ['./rock-paper-scissors-game.component.scss'],\n  providers: [{ provide: GameComponent, useExisting: forwardRef(() => RockPaperScissorsGameComponent) }]\n})\nexport class RockPaperScissorsGameComponent extends GameComponent implements OnInit {\n\n  /**\n   * Get the acceptable moves\n   */\n  public get moves(): RockPaperScissorsMove[] { return MOVES; }\n\n  /**\n   * Track if the game is being played\n   */\n  private _playing: boolean = false;\n\n  /**\n   * Check if the game is currently being played\n   */\n  public get playing(): boolean { return this._playing; }\n\n  /**\n   * The time remaining for the player to select a move\n   */\n  private _timeRemaining: number;\n\n  /**\n   * Get the amount of time remaining for move selection\n   */\n  public get timeRemaining(): number { return this._timeRemaining; }\n\n  /**\n   * Track if the player is currently choosing a move\n   */\n  private _choosingMove: boolean = false;\n\n  /**\n   * Check if the player is choosing a move\n   */\n  public get choosingMove(): boolean { return this._choosingMove; }\n\n  /**\n   * The outcome of the game\n   */\n  private _outcome: RockPaperScissorsResult;\n\n  /**\n   * Get the outcome of the game\n   */\n  public get outcome(): RockPaperScissorsResult { return this._outcome; }\n\n  /**\n   * The player (human) move\n   */\n  private _playerMove: RockPaperScissorsMove;\n\n  /**\n   * Get the player's move\n   */\n  public get playerMove(): RockPaperScissorsMove { return this._playerMove; }\n\n  /**\n   * The opponent's (computer's) move\n   */\n  private _opponentMove: RockPaperScissorsMove;\n\n  /**\n   * Get the opponent's move\n   */\n  public get opponentMove(): RockPaperScissorsMove { return this._opponentMove; }\n\n  /**\n   * Initialize the component\n   * @param gamesService \n   */\n  constructor(private gamesService: GamesService) { super(); }\n\n  /**\n   * Initialize the component with a new game\n   */\n  public ngOnInit(): void {\n    this.newGame();\n  }\n\n  /**\n   * Check the result of the game\n   */\n  private checkResult(): RockPaperScissorsResult {\n    let winStateStrings: string[] = WIN_STATES.map((state: [RockPaperScissorsMove, RockPaperScissorsMove]) => state.join('/'));\n    let state: [RockPaperScissorsMove, RockPaperScissorsMove] = [this._playerMove, this._opponentMove];\n\n    if ((this._playerMove && !this._opponentMove) || (winStateStrings.indexOf(state.join('/')) > -1)) return RockPaperScissorsResult.win;\n    if ((this._opponentMove && !this._playerMove) || (winStateStrings.indexOf(state.reverse().join('/')) > -1)) return RockPaperScissorsResult.lose;\n    return RockPaperScissorsResult.draw;\n  }\n\n  /**\n   * Start playing\n   */\n  public start(): void {\n    this._playing = true;\n    this._choosingMove = true;\n\n    // Determine opponent's move\n    this._opponentMove = MOVES[Math.floor(Math.random() * (MOVES.length - 1))];\n\n    this._timeRemaining = MOVE_TIME_LIMIT;\n    let timer: Subscription = new Timer(this._timeRemaining).start().subscribe((remaining: number) => {\n      this._timeRemaining = remaining;\n    }, () => { }, () => {\n      this._choosingMove = false;\n\n      // determine result\n      this._outcome = this.checkResult();\n\n      if (this._outcome !== 'draw') this.gamesService.reportWin('Rock-Paper-Scissors', this._outcome === 'win' ? 'Human' : 'Computer').subscribe();\n      timer.unsubscribe();\n    });\n  }\n\n  /**\n   * Take the player's move choice\n   * @param choice \n   */\n  public chooseMove(choice: RockPaperScissorsMove): void {\n    this._playerMove = choice;\n    console.info(`Move: ${this._playerMove}`);\n  }\n\n  /**\n   * Start a new game\n   */\n  public newGame(): void {\n    console.info('Starting a new Rock-Paper-Scissors game');\n    this._playing = this._choosingMove = false;\n    this._outcome = this._playerMove = this._opponentMove = undefined;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                    src/app/app.component.ts\n            \n            \n                component\n            \n            \n                AppComponent\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                    src/app/games/browse-games/browse-games.component.ts\n            \n            \n                component\n            \n            \n                BrowseGamesComponent\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                    src/app/games/game-component.ts\n            \n            \n                class\n            \n            \n                GameComponent\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                    src/app/games/game-view/game-view.component.ts\n            \n            \n                component\n            \n            \n                GameViewComponent\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                    src/app/games/games.service.ts\n            \n            \n                class\n            \n            \n                Game\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                    src/app/games/games.service.ts\n            \n            \n                injectable\n            \n            \n                GamesService\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                    src/app/games/games.service.ts\n            \n            \n                variable\n            \n            \n                GAMES\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                    src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts\n            \n            \n                component\n            \n            \n                RockPaperScissorsGameComponent\n            \n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                    src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts\n            \n            \n                class\n            \n            \n                Timer\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                    src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts\n            \n            \n                variable\n            \n            \n                MOVE_TIME_LIMIT\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                    src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts\n            \n            \n                variable\n            \n            \n                MOVES\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                    src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts\n            \n            \n                variable\n            \n            \n                WIN_STATES\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                    src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts\n            \n            \n                component\n            \n            \n                TicTacToeBoardComponent\n            \n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                    src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts\n            \n            \n                class\n            \n            \n                TicTacToeCell\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                    src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts\n            \n            \n                class\n            \n            \n                TicTacToeGameState\n            \n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                    src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts\n            \n            \n                class\n            \n            \n                TicTacToeRow\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                    src/app/games/tic-tac-toe/tic-tac-toe-game/tic-tac-toe-game.component.ts\n            \n            \n                component\n            \n            \n                TicTacToeGameComponent\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                    src/environments/environment.prod.ts\n            \n            \n                variable\n            \n            \n                environment\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                    src/environments/environment.ts\n            \n            \n                variable\n            \n            \n                environment\n            \n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^5.2.0\n        \n            @angular/common : ^5.2.0\n        \n            @angular/compiler : ^5.2.0\n        \n            @angular/core : ^5.2.0\n        \n            @angular/forms : ^5.2.0\n        \n            @angular/http : ^5.2.0\n        \n            @angular/platform-browser : ^5.2.0\n        \n            @angular/platform-browser-dynamic : ^5.2.0\n        \n            @angular/router : ^5.2.0\n        \n            core-js : ^2.4.1\n        \n            rxjs : ^5.5.6\n        \n            zone.js : ^0.8.19\n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RockPaperScissorsMove   (src/.../rock-paper-scissors-game.component.ts)\n                        \n                        \n                            RockPaperScissorsResult   (src/.../rock-paper-scissors-game.component.ts)\n                        \n                        \n                            TicTacToeGameResult   (src/.../tic-tac-toe-board.component.ts)\n                        \n                        \n                            TicTacToePlayer   (src/.../tic-tac-toe-board.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts\n    \n        \n            \n                \n                    \n                        \n                        RockPaperScissorsMove\n                    \n                \n                    \n                        \n                            The valid moves of Rock-Paper-Scissors\n\n                        \n                    \n                        \n                            \n                                 rock\n                            \n                        \n                        \n                            \n                                Value: rock\n                            \n                        \n                        \n                            \n                                 paper\n                            \n                        \n                        \n                            \n                                Value: paper\n                            \n                        \n                        \n                            \n                                 scissors\n                            \n                        \n                        \n                            \n                                Value: scissors\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        RockPaperScissorsResult\n                    \n                \n                    \n                        \n                            The possible outcomes of a Rock-Paper-Scissors game\n\n                        \n                    \n                        \n                            \n                                 win\n                            \n                        \n                        \n                            \n                                Value: win\n                            \n                        \n                        \n                            \n                                 lose\n                            \n                        \n                        \n                            \n                                Value: lose\n                            \n                        \n                        \n                            \n                                 draw\n                            \n                        \n                        \n                            \n                                Value: draw\n                            \n                        \n            \n        \n\n    src/app/games/tic-tac-toe/tic-tac-toe-board/tic-tac-toe-board.component.ts\n    \n        \n            \n                \n                    \n                        \n                        TicTacToeGameResult\n                    \n                \n                    \n                        \n                            The different results of a Tic-Tac-Toe game\n\n                        \n                    \n                        \n                            \n                                 playing\n                            \n                        \n                        \n                            \n                                Value: playing\n                            \n                        \n                        \n                            \n                                 won\n                            \n                        \n                        \n                            \n                                Value: won\n                            \n                        \n                        \n                            \n                                 draw\n                            \n                        \n                        \n                            \n                                Value: draw\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        TicTacToePlayer\n                    \n                \n                    \n                        \n                            The different players in a Tic-Tac-Toe game\n\n                        \n                    \n                        \n                            \n                                 X\n                            \n                        \n                        \n                            \n                                Value: X\n                            \n                        \n                        \n                            \n                                 O\n                            \n                        \n                        \n                            \n                                Value: O\n                            \n                        \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nArcadeAngular\nThis project was generated with Angular CLI version 1.7.4.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the -prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GamesModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RockPaperScissorsModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TicTacToeModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n            \n                \n                    \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_GamesModule\n\n\n\ncluster_GamesModule_declarations\n\n\n\ncluster_GamesModule_imports\n\n\n\ncluster_GamesModule_exports\n\n\n\ncluster_GamesModule_providers\n\n\n\ncluster_RockPaperScissorsModule\n\n\n\ncluster_RockPaperScissorsModule_declarations\n\n\n\ncluster_RockPaperScissorsModule_exports\n\n\n\ncluster_TicTacToeModule\n\n\n\ncluster_TicTacToeModule_declarations\n\n\n\ncluster_TicTacToeModule_exports\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nGamesModule\n\nGamesModule\n\nAppModule -->\n\nGamesModule->AppModule\n\n\n\n\n\nGameViewComponent \n\nGameViewComponent \n\nGameViewComponent  -->\n\nGamesModule->GameViewComponent \n\n\n\n\n\nRockPaperScissorsModule \n\nRockPaperScissorsModule \n\nRockPaperScissorsModule  -->\n\nGamesModule->RockPaperScissorsModule \n\n\n\n\n\nTicTacToeModule \n\nTicTacToeModule \n\nTicTacToeModule  -->\n\nGamesModule->TicTacToeModule \n\n\n\n\n\nBrowseGamesComponent\n\nBrowseGamesComponent\n\nGamesModule -->\n\nBrowseGamesComponent->GamesModule\n\n\n\n\n\nGameViewComponent\n\nGameViewComponent\n\nGamesModule -->\n\nGameViewComponent->GamesModule\n\n\n\n\n\nRockPaperScissorsModule\n\nRockPaperScissorsModule\n\nGamesModule -->\n\nRockPaperScissorsModule->GamesModule\n\n\n\n\n\nRockPaperScissorsGameComponent \n\nRockPaperScissorsGameComponent \n\nRockPaperScissorsGameComponent  -->\n\nRockPaperScissorsModule->RockPaperScissorsGameComponent \n\n\n\n\n\nTicTacToeModule\n\nTicTacToeModule\n\nGamesModule -->\n\nTicTacToeModule->GamesModule\n\n\n\n\n\nTicTacToeGameComponent \n\nTicTacToeGameComponent \n\nTicTacToeGameComponent  -->\n\nTicTacToeModule->TicTacToeGameComponent \n\n\n\n\n\nGamesService\n\nGamesService\n\nGamesModule -->\n\nGamesService->GamesModule\n\n\n\n\n\nRockPaperScissorsGameComponent\n\nRockPaperScissorsGameComponent\n\nRockPaperScissorsModule -->\n\nRockPaperScissorsGameComponent->RockPaperScissorsModule\n\n\n\n\n\nTicTacToeBoardComponent\n\nTicTacToeBoardComponent\n\nTicTacToeModule -->\n\nTicTacToeBoardComponent->TicTacToeModule\n\n\n\n\n\nTicTacToeGameComponent\n\nTicTacToeGameComponent\n\nTicTacToeModule -->\n\nTicTacToeGameComponent->TicTacToeModule\n\n\n\n\n\n\n                \n                \n                \n                    Zoom in\n                    Reset\n                    Zoom out\n                \n            \n\n    \n            \n                \n                    \n                        \n                        \n                            5 modules\n                        \n                    \n                \n            \n            \n                \n                    \n                        \n                        6 components\n                    \n                \n            \n            \n                \n                    \n                        \n                        1 injectable\n                    \n                \n            \n            \n                \n                    \n                        \n                        6 classes\n                    \n                \n            \n            \n                \n                    \n                        \n                        \n                            2 routes\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            GAMES   (src/.../games.service.ts)\n                        \n                        \n                            MOVE_TIME_LIMIT   (src/.../rock-paper-scissors-game.component.ts)\n                        \n                        \n                            MOVES   (src/.../rock-paper-scissors-game.component.ts)\n                        \n                        \n                            WIN_STATES   (src/.../rock-paper-scissors-game.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        environment:     object\n\n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true\n}\n                        \n                    \n\n                \n                    \n                        Production environment configuration\n\n                    \n                \n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        environment:     object\n\n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false\n}\n                        \n                    \n\n                \n                    \n                        The default environment configuration\n\n                    \n                \n\n            \n        \n\n    src/app/games/games.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GAMES\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        GAMES:     Game[]\n\n                    \n                \n                    \n                        \n                            Type :     Game[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    id: 'tic-tac-toe',\n    name: 'Tic-Tac-Toe',\n  }, {\n    id: 'rock-paper-scissors',\n    name: 'Rock-Paper-Scissors'\n  }\n]\n                        \n                    \n\n                \n                    \n                        The implemented games\n\n                    \n                \n\n            \n        \n\n    src/app/games/rock-paper-scissors/rock-paper-scissors-game/rock-paper-scissors-game.component.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            MOVE_TIME_LIMIT\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        MOVE_TIME_LIMIT:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 3\n                        \n                    \n\n                \n                    \n                        The amount of time (seconds) for the player to make a move\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MOVES\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        MOVES:     RockPaperScissorsMove[]\n\n                    \n                \n                    \n                        \n                            Type :     RockPaperScissorsMove[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  RockPaperScissorsMove.rock,\n  RockPaperScissorsMove.paper,\n  RockPaperScissorsMove.scissors\n]\n                        \n                    \n\n                \n                    \n                        The valid moves in a Rock-Paper-Scissors game\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            WIN_STATES\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        WIN_STATES:     Array<>\n\n                    \n                \n                    \n                        \n                            Type :     Array<>\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  [RockPaperScissorsMove.rock, RockPaperScissorsMove.scissors],\n  [RockPaperScissorsMove.paper, RockPaperScissorsMove.rock],\n  [RockPaperScissorsMove.scissors, RockPaperScissorsMove.paper]\n]\n                        \n                    \n\n                \n                    \n                        String representations of the win states of a Rock-Paper-Scissors game\ne.g.:\n[player move, computer move] --> player wins\n[computer move, player move] --> computer wins\n\n                    \n                \n\n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
